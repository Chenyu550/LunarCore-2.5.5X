// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueEnterCellCsReqOuterClass {
  /**
   * Protobuf type {@code ChessRogueEnterCellCsReq}
   */
  public static final class ChessRogueEnterCellCsReq extends ProtoMessage<ChessRogueEnterCellCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cell_id = 3;</code>
     */
    private int cellId;

    /**
     * <code>optional uint32 select_monster_id = 15;</code>
     */
    private int selectMonsterId;

    private ChessRogueEnterCellCsReq() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueEnterCellCsReq}
     */
    public static ChessRogueEnterCellCsReq newInstance() {
      return new ChessRogueEnterCellCsReq();
    }

    /**
     * <code>optional uint32 cell_id = 3;</code>
     * @return whether the cellId field is set
     */
    public boolean hasCellId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cell_id = 3;</code>
     * @return this
     */
    public ChessRogueEnterCellCsReq clearCellId() {
      bitField0_ &= ~0x00000001;
      cellId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cell_id = 3;</code>
     * @return the cellId
     */
    public int getCellId() {
      return cellId;
    }

    /**
     * <code>optional uint32 cell_id = 3;</code>
     * @param value the cellId to set
     * @return this
     */
    public ChessRogueEnterCellCsReq setCellId(final int value) {
      bitField0_ |= 0x00000001;
      cellId = value;
      return this;
    }

    /**
     * <code>optional uint32 select_monster_id = 15;</code>
     * @return whether the selectMonsterId field is set
     */
    public boolean hasSelectMonsterId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 select_monster_id = 15;</code>
     * @return this
     */
    public ChessRogueEnterCellCsReq clearSelectMonsterId() {
      bitField0_ &= ~0x00000002;
      selectMonsterId = 0;
      return this;
    }

    /**
     * <code>optional uint32 select_monster_id = 15;</code>
     * @return the selectMonsterId
     */
    public int getSelectMonsterId() {
      return selectMonsterId;
    }

    /**
     * <code>optional uint32 select_monster_id = 15;</code>
     * @param value the selectMonsterId to set
     * @return this
     */
    public ChessRogueEnterCellCsReq setSelectMonsterId(final int value) {
      bitField0_ |= 0x00000002;
      selectMonsterId = value;
      return this;
    }

    @Override
    public ChessRogueEnterCellCsReq copyFrom(final ChessRogueEnterCellCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        cellId = other.cellId;
        selectMonsterId = other.selectMonsterId;
      }
      return this;
    }

    @Override
    public ChessRogueEnterCellCsReq mergeFrom(final ChessRogueEnterCellCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCellId()) {
        setCellId(other.cellId);
      }
      if (other.hasSelectMonsterId()) {
        setSelectMonsterId(other.selectMonsterId);
      }
      return this;
    }

    @Override
    public ChessRogueEnterCellCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cellId = 0;
      selectMonsterId = 0;
      return this;
    }

    @Override
    public ChessRogueEnterCellCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueEnterCellCsReq)) {
        return false;
      }
      ChessRogueEnterCellCsReq other = (ChessRogueEnterCellCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasCellId() || cellId == other.cellId)
        && (!hasSelectMonsterId() || selectMonsterId == other.selectMonsterId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(selectMonsterId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(selectMonsterId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueEnterCellCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // cellId
            cellId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // selectMonsterId
            selectMonsterId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.cellId, cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.selectMonsterId, selectMonsterId);
      }
      output.endObject();
    }

    @Override
    public ChessRogueEnterCellCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1364082147:
          case 663147800: {
            if (input.isAtField(FieldNames.cellId)) {
              if (!input.trySkipNullValue()) {
                cellId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1860466439:
          case -1194635581: {
            if (input.isAtField(FieldNames.selectMonsterId)) {
              if (!input.trySkipNullValue()) {
                selectMonsterId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueEnterCellCsReq clone() {
      return new ChessRogueEnterCellCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueEnterCellCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterCellCsReq(), data).checkInitialized();
    }

    public static ChessRogueEnterCellCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterCellCsReq(), input).checkInitialized();
    }

    public static ChessRogueEnterCellCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterCellCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueEnterCellCsReq messages
     */
    public static MessageFactory<ChessRogueEnterCellCsReq> getFactory() {
      return ChessRogueEnterCellCsReqFactory.INSTANCE;
    }

    private enum ChessRogueEnterCellCsReqFactory implements MessageFactory<ChessRogueEnterCellCsReq> {
      INSTANCE;

      @Override
      public ChessRogueEnterCellCsReq create() {
        return ChessRogueEnterCellCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName cellId = FieldName.forField("cellId", "cell_id");

      static final FieldName selectMonsterId = FieldName.forField("selectMonsterId", "select_monster_id");
    }
  }
}
