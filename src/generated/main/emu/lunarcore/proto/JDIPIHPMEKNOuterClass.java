// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class JDIPIHPMEKNOuterClass {
  /**
   * Protobuf type {@code JDIPIHPMEKN}
   */
  public static final class JDIPIHPMEKN extends ProtoMessage<JDIPIHPMEKN> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 NGHLOHOEOID = 10;</code>
     */
    private int nGHLOHOEOID;

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     */
    private final ICNMLEMMHKLOuterClass.ICNMLEMMHKL fPGMAJOGPGG = ICNMLEMMHKLOuterClass.ICNMLEMMHKL.newInstance();

    private JDIPIHPMEKN() {
    }

    /**
     * @return a new empty instance of {@code JDIPIHPMEKN}
     */
    public static JDIPIHPMEKN newInstance() {
      return new JDIPIHPMEKN();
    }

    /**
     * <code>optional uint32 NGHLOHOEOID = 10;</code>
     * @return whether the nGHLOHOEOID field is set
     */
    public boolean hasNGHLOHOEOID() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 NGHLOHOEOID = 10;</code>
     * @return this
     */
    public JDIPIHPMEKN clearNGHLOHOEOID() {
      bitField0_ &= ~0x00000001;
      nGHLOHOEOID = 0;
      return this;
    }

    /**
     * <code>optional uint32 NGHLOHOEOID = 10;</code>
     * @return the nGHLOHOEOID
     */
    public int getNGHLOHOEOID() {
      return nGHLOHOEOID;
    }

    /**
     * <code>optional uint32 NGHLOHOEOID = 10;</code>
     * @param value the nGHLOHOEOID to set
     * @return this
     */
    public JDIPIHPMEKN setNGHLOHOEOID(final int value) {
      bitField0_ |= 0x00000001;
      nGHLOHOEOID = value;
      return this;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     * @return whether the fPGMAJOGPGG field is set
     */
    public boolean hasFPGMAJOGPGG() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     * @return this
     */
    public JDIPIHPMEKN clearFPGMAJOGPGG() {
      bitField0_ &= ~0x00000002;
      fPGMAJOGPGG.clear();
      return this;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFPGMAJOGPGG()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ICNMLEMMHKLOuterClass.ICNMLEMMHKL getFPGMAJOGPGG() {
      return fPGMAJOGPGG;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ICNMLEMMHKLOuterClass.ICNMLEMMHKL getMutableFPGMAJOGPGG() {
      bitField0_ |= 0x00000002;
      return fPGMAJOGPGG;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 14;</code>
     * @param value the fPGMAJOGPGG to set
     * @return this
     */
    public JDIPIHPMEKN setFPGMAJOGPGG(final ICNMLEMMHKLOuterClass.ICNMLEMMHKL value) {
      bitField0_ |= 0x00000002;
      fPGMAJOGPGG.copyFrom(value);
      return this;
    }

    @Override
    public JDIPIHPMEKN copyFrom(final JDIPIHPMEKN other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        nGHLOHOEOID = other.nGHLOHOEOID;
        fPGMAJOGPGG.copyFrom(other.fPGMAJOGPGG);
      }
      return this;
    }

    @Override
    public JDIPIHPMEKN mergeFrom(final JDIPIHPMEKN other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasNGHLOHOEOID()) {
        setNGHLOHOEOID(other.nGHLOHOEOID);
      }
      if (other.hasFPGMAJOGPGG()) {
        getMutableFPGMAJOGPGG().mergeFrom(other.fPGMAJOGPGG);
      }
      return this;
    }

    @Override
    public JDIPIHPMEKN clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nGHLOHOEOID = 0;
      fPGMAJOGPGG.clear();
      return this;
    }

    @Override
    public JDIPIHPMEKN clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fPGMAJOGPGG.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof JDIPIHPMEKN)) {
        return false;
      }
      JDIPIHPMEKN other = (JDIPIHPMEKN) o;
      return bitField0_ == other.bitField0_
        && (!hasNGHLOHOEOID() || nGHLOHOEOID == other.nGHLOHOEOID)
        && (!hasFPGMAJOGPGG() || fPGMAJOGPGG.equals(other.fPGMAJOGPGG));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(nGHLOHOEOID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(fPGMAJOGPGG);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(nGHLOHOEOID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(fPGMAJOGPGG);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public JDIPIHPMEKN mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // nGHLOHOEOID
            nGHLOHOEOID = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // fPGMAJOGPGG
            input.readMessage(fPGMAJOGPGG);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.nGHLOHOEOID, nGHLOHOEOID);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.fPGMAJOGPGG, fPGMAJOGPGG);
      }
      output.endObject();
    }

    @Override
    public JDIPIHPMEKN mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2055759550: {
            if (input.isAtField(FieldNames.nGHLOHOEOID)) {
              if (!input.trySkipNullValue()) {
                nGHLOHOEOID = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1550313631: {
            if (input.isAtField(FieldNames.fPGMAJOGPGG)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(fPGMAJOGPGG);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public JDIPIHPMEKN clone() {
      return new JDIPIHPMEKN().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static JDIPIHPMEKN parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new JDIPIHPMEKN(), data).checkInitialized();
    }

    public static JDIPIHPMEKN parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new JDIPIHPMEKN(), input).checkInitialized();
    }

    public static JDIPIHPMEKN parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new JDIPIHPMEKN(), input).checkInitialized();
    }

    /**
     * @return factory for creating JDIPIHPMEKN messages
     */
    public static MessageFactory<JDIPIHPMEKN> getFactory() {
      return JDIPIHPMEKNFactory.INSTANCE;
    }

    private enum JDIPIHPMEKNFactory implements MessageFactory<JDIPIHPMEKN> {
      INSTANCE;

      @Override
      public JDIPIHPMEKN create() {
        return JDIPIHPMEKN.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName nGHLOHOEOID = FieldName.forField("NGHLOHOEOID");

      static final FieldName fPGMAJOGPGG = FieldName.forField("FPGMAJOGPGG");
    }
  }
}
