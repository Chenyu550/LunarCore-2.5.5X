// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueAeonInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueAeonInfo}
   */
  public static final class ChessRogueAeonInfo extends ProtoMessage<ChessRogueAeonInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int32 KNIDGHHDIKJ = 10;</code>
     */
    private int kNIDGHHDIKJ;

    /**
     * <code>optional uint32 aeon_id = 1;</code>
     */
    private int aeonId;

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     */
    private final ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo chessAeonInfo = ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo.newInstance();

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     */
    private final ICNMLEMMHKLOuterClass.ICNMLEMMHKL fPGMAJOGPGG = ICNMLEMMHKLOuterClass.ICNMLEMMHKL.newInstance();

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     */
    private final RepeatedInt aeonIdList = RepeatedInt.newEmptyInstance();

    private ChessRogueAeonInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueAeonInfo}
     */
    public static ChessRogueAeonInfo newInstance() {
      return new ChessRogueAeonInfo();
    }

    /**
     * <code>optional int32 KNIDGHHDIKJ = 10;</code>
     * @return whether the kNIDGHHDIKJ field is set
     */
    public boolean hasKNIDGHHDIKJ() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int32 KNIDGHHDIKJ = 10;</code>
     * @return this
     */
    public ChessRogueAeonInfo clearKNIDGHHDIKJ() {
      bitField0_ &= ~0x00000001;
      kNIDGHHDIKJ = 0;
      return this;
    }

    /**
     * <code>optional int32 KNIDGHHDIKJ = 10;</code>
     * @return the kNIDGHHDIKJ
     */
    public int getKNIDGHHDIKJ() {
      return kNIDGHHDIKJ;
    }

    /**
     * <code>optional int32 KNIDGHHDIKJ = 10;</code>
     * @param value the kNIDGHHDIKJ to set
     * @return this
     */
    public ChessRogueAeonInfo setKNIDGHHDIKJ(final int value) {
      bitField0_ |= 0x00000001;
      kNIDGHHDIKJ = value;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 1;</code>
     * @return whether the aeonId field is set
     */
    public boolean hasAeonId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 aeon_id = 1;</code>
     * @return this
     */
    public ChessRogueAeonInfo clearAeonId() {
      bitField0_ &= ~0x00000002;
      aeonId = 0;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 1;</code>
     * @return the aeonId
     */
    public int getAeonId() {
      return aeonId;
    }

    /**
     * <code>optional uint32 aeon_id = 1;</code>
     * @param value the aeonId to set
     * @return this
     */
    public ChessRogueAeonInfo setAeonId(final int value) {
      bitField0_ |= 0x00000002;
      aeonId = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     * @return whether the chessAeonInfo field is set
     */
    public boolean hasChessAeonInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     * @return this
     */
    public ChessRogueAeonInfo clearChessAeonInfo() {
      bitField0_ &= ~0x00000004;
      chessAeonInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChessAeonInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo getChessAeonInfo() {
      return chessAeonInfo;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo getMutableChessAeonInfo() {
      bitField0_ |= 0x00000004;
      return chessAeonInfo;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 2;</code>
     * @param value the chessAeonInfo to set
     * @return this
     */
    public ChessRogueAeonInfo setChessAeonInfo(
        final ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo value) {
      bitField0_ |= 0x00000004;
      chessAeonInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     * @return whether the fPGMAJOGPGG field is set
     */
    public boolean hasFPGMAJOGPGG() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     * @return this
     */
    public ChessRogueAeonInfo clearFPGMAJOGPGG() {
      bitField0_ &= ~0x00000008;
      fPGMAJOGPGG.clear();
      return this;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFPGMAJOGPGG()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ICNMLEMMHKLOuterClass.ICNMLEMMHKL getFPGMAJOGPGG() {
      return fPGMAJOGPGG;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ICNMLEMMHKLOuterClass.ICNMLEMMHKL getMutableFPGMAJOGPGG() {
      bitField0_ |= 0x00000008;
      return fPGMAJOGPGG;
    }

    /**
     * <code>optional .ICNMLEMMHKL FPGMAJOGPGG = 15;</code>
     * @param value the fPGMAJOGPGG to set
     * @return this
     */
    public ChessRogueAeonInfo setFPGMAJOGPGG(final ICNMLEMMHKLOuterClass.ICNMLEMMHKL value) {
      bitField0_ |= 0x00000008;
      fPGMAJOGPGG.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     * @return whether the aeonIdList field is set
     */
    public boolean hasAeonIdList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     * @return this
     */
    public ChessRogueAeonInfo clearAeonIdList() {
      bitField0_ &= ~0x00000010;
      aeonIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAeonIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAeonIdList() {
      return aeonIdList;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAeonIdList() {
      bitField0_ |= 0x00000010;
      return aeonIdList;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     * @param value the aeonIdList to add
     * @return this
     */
    public ChessRogueAeonInfo addAeonIdList(final int value) {
      bitField0_ |= 0x00000010;
      aeonIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 4;</code>
     * @param values the aeonIdList to add
     * @return this
     */
    public ChessRogueAeonInfo addAllAeonIdList(final int... values) {
      bitField0_ |= 0x00000010;
      aeonIdList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueAeonInfo copyFrom(final ChessRogueAeonInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kNIDGHHDIKJ = other.kNIDGHHDIKJ;
        aeonId = other.aeonId;
        chessAeonInfo.copyFrom(other.chessAeonInfo);
        fPGMAJOGPGG.copyFrom(other.fPGMAJOGPGG);
        aeonIdList.copyFrom(other.aeonIdList);
      }
      return this;
    }

    @Override
    public ChessRogueAeonInfo mergeFrom(final ChessRogueAeonInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKNIDGHHDIKJ()) {
        setKNIDGHHDIKJ(other.kNIDGHHDIKJ);
      }
      if (other.hasAeonId()) {
        setAeonId(other.aeonId);
      }
      if (other.hasChessAeonInfo()) {
        getMutableChessAeonInfo().mergeFrom(other.chessAeonInfo);
      }
      if (other.hasFPGMAJOGPGG()) {
        getMutableFPGMAJOGPGG().mergeFrom(other.fPGMAJOGPGG);
      }
      if (other.hasAeonIdList()) {
        getMutableAeonIdList().addAll(other.aeonIdList);
      }
      return this;
    }

    @Override
    public ChessRogueAeonInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kNIDGHHDIKJ = 0;
      aeonId = 0;
      chessAeonInfo.clear();
      fPGMAJOGPGG.clear();
      aeonIdList.clear();
      return this;
    }

    @Override
    public ChessRogueAeonInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      chessAeonInfo.clearQuick();
      fPGMAJOGPGG.clearQuick();
      aeonIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueAeonInfo)) {
        return false;
      }
      ChessRogueAeonInfo other = (ChessRogueAeonInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasKNIDGHHDIKJ() || kNIDGHHDIKJ == other.kNIDGHHDIKJ)
        && (!hasAeonId() || aeonId == other.aeonId)
        && (!hasChessAeonInfo() || chessAeonInfo.equals(other.chessAeonInfo))
        && (!hasFPGMAJOGPGG() || fPGMAJOGPGG.equals(other.fPGMAJOGPGG))
        && (!hasAeonIdList() || aeonIdList.equals(other.aeonIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeInt32NoTag(kNIDGHHDIKJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(chessAeonInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(fPGMAJOGPGG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < aeonIdList.length(); i++) {
          output.writeRawByte((byte) 32);
          output.writeUInt32NoTag(aeonIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(kNIDGHHDIKJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(chessAeonInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(fPGMAJOGPGG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * aeonIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aeonIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueAeonInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // kNIDGHHDIKJ
            kNIDGHHDIKJ = input.readInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // aeonId
            aeonId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // chessAeonInfo
            input.readMessage(chessAeonInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // fPGMAJOGPGG
            input.readMessage(fPGMAJOGPGG);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // aeonIdList [packed=true]
            input.readPackedUInt32(aeonIdList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 32: {
            // aeonIdList [packed=false]
            tag = input.readRepeatedUInt32(aeonIdList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt32(FieldNames.kNIDGHHDIKJ, kNIDGHHDIKJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.aeonId, aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.chessAeonInfo, chessAeonInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.fPGMAJOGPGG, fPGMAJOGPGG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.aeonIdList, aeonIdList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueAeonInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 394421549: {
            if (input.isAtField(FieldNames.kNIDGHHDIKJ)) {
              if (!input.trySkipNullValue()) {
                kNIDGHHDIKJ = input.readInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1421249154:
          case -1109029417: {
            if (input.isAtField(FieldNames.aeonId)) {
              if (!input.trySkipNullValue()) {
                aeonId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1969851249:
          case 1965672427: {
            if (input.isAtField(FieldNames.chessAeonInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(chessAeonInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1550313631: {
            if (input.isAtField(FieldNames.fPGMAJOGPGG)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(fPGMAJOGPGG);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1452976956:
          case 953805318: {
            if (input.isAtField(FieldNames.aeonIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aeonIdList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueAeonInfo clone() {
      return new ChessRogueAeonInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueAeonInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueAeonInfo(), data).checkInitialized();
    }

    public static ChessRogueAeonInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAeonInfo(), input).checkInitialized();
    }

    public static ChessRogueAeonInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAeonInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueAeonInfo messages
     */
    public static MessageFactory<ChessRogueAeonInfo> getFactory() {
      return ChessRogueAeonInfoFactory.INSTANCE;
    }

    private enum ChessRogueAeonInfoFactory implements MessageFactory<ChessRogueAeonInfo> {
      INSTANCE;

      @Override
      public ChessRogueAeonInfo create() {
        return ChessRogueAeonInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kNIDGHHDIKJ = FieldName.forField("KNIDGHHDIKJ");

      static final FieldName aeonId = FieldName.forField("aeonId", "aeon_id");

      static final FieldName chessAeonInfo = FieldName.forField("chessAeonInfo", "chess_aeon_info");

      static final FieldName fPGMAJOGPGG = FieldName.forField("FPGMAJOGPGG");

      static final FieldName aeonIdList = FieldName.forField("aeonIdList", "aeon_id_list");
    }
  }
}
