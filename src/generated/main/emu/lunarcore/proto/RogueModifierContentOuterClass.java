// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueModifierContentOuterClass {
  /**
   * Protobuf type {@code RogueModifierContent}
   */
  public static final class RogueModifierContent extends ProtoMessage<RogueModifierContent> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 content_modifier_effect_id = 5;</code>
     */
    private int contentModifierEffectId;

    /**
     * <code>optional uint32 BKIEKCHKBHH = 13;</code>
     */
    private int bKIEKCHKBHH;

    /**
     * <code>optional .RogueModifierContentType modifier_content_type = 12;</code>
     */
    private int modifierContentType;

    private RogueModifierContent() {
    }

    /**
     * @return a new empty instance of {@code RogueModifierContent}
     */
    public static RogueModifierContent newInstance() {
      return new RogueModifierContent();
    }

    /**
     * <code>optional uint32 content_modifier_effect_id = 5;</code>
     * @return whether the contentModifierEffectId field is set
     */
    public boolean hasContentModifierEffectId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 content_modifier_effect_id = 5;</code>
     * @return this
     */
    public RogueModifierContent clearContentModifierEffectId() {
      bitField0_ &= ~0x00000001;
      contentModifierEffectId = 0;
      return this;
    }

    /**
     * <code>optional uint32 content_modifier_effect_id = 5;</code>
     * @return the contentModifierEffectId
     */
    public int getContentModifierEffectId() {
      return contentModifierEffectId;
    }

    /**
     * <code>optional uint32 content_modifier_effect_id = 5;</code>
     * @param value the contentModifierEffectId to set
     * @return this
     */
    public RogueModifierContent setContentModifierEffectId(final int value) {
      bitField0_ |= 0x00000001;
      contentModifierEffectId = value;
      return this;
    }

    /**
     * <code>optional uint32 BKIEKCHKBHH = 13;</code>
     * @return whether the bKIEKCHKBHH field is set
     */
    public boolean hasBKIEKCHKBHH() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 BKIEKCHKBHH = 13;</code>
     * @return this
     */
    public RogueModifierContent clearBKIEKCHKBHH() {
      bitField0_ &= ~0x00000002;
      bKIEKCHKBHH = 0;
      return this;
    }

    /**
     * <code>optional uint32 BKIEKCHKBHH = 13;</code>
     * @return the bKIEKCHKBHH
     */
    public int getBKIEKCHKBHH() {
      return bKIEKCHKBHH;
    }

    /**
     * <code>optional uint32 BKIEKCHKBHH = 13;</code>
     * @param value the bKIEKCHKBHH to set
     * @return this
     */
    public RogueModifierContent setBKIEKCHKBHH(final int value) {
      bitField0_ |= 0x00000002;
      bKIEKCHKBHH = value;
      return this;
    }

    /**
     * <code>optional .RogueModifierContentType modifier_content_type = 12;</code>
     * @return whether the modifierContentType field is set
     */
    public boolean hasModifierContentType() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .RogueModifierContentType modifier_content_type = 12;</code>
     * @return this
     */
    public RogueModifierContent clearModifierContentType() {
      bitField0_ &= ~0x00000004;
      modifierContentType = 0;
      return this;
    }

    /**
     * <code>optional .RogueModifierContentType modifier_content_type = 12;</code>
     * @return the modifierContentType
     */
    public RogueModifierContentTypeOuterClass.RogueModifierContentType getModifierContentType() {
      return RogueModifierContentTypeOuterClass.RogueModifierContentType.forNumber(modifierContentType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RogueModifierContent#getModifierContentType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getModifierContentTypeValue() {
      return modifierContentType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link RogueModifierContentTypeOuterClass.RogueModifierContentType}. Setting an invalid value
     * can cause {@link RogueModifierContent#getModifierContentType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RogueModifierContent setModifierContentTypeValue(final int value) {
      bitField0_ |= 0x00000004;
      modifierContentType = value;
      return this;
    }

    /**
     * <code>optional .RogueModifierContentType modifier_content_type = 12;</code>
     * @param value the modifierContentType to set
     * @return this
     */
    public RogueModifierContent setModifierContentType(
        final RogueModifierContentTypeOuterClass.RogueModifierContentType value) {
      bitField0_ |= 0x00000004;
      modifierContentType = value.getNumber();
      return this;
    }

    @Override
    public RogueModifierContent copyFrom(final RogueModifierContent other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        contentModifierEffectId = other.contentModifierEffectId;
        bKIEKCHKBHH = other.bKIEKCHKBHH;
        modifierContentType = other.modifierContentType;
      }
      return this;
    }

    @Override
    public RogueModifierContent mergeFrom(final RogueModifierContent other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasContentModifierEffectId()) {
        setContentModifierEffectId(other.contentModifierEffectId);
      }
      if (other.hasBKIEKCHKBHH()) {
        setBKIEKCHKBHH(other.bKIEKCHKBHH);
      }
      if (other.hasModifierContentType()) {
        setModifierContentTypeValue(other.modifierContentType);
      }
      return this;
    }

    @Override
    public RogueModifierContent clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      contentModifierEffectId = 0;
      bKIEKCHKBHH = 0;
      modifierContentType = 0;
      return this;
    }

    @Override
    public RogueModifierContent clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueModifierContent)) {
        return false;
      }
      RogueModifierContent other = (RogueModifierContent) o;
      return bitField0_ == other.bitField0_
        && (!hasContentModifierEffectId() || contentModifierEffectId == other.contentModifierEffectId)
        && (!hasBKIEKCHKBHH() || bKIEKCHKBHH == other.bKIEKCHKBHH)
        && (!hasModifierContentType() || modifierContentType == other.modifierContentType);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(contentModifierEffectId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(bKIEKCHKBHH);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeEnumNoTag(modifierContentType);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(contentModifierEffectId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bKIEKCHKBHH);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(modifierContentType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueModifierContent mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // contentModifierEffectId
            contentModifierEffectId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // bKIEKCHKBHH
            bKIEKCHKBHH = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // modifierContentType
            final int value = input.readInt32();
            if (RogueModifierContentTypeOuterClass.RogueModifierContentType.forNumber(value) != null) {
              modifierContentType = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.contentModifierEffectId, contentModifierEffectId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.bKIEKCHKBHH, bKIEKCHKBHH);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.modifierContentType, modifierContentType, RogueModifierContentTypeOuterClass.RogueModifierContentType.converter());
      }
      output.endObject();
    }

    @Override
    public RogueModifierContent mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1161975524:
          case -810842969: {
            if (input.isAtField(FieldNames.contentModifierEffectId)) {
              if (!input.trySkipNullValue()) {
                contentModifierEffectId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 831568834: {
            if (input.isAtField(FieldNames.bKIEKCHKBHH)) {
              if (!input.trySkipNullValue()) {
                bKIEKCHKBHH = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 409246716:
          case 666629032: {
            if (input.isAtField(FieldNames.modifierContentType)) {
              if (!input.trySkipNullValue()) {
                final RogueModifierContentTypeOuterClass.RogueModifierContentType value = input.readEnum(RogueModifierContentTypeOuterClass.RogueModifierContentType.converter());
                if (value != null) {
                  modifierContentType = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueModifierContent clone() {
      return new RogueModifierContent().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueModifierContent parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueModifierContent(), data).checkInitialized();
    }

    public static RogueModifierContent parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierContent(), input).checkInitialized();
    }

    public static RogueModifierContent parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierContent(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueModifierContent messages
     */
    public static MessageFactory<RogueModifierContent> getFactory() {
      return RogueModifierContentFactory.INSTANCE;
    }

    private enum RogueModifierContentFactory implements MessageFactory<RogueModifierContent> {
      INSTANCE;

      @Override
      public RogueModifierContent create() {
        return RogueModifierContent.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName contentModifierEffectId = FieldName.forField("contentModifierEffectId", "content_modifier_effect_id");

      static final FieldName bKIEKCHKBHH = FieldName.forField("BKIEKCHKBHH");

      static final FieldName modifierContentType = FieldName.forField("modifierContentType", "modifier_content_type");
    }
  }
}
