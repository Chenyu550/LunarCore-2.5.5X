// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class CellMonsterSelectInfoOuterClass {
  /**
   * Protobuf type {@code CellMonsterSelectInfo}
   */
  public static final class CellMonsterSelectInfo extends ProtoMessage<CellMonsterSelectInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     */
    private final RepeatedInt mazeBuffList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     */
    private final RepeatedInt selectDecayId = RepeatedInt.newEmptyInstance();

    private CellMonsterSelectInfo() {
    }

    /**
     * @return a new empty instance of {@code CellMonsterSelectInfo}
     */
    public static CellMonsterSelectInfo newInstance() {
      return new CellMonsterSelectInfo();
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     * @return whether the mazeBuffList field is set
     */
    public boolean hasMazeBuffList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     * @return this
     */
    public CellMonsterSelectInfo clearMazeBuffList() {
      bitField0_ &= ~0x00000001;
      mazeBuffList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMazeBuffList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMazeBuffList() {
      return mazeBuffList;
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMazeBuffList() {
      bitField0_ |= 0x00000001;
      return mazeBuffList;
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     * @param value the mazeBuffList to add
     * @return this
     */
    public CellMonsterSelectInfo addMazeBuffList(final int value) {
      bitField0_ |= 0x00000001;
      mazeBuffList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 maze_buff_list = 3;</code>
     * @param values the mazeBuffList to add
     * @return this
     */
    public CellMonsterSelectInfo addAllMazeBuffList(final int... values) {
      bitField0_ |= 0x00000001;
      mazeBuffList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     * @return whether the selectDecayId field is set
     */
    public boolean hasSelectDecayId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     * @return this
     */
    public CellMonsterSelectInfo clearSelectDecayId() {
      bitField0_ &= ~0x00000002;
      selectDecayId.clear();
      return this;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSelectDecayId()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getSelectDecayId() {
      return selectDecayId;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableSelectDecayId() {
      bitField0_ |= 0x00000002;
      return selectDecayId;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     * @param value the selectDecayId to add
     * @return this
     */
    public CellMonsterSelectInfo addSelectDecayId(final int value) {
      bitField0_ |= 0x00000002;
      selectDecayId.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 select_decay_id = 11;</code>
     * @param values the selectDecayId to add
     * @return this
     */
    public CellMonsterSelectInfo addAllSelectDecayId(final int... values) {
      bitField0_ |= 0x00000002;
      selectDecayId.addAll(values);
      return this;
    }

    @Override
    public CellMonsterSelectInfo copyFrom(final CellMonsterSelectInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mazeBuffList.copyFrom(other.mazeBuffList);
        selectDecayId.copyFrom(other.selectDecayId);
      }
      return this;
    }

    @Override
    public CellMonsterSelectInfo mergeFrom(final CellMonsterSelectInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMazeBuffList()) {
        getMutableMazeBuffList().addAll(other.mazeBuffList);
      }
      if (other.hasSelectDecayId()) {
        getMutableSelectDecayId().addAll(other.selectDecayId);
      }
      return this;
    }

    @Override
    public CellMonsterSelectInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mazeBuffList.clear();
      selectDecayId.clear();
      return this;
    }

    @Override
    public CellMonsterSelectInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mazeBuffList.clear();
      selectDecayId.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof CellMonsterSelectInfo)) {
        return false;
      }
      CellMonsterSelectInfo other = (CellMonsterSelectInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMazeBuffList() || mazeBuffList.equals(other.mazeBuffList))
        && (!hasSelectDecayId() || selectDecayId.equals(other.selectDecayId));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < mazeBuffList.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(mazeBuffList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < selectDecayId.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(selectDecayId.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * mazeBuffList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(mazeBuffList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * selectDecayId.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(selectDecayId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public CellMonsterSelectInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 26: {
            // mazeBuffList [packed=true]
            input.readPackedUInt32(mazeBuffList, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // selectDecayId [packed=true]
            input.readPackedUInt32(selectDecayId, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // mazeBuffList [packed=false]
            tag = input.readRepeatedUInt32(mazeBuffList, tag);
            bitField0_ |= 0x00000001;
            break;
          }
          case 88: {
            // selectDecayId [packed=false]
            tag = input.readRepeatedUInt32(selectDecayId, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedUInt32(FieldNames.mazeBuffList, mazeBuffList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.selectDecayId, selectDecayId);
      }
      output.endObject();
    }

    @Override
    public CellMonsterSelectInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1147228272:
          case -1634995062: {
            if (input.isAtField(FieldNames.mazeBuffList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(mazeBuffList);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2029475367:
          case -1898586205: {
            if (input.isAtField(FieldNames.selectDecayId)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(selectDecayId);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public CellMonsterSelectInfo clone() {
      return new CellMonsterSelectInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static CellMonsterSelectInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new CellMonsterSelectInfo(), data).checkInitialized();
    }

    public static CellMonsterSelectInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonsterSelectInfo(), input).checkInitialized();
    }

    public static CellMonsterSelectInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonsterSelectInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating CellMonsterSelectInfo messages
     */
    public static MessageFactory<CellMonsterSelectInfo> getFactory() {
      return CellMonsterSelectInfoFactory.INSTANCE;
    }

    private enum CellMonsterSelectInfoFactory implements MessageFactory<CellMonsterSelectInfo> {
      INSTANCE;

      @Override
      public CellMonsterSelectInfo create() {
        return CellMonsterSelectInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mazeBuffList = FieldName.forField("mazeBuffList", "maze_buff_list");

      static final FieldName selectDecayId = FieldName.forField("selectDecayId", "select_decay_id");
    }
  }
}
