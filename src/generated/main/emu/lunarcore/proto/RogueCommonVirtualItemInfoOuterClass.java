// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueCommonVirtualItemInfoOuterClass {
  /**
   * Protobuf type {@code RogueCommonVirtualItemInfo}
   */
  public static final class RogueCommonVirtualItemInfo extends ProtoMessage<RogueCommonVirtualItemInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional uint32 virtual_item_id = 3;</code>
     */
    private int virtualItemId;

    /**
     * <pre>
     *  3
     * </pre>
     *
     * <code>optional uint32 virtual_item_num = 11;</code>
     */
    private int virtualItemNum;

    private RogueCommonVirtualItemInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonVirtualItemInfo}
     */
    public static RogueCommonVirtualItemInfo newInstance() {
      return new RogueCommonVirtualItemInfo();
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional uint32 virtual_item_id = 3;</code>
     * @return whether the virtualItemId field is set
     */
    public boolean hasVirtualItemId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional uint32 virtual_item_id = 3;</code>
     * @return this
     */
    public RogueCommonVirtualItemInfo clearVirtualItemId() {
      bitField0_ &= ~0x00000001;
      virtualItemId = 0;
      return this;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional uint32 virtual_item_id = 3;</code>
     * @return the virtualItemId
     */
    public int getVirtualItemId() {
      return virtualItemId;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional uint32 virtual_item_id = 3;</code>
     * @param value the virtualItemId to set
     * @return this
     */
    public RogueCommonVirtualItemInfo setVirtualItemId(final int value) {
      bitField0_ |= 0x00000001;
      virtualItemId = value;
      return this;
    }

    /**
     * <pre>
     *  3
     * </pre>
     *
     * <code>optional uint32 virtual_item_num = 11;</code>
     * @return whether the virtualItemNum field is set
     */
    public boolean hasVirtualItemNum() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  3
     * </pre>
     *
     * <code>optional uint32 virtual_item_num = 11;</code>
     * @return this
     */
    public RogueCommonVirtualItemInfo clearVirtualItemNum() {
      bitField0_ &= ~0x00000002;
      virtualItemNum = 0;
      return this;
    }

    /**
     * <pre>
     *  3
     * </pre>
     *
     * <code>optional uint32 virtual_item_num = 11;</code>
     * @return the virtualItemNum
     */
    public int getVirtualItemNum() {
      return virtualItemNum;
    }

    /**
     * <pre>
     *  3
     * </pre>
     *
     * <code>optional uint32 virtual_item_num = 11;</code>
     * @param value the virtualItemNum to set
     * @return this
     */
    public RogueCommonVirtualItemInfo setVirtualItemNum(final int value) {
      bitField0_ |= 0x00000002;
      virtualItemNum = value;
      return this;
    }

    @Override
    public RogueCommonVirtualItemInfo copyFrom(final RogueCommonVirtualItemInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        virtualItemId = other.virtualItemId;
        virtualItemNum = other.virtualItemNum;
      }
      return this;
    }

    @Override
    public RogueCommonVirtualItemInfo mergeFrom(final RogueCommonVirtualItemInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasVirtualItemId()) {
        setVirtualItemId(other.virtualItemId);
      }
      if (other.hasVirtualItemNum()) {
        setVirtualItemNum(other.virtualItemNum);
      }
      return this;
    }

    @Override
    public RogueCommonVirtualItemInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      virtualItemId = 0;
      virtualItemNum = 0;
      return this;
    }

    @Override
    public RogueCommonVirtualItemInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonVirtualItemInfo)) {
        return false;
      }
      RogueCommonVirtualItemInfo other = (RogueCommonVirtualItemInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasVirtualItemId() || virtualItemId == other.virtualItemId)
        && (!hasVirtualItemNum() || virtualItemNum == other.virtualItemNum);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(virtualItemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(virtualItemNum);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(virtualItemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(virtualItemNum);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonVirtualItemInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // virtualItemId
            virtualItemId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // virtualItemNum
            virtualItemNum = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.virtualItemId, virtualItemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.virtualItemNum, virtualItemNum);
      }
      output.endObject();
    }

    @Override
    public RogueCommonVirtualItemInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 188637817:
          case -170048365: {
            if (input.isAtField(FieldNames.virtualItemId)) {
              if (!input.trySkipNullValue()) {
                virtualItemId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1552810472:
          case -976526578: {
            if (input.isAtField(FieldNames.virtualItemNum)) {
              if (!input.trySkipNullValue()) {
                virtualItemNum = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonVirtualItemInfo clone() {
      return new RogueCommonVirtualItemInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonVirtualItemInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonVirtualItemInfo(), data).checkInitialized();
    }

    public static RogueCommonVirtualItemInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonVirtualItemInfo(), input).checkInitialized();
    }

    public static RogueCommonVirtualItemInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonVirtualItemInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonVirtualItemInfo messages
     */
    public static MessageFactory<RogueCommonVirtualItemInfo> getFactory() {
      return RogueCommonVirtualItemInfoFactory.INSTANCE;
    }

    private enum RogueCommonVirtualItemInfoFactory implements MessageFactory<RogueCommonVirtualItemInfo> {
      INSTANCE;

      @Override
      public RogueCommonVirtualItemInfo create() {
        return RogueCommonVirtualItemInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName virtualItemId = FieldName.forField("virtualItemId", "virtual_item_id");

      static final FieldName virtualItemNum = FieldName.forField("virtualItemNum", "virtual_item_num");
    }
  }
}
