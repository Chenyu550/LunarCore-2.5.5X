// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class RogueReviveInfoOuterClass {
  /**
   * Protobuf type {@code RogueReviveInfo}
   */
  public static final class RogueReviveInfo extends ProtoMessage<RogueReviveInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 MODHOJOGOBC = 1;</code>
     */
    private int mODHOJOGOBC;

    /**
     * <code>optional uint32 LAKLNFMHMLO = 8;</code>
     */
    private int lAKLNFMHMLO;

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     */
    private final ItemCostListOuterClass.ItemCostList rogueReviveCost = ItemCostListOuterClass.ItemCostList.newInstance();

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     */
    private final RepeatedInt hIMNEOAEELB = RepeatedInt.newEmptyInstance();

    private RogueReviveInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueReviveInfo}
     */
    public static RogueReviveInfo newInstance() {
      return new RogueReviveInfo();
    }

    /**
     * <code>optional uint32 MODHOJOGOBC = 1;</code>
     * @return whether the mODHOJOGOBC field is set
     */
    public boolean hasMODHOJOGOBC() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 MODHOJOGOBC = 1;</code>
     * @return this
     */
    public RogueReviveInfo clearMODHOJOGOBC() {
      bitField0_ &= ~0x00000001;
      mODHOJOGOBC = 0;
      return this;
    }

    /**
     * <code>optional uint32 MODHOJOGOBC = 1;</code>
     * @return the mODHOJOGOBC
     */
    public int getMODHOJOGOBC() {
      return mODHOJOGOBC;
    }

    /**
     * <code>optional uint32 MODHOJOGOBC = 1;</code>
     * @param value the mODHOJOGOBC to set
     * @return this
     */
    public RogueReviveInfo setMODHOJOGOBC(final int value) {
      bitField0_ |= 0x00000001;
      mODHOJOGOBC = value;
      return this;
    }

    /**
     * <code>optional uint32 LAKLNFMHMLO = 8;</code>
     * @return whether the lAKLNFMHMLO field is set
     */
    public boolean hasLAKLNFMHMLO() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 LAKLNFMHMLO = 8;</code>
     * @return this
     */
    public RogueReviveInfo clearLAKLNFMHMLO() {
      bitField0_ &= ~0x00000002;
      lAKLNFMHMLO = 0;
      return this;
    }

    /**
     * <code>optional uint32 LAKLNFMHMLO = 8;</code>
     * @return the lAKLNFMHMLO
     */
    public int getLAKLNFMHMLO() {
      return lAKLNFMHMLO;
    }

    /**
     * <code>optional uint32 LAKLNFMHMLO = 8;</code>
     * @param value the lAKLNFMHMLO to set
     * @return this
     */
    public RogueReviveInfo setLAKLNFMHMLO(final int value) {
      bitField0_ |= 0x00000002;
      lAKLNFMHMLO = value;
      return this;
    }

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     * @return whether the rogueReviveCost field is set
     */
    public boolean hasRogueReviveCost() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     * @return this
     */
    public RogueReviveInfo clearRogueReviveCost() {
      bitField0_ &= ~0x00000004;
      rogueReviveCost.clear();
      return this;
    }

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueReviveCost()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemCostListOuterClass.ItemCostList getRogueReviveCost() {
      return rogueReviveCost;
    }

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemCostListOuterClass.ItemCostList getMutableRogueReviveCost() {
      bitField0_ |= 0x00000004;
      return rogueReviveCost;
    }

    /**
     * <code>optional .ItemCostList rogue_revive_cost = 14;</code>
     * @param value the rogueReviveCost to set
     * @return this
     */
    public RogueReviveInfo setRogueReviveCost(final ItemCostListOuterClass.ItemCostList value) {
      bitField0_ |= 0x00000004;
      rogueReviveCost.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     * @return whether the hIMNEOAEELB field is set
     */
    public boolean hasHIMNEOAEELB() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     * @return this
     */
    public RogueReviveInfo clearHIMNEOAEELB() {
      bitField0_ &= ~0x00000008;
      hIMNEOAEELB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHIMNEOAEELB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getHIMNEOAEELB() {
      return hIMNEOAEELB;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableHIMNEOAEELB() {
      bitField0_ |= 0x00000008;
      return hIMNEOAEELB;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     * @param value the hIMNEOAEELB to add
     * @return this
     */
    public RogueReviveInfo addHIMNEOAEELB(final int value) {
      bitField0_ |= 0x00000008;
      hIMNEOAEELB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 HIMNEOAEELB = 5;</code>
     * @param values the hIMNEOAEELB to add
     * @return this
     */
    public RogueReviveInfo addAllHIMNEOAEELB(final int... values) {
      bitField0_ |= 0x00000008;
      hIMNEOAEELB.addAll(values);
      return this;
    }

    @Override
    public RogueReviveInfo copyFrom(final RogueReviveInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mODHOJOGOBC = other.mODHOJOGOBC;
        lAKLNFMHMLO = other.lAKLNFMHMLO;
        rogueReviveCost.copyFrom(other.rogueReviveCost);
        hIMNEOAEELB.copyFrom(other.hIMNEOAEELB);
      }
      return this;
    }

    @Override
    public RogueReviveInfo mergeFrom(final RogueReviveInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMODHOJOGOBC()) {
        setMODHOJOGOBC(other.mODHOJOGOBC);
      }
      if (other.hasLAKLNFMHMLO()) {
        setLAKLNFMHMLO(other.lAKLNFMHMLO);
      }
      if (other.hasRogueReviveCost()) {
        getMutableRogueReviveCost().mergeFrom(other.rogueReviveCost);
      }
      if (other.hasHIMNEOAEELB()) {
        getMutableHIMNEOAEELB().addAll(other.hIMNEOAEELB);
      }
      return this;
    }

    @Override
    public RogueReviveInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mODHOJOGOBC = 0;
      lAKLNFMHMLO = 0;
      rogueReviveCost.clear();
      hIMNEOAEELB.clear();
      return this;
    }

    @Override
    public RogueReviveInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueReviveCost.clearQuick();
      hIMNEOAEELB.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueReviveInfo)) {
        return false;
      }
      RogueReviveInfo other = (RogueReviveInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMODHOJOGOBC() || mODHOJOGOBC == other.mODHOJOGOBC)
        && (!hasLAKLNFMHMLO() || lAKLNFMHMLO == other.lAKLNFMHMLO)
        && (!hasRogueReviveCost() || rogueReviveCost.equals(other.rogueReviveCost))
        && (!hasHIMNEOAEELB() || hIMNEOAEELB.equals(other.hIMNEOAEELB));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(mODHOJOGOBC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(lAKLNFMHMLO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(rogueReviveCost);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < hIMNEOAEELB.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(hIMNEOAEELB.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mODHOJOGOBC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lAKLNFMHMLO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueReviveCost);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * hIMNEOAEELB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(hIMNEOAEELB);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueReviveInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // mODHOJOGOBC
            mODHOJOGOBC = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // lAKLNFMHMLO
            lAKLNFMHMLO = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // rogueReviveCost
            input.readMessage(rogueReviveCost);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // hIMNEOAEELB [packed=true]
            input.readPackedUInt32(hIMNEOAEELB, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // hIMNEOAEELB [packed=false]
            tag = input.readRepeatedUInt32(hIMNEOAEELB, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.mODHOJOGOBC, mODHOJOGOBC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.lAKLNFMHMLO, lAKLNFMHMLO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rogueReviveCost, rogueReviveCost);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.hIMNEOAEELB, hIMNEOAEELB);
      }
      output.endObject();
    }

    @Override
    public RogueReviveInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1698470249: {
            if (input.isAtField(FieldNames.mODHOJOGOBC)) {
              if (!input.trySkipNullValue()) {
                mODHOJOGOBC = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 459858439: {
            if (input.isAtField(FieldNames.lAKLNFMHMLO)) {
              if (!input.trySkipNullValue()) {
                lAKLNFMHMLO = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1305263164:
          case -977215086: {
            if (input.isAtField(FieldNames.rogueReviveCost)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueReviveCost);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1794782517: {
            if (input.isAtField(FieldNames.hIMNEOAEELB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(hIMNEOAEELB);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueReviveInfo clone() {
      return new RogueReviveInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueReviveInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueReviveInfo(), data).checkInitialized();
    }

    public static RogueReviveInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueReviveInfo(), input).checkInitialized();
    }

    public static RogueReviveInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueReviveInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueReviveInfo messages
     */
    public static MessageFactory<RogueReviveInfo> getFactory() {
      return RogueReviveInfoFactory.INSTANCE;
    }

    private enum RogueReviveInfoFactory implements MessageFactory<RogueReviveInfo> {
      INSTANCE;

      @Override
      public RogueReviveInfo create() {
        return RogueReviveInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mODHOJOGOBC = FieldName.forField("MODHOJOGOBC");

      static final FieldName lAKLNFMHMLO = FieldName.forField("LAKLNFMHMLO");

      static final FieldName rogueReviveCost = FieldName.forField("rogueReviveCost", "rogue_revive_cost");

      static final FieldName hIMNEOAEELB = FieldName.forField("HIMNEOAEELB");
    }
  }
}
