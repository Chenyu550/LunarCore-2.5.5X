// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetChessRogueStoryAeonTalkInfoScRspOuterClass {
  /**
   * Protobuf type {@code GetChessRogueStoryAeonTalkInfoScRsp}
   */
  public static final class GetChessRogueStoryAeonTalkInfoScRsp extends ProtoMessage<GetChessRogueStoryAeonTalkInfoScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 2;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 event_id = 14;</code>
     */
    private int eventId;

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     */
    private final RepeatedMessage<FKDHDCGOIMFEntry> fKDHDCGOIMF = RepeatedMessage.newEmptyInstance(FKDHDCGOIMFEntry.getFactory());

    private GetChessRogueStoryAeonTalkInfoScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetChessRogueStoryAeonTalkInfoScRsp}
     */
    public static GetChessRogueStoryAeonTalkInfoScRsp newInstance() {
      return new GetChessRogueStoryAeonTalkInfoScRsp();
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 event_id = 14;</code>
     * @return whether the eventId field is set
     */
    public boolean hasEventId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 event_id = 14;</code>
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp clearEventId() {
      bitField0_ &= ~0x00000002;
      eventId = 0;
      return this;
    }

    /**
     * <code>optional uint32 event_id = 14;</code>
     * @return the eventId
     */
    public int getEventId() {
      return eventId;
    }

    /**
     * <code>optional uint32 event_id = 14;</code>
     * @param value the eventId to set
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp setEventId(final int value) {
      bitField0_ |= 0x00000002;
      eventId = value;
      return this;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     * @return whether the fKDHDCGOIMF field is set
     */
    public boolean hasFKDHDCGOIMF() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp clearFKDHDCGOIMF() {
      bitField0_ &= ~0x00000004;
      fKDHDCGOIMF.clear();
      return this;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFKDHDCGOIMF()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<FKDHDCGOIMFEntry> getFKDHDCGOIMF() {
      return fKDHDCGOIMF;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<FKDHDCGOIMFEntry> getMutableFKDHDCGOIMF() {
      bitField0_ |= 0x00000004;
      return fKDHDCGOIMF;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     * @param value the fKDHDCGOIMF to add
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp addFKDHDCGOIMF(final FKDHDCGOIMFEntry value) {
      bitField0_ |= 0x00000004;
      fKDHDCGOIMF.add(value);
      return this;
    }

    /**
     * <code>repeated .GetChessRogueStoryAeonTalkInfoScRsp.FKDHDCGOIMFEntry FKDHDCGOIMF = 4;</code>
     * @param values the fKDHDCGOIMF to add
     * @return this
     */
    public GetChessRogueStoryAeonTalkInfoScRsp addAllFKDHDCGOIMF(final FKDHDCGOIMFEntry... values) {
      bitField0_ |= 0x00000004;
      fKDHDCGOIMF.addAll(values);
      return this;
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp copyFrom(
        final GetChessRogueStoryAeonTalkInfoScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        eventId = other.eventId;
        fKDHDCGOIMF.copyFrom(other.fKDHDCGOIMF);
      }
      return this;
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp mergeFrom(
        final GetChessRogueStoryAeonTalkInfoScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasEventId()) {
        setEventId(other.eventId);
      }
      if (other.hasFKDHDCGOIMF()) {
        getMutableFKDHDCGOIMF().addAll(other.fKDHDCGOIMF);
      }
      return this;
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      eventId = 0;
      fKDHDCGOIMF.clear();
      return this;
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fKDHDCGOIMF.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetChessRogueStoryAeonTalkInfoScRsp)) {
        return false;
      }
      GetChessRogueStoryAeonTalkInfoScRsp other = (GetChessRogueStoryAeonTalkInfoScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasEventId() || eventId == other.eventId)
        && (!hasFKDHDCGOIMF() || fKDHDCGOIMF.equals(other.fKDHDCGOIMF));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(eventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < fKDHDCGOIMF.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(fKDHDCGOIMF.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(eventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * fKDHDCGOIMF.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(fKDHDCGOIMF);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetChessRogueStoryAeonTalkInfoScRsp mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // eventId
            eventId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // fKDHDCGOIMF
            tag = input.readRepeatedMessage(fKDHDCGOIMF, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.eventId, eventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.fKDHDCGOIMF, fKDHDCGOIMF);
      }
      output.endObject();
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1376502443:
          case 278118624: {
            if (input.isAtField(FieldNames.eventId)) {
              if (!input.trySkipNullValue()) {
                eventId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1696143474: {
            if (input.isAtField(FieldNames.fKDHDCGOIMF)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(fKDHDCGOIMF);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetChessRogueStoryAeonTalkInfoScRsp clone() {
      return new GetChessRogueStoryAeonTalkInfoScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetChessRogueStoryAeonTalkInfoScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetChessRogueStoryAeonTalkInfoScRsp(), data).checkInitialized();
    }

    public static GetChessRogueStoryAeonTalkInfoScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetChessRogueStoryAeonTalkInfoScRsp(), input).checkInitialized();
    }

    public static GetChessRogueStoryAeonTalkInfoScRsp parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetChessRogueStoryAeonTalkInfoScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetChessRogueStoryAeonTalkInfoScRsp messages
     */
    public static MessageFactory<GetChessRogueStoryAeonTalkInfoScRsp> getFactory() {
      return GetChessRogueStoryAeonTalkInfoScRspFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code FKDHDCGOIMFEntry}
     */
    public static final class FKDHDCGOIMFEntry extends ProtoMessage<FKDHDCGOIMFEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      private FKDHDCGOIMFEntry() {
      }

      /**
       * @return a new empty instance of {@code FKDHDCGOIMFEntry}
       */
      public static FKDHDCGOIMFEntry newInstance() {
        return new FKDHDCGOIMFEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public FKDHDCGOIMFEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public FKDHDCGOIMFEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public FKDHDCGOIMFEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public FKDHDCGOIMFEntry setValue(final int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public FKDHDCGOIMFEntry copyFrom(final FKDHDCGOIMFEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public FKDHDCGOIMFEntry mergeFrom(final FKDHDCGOIMFEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public FKDHDCGOIMFEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = 0;
        return this;
      }

      @Override
      public FKDHDCGOIMFEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof FKDHDCGOIMFEntry)) {
          return false;
        }
        FKDHDCGOIMFEntry other = (FKDHDCGOIMFEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public FKDHDCGOIMFEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public FKDHDCGOIMFEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public FKDHDCGOIMFEntry clone() {
        return new FKDHDCGOIMFEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static FKDHDCGOIMFEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new FKDHDCGOIMFEntry(), data).checkInitialized();
      }

      public static FKDHDCGOIMFEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new FKDHDCGOIMFEntry(), input).checkInitialized();
      }

      public static FKDHDCGOIMFEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new FKDHDCGOIMFEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating FKDHDCGOIMFEntry messages
       */
      public static MessageFactory<FKDHDCGOIMFEntry> getFactory() {
        return FKDHDCGOIMFEntryFactory.INSTANCE;
      }

      private enum FKDHDCGOIMFEntryFactory implements MessageFactory<FKDHDCGOIMFEntry> {
        INSTANCE;

        @Override
        public FKDHDCGOIMFEntry create() {
          return FKDHDCGOIMFEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum GetChessRogueStoryAeonTalkInfoScRspFactory implements MessageFactory<GetChessRogueStoryAeonTalkInfoScRsp> {
      INSTANCE;

      @Override
      public GetChessRogueStoryAeonTalkInfoScRsp create() {
        return GetChessRogueStoryAeonTalkInfoScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName eventId = FieldName.forField("eventId", "event_id");

      static final FieldName fKDHDCGOIMF = FieldName.forField("FKDHDCGOIMF");
    }
  }
}
