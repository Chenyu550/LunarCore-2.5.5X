// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class FormulaInfoOuterClass {
  /**
   * Protobuf type {@code FormulaInfo}
   */
  public static final class FormulaInfo extends ProtoMessage<FormulaInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 formula_id = 1;</code>
     */
    private int formulaId;

    /**
     * <code>optional bool is_expand = 15;</code>
     */
    private boolean isExpand;

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     */
    private final RepeatedMessage<FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo> formulaBuffTypeList = RepeatedMessage.newEmptyInstance(FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo.getFactory());

    private FormulaInfo() {
    }

    /**
     * @return a new empty instance of {@code FormulaInfo}
     */
    public static FormulaInfo newInstance() {
      return new FormulaInfo();
    }

    /**
     * <code>optional uint32 formula_id = 1;</code>
     * @return whether the formulaId field is set
     */
    public boolean hasFormulaId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 formula_id = 1;</code>
     * @return this
     */
    public FormulaInfo clearFormulaId() {
      bitField0_ &= ~0x00000001;
      formulaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 formula_id = 1;</code>
     * @return the formulaId
     */
    public int getFormulaId() {
      return formulaId;
    }

    /**
     * <code>optional uint32 formula_id = 1;</code>
     * @param value the formulaId to set
     * @return this
     */
    public FormulaInfo setFormulaId(final int value) {
      bitField0_ |= 0x00000001;
      formulaId = value;
      return this;
    }

    /**
     * <code>optional bool is_expand = 15;</code>
     * @return whether the isExpand field is set
     */
    public boolean hasIsExpand() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_expand = 15;</code>
     * @return this
     */
    public FormulaInfo clearIsExpand() {
      bitField0_ &= ~0x00000002;
      isExpand = false;
      return this;
    }

    /**
     * <code>optional bool is_expand = 15;</code>
     * @return the isExpand
     */
    public boolean getIsExpand() {
      return isExpand;
    }

    /**
     * <code>optional bool is_expand = 15;</code>
     * @param value the isExpand to set
     * @return this
     */
    public FormulaInfo setIsExpand(final boolean value) {
      bitField0_ |= 0x00000002;
      isExpand = value;
      return this;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     * @return whether the formulaBuffTypeList field is set
     */
    public boolean hasFormulaBuffTypeList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     * @return this
     */
    public FormulaInfo clearFormulaBuffTypeList() {
      bitField0_ &= ~0x00000004;
      formulaBuffTypeList.clear();
      return this;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFormulaBuffTypeList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo> getFormulaBuffTypeList(
        ) {
      return formulaBuffTypeList;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo> getMutableFormulaBuffTypeList(
        ) {
      bitField0_ |= 0x00000004;
      return formulaBuffTypeList;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     * @param value the formulaBuffTypeList to add
     * @return this
     */
    public FormulaInfo addFormulaBuffTypeList(
        final FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo value) {
      bitField0_ |= 0x00000004;
      formulaBuffTypeList.add(value);
      return this;
    }

    /**
     * <code>repeated .FormulaBuffTypeInfo formula_buff_type_list = 8;</code>
     * @param values the formulaBuffTypeList to add
     * @return this
     */
    public FormulaInfo addAllFormulaBuffTypeList(
        final FormulaBuffTypeInfoOuterClass.FormulaBuffTypeInfo... values) {
      bitField0_ |= 0x00000004;
      formulaBuffTypeList.addAll(values);
      return this;
    }

    @Override
    public FormulaInfo copyFrom(final FormulaInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        formulaId = other.formulaId;
        isExpand = other.isExpand;
        formulaBuffTypeList.copyFrom(other.formulaBuffTypeList);
      }
      return this;
    }

    @Override
    public FormulaInfo mergeFrom(final FormulaInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFormulaId()) {
        setFormulaId(other.formulaId);
      }
      if (other.hasIsExpand()) {
        setIsExpand(other.isExpand);
      }
      if (other.hasFormulaBuffTypeList()) {
        getMutableFormulaBuffTypeList().addAll(other.formulaBuffTypeList);
      }
      return this;
    }

    @Override
    public FormulaInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      formulaId = 0;
      isExpand = false;
      formulaBuffTypeList.clear();
      return this;
    }

    @Override
    public FormulaInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      formulaBuffTypeList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FormulaInfo)) {
        return false;
      }
      FormulaInfo other = (FormulaInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFormulaId() || formulaId == other.formulaId)
        && (!hasIsExpand() || isExpand == other.isExpand)
        && (!hasFormulaBuffTypeList() || formulaBuffTypeList.equals(other.formulaBuffTypeList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(formulaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeBoolNoTag(isExpand);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < formulaBuffTypeList.length(); i++) {
          output.writeRawByte((byte) 66);
          output.writeMessageNoTag(formulaBuffTypeList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(formulaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * formulaBuffTypeList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(formulaBuffTypeList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FormulaInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // formulaId
            formulaId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // isExpand
            isExpand = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // formulaBuffTypeList
            tag = input.readRepeatedMessage(formulaBuffTypeList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.formulaId, formulaId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isExpand, isExpand);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.formulaBuffTypeList, formulaBuffTypeList);
      }
      output.endObject();
    }

    @Override
    public FormulaInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1829804321:
          case 889380500: {
            if (input.isAtField(FieldNames.formulaId)) {
              if (!input.trySkipNullValue()) {
                formulaId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -615133084:
          case -825128113: {
            if (input.isAtField(FieldNames.isExpand)) {
              if (!input.trySkipNullValue()) {
                isExpand = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 717419761:
          case 421654928: {
            if (input.isAtField(FieldNames.formulaBuffTypeList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(formulaBuffTypeList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FormulaInfo clone() {
      return new FormulaInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FormulaInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FormulaInfo(), data).checkInitialized();
    }

    public static FormulaInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FormulaInfo(), input).checkInitialized();
    }

    public static FormulaInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FormulaInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating FormulaInfo messages
     */
    public static MessageFactory<FormulaInfo> getFactory() {
      return FormulaInfoFactory.INSTANCE;
    }

    private enum FormulaInfoFactory implements MessageFactory<FormulaInfo> {
      INSTANCE;

      @Override
      public FormulaInfo create() {
        return FormulaInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName formulaId = FieldName.forField("formulaId", "formula_id");

      static final FieldName isExpand = FieldName.forField("isExpand", "is_expand");

      static final FieldName formulaBuffTypeList = FieldName.forField("formulaBuffTypeList", "formula_buff_type_list");
    }
  }
}
