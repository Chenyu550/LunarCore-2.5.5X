// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueTournFormulaInfoOuterClass {
  /**
   * Protobuf type {@code RogueTournFormulaInfo}
   */
  public static final class RogueTournFormulaInfo extends ProtoMessage<RogueTournFormulaInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     */
    private final FormulaTypeValueOuterClass.FormulaTypeValue formulaTypeValue = FormulaTypeValueOuterClass.FormulaTypeValue.newInstance();

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     */
    private final RepeatedMessage<FormulaInfoOuterClass.FormulaInfo> gameFormulaInfo = RepeatedMessage.newEmptyInstance(FormulaInfoOuterClass.FormulaInfo.getFactory());

    private RogueTournFormulaInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueTournFormulaInfo}
     */
    public static RogueTournFormulaInfo newInstance() {
      return new RogueTournFormulaInfo();
    }

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     * @return whether the formulaTypeValue field is set
     */
    public boolean hasFormulaTypeValue() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     * @return this
     */
    public RogueTournFormulaInfo clearFormulaTypeValue() {
      bitField0_ &= ~0x00000001;
      formulaTypeValue.clear();
      return this;
    }

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFormulaTypeValue()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public FormulaTypeValueOuterClass.FormulaTypeValue getFormulaTypeValue() {
      return formulaTypeValue;
    }

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public FormulaTypeValueOuterClass.FormulaTypeValue getMutableFormulaTypeValue() {
      bitField0_ |= 0x00000001;
      return formulaTypeValue;
    }

    /**
     * <code>optional .FormulaTypeValue formula_type_value = 9;</code>
     * @param value the formulaTypeValue to set
     * @return this
     */
    public RogueTournFormulaInfo setFormulaTypeValue(
        final FormulaTypeValueOuterClass.FormulaTypeValue value) {
      bitField0_ |= 0x00000001;
      formulaTypeValue.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     * @return whether the gameFormulaInfo field is set
     */
    public boolean hasGameFormulaInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     * @return this
     */
    public RogueTournFormulaInfo clearGameFormulaInfo() {
      bitField0_ &= ~0x00000002;
      gameFormulaInfo.clear();
      return this;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGameFormulaInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<FormulaInfoOuterClass.FormulaInfo> getGameFormulaInfo() {
      return gameFormulaInfo;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<FormulaInfoOuterClass.FormulaInfo> getMutableGameFormulaInfo() {
      bitField0_ |= 0x00000002;
      return gameFormulaInfo;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     * @param value the gameFormulaInfo to add
     * @return this
     */
    public RogueTournFormulaInfo addGameFormulaInfo(final FormulaInfoOuterClass.FormulaInfo value) {
      bitField0_ |= 0x00000002;
      gameFormulaInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .FormulaInfo game_formula_info = 15;</code>
     * @param values the gameFormulaInfo to add
     * @return this
     */
    public RogueTournFormulaInfo addAllGameFormulaInfo(
        final FormulaInfoOuterClass.FormulaInfo... values) {
      bitField0_ |= 0x00000002;
      gameFormulaInfo.addAll(values);
      return this;
    }

    @Override
    public RogueTournFormulaInfo copyFrom(final RogueTournFormulaInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        formulaTypeValue.copyFrom(other.formulaTypeValue);
        gameFormulaInfo.copyFrom(other.gameFormulaInfo);
      }
      return this;
    }

    @Override
    public RogueTournFormulaInfo mergeFrom(final RogueTournFormulaInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFormulaTypeValue()) {
        getMutableFormulaTypeValue().mergeFrom(other.formulaTypeValue);
      }
      if (other.hasGameFormulaInfo()) {
        getMutableGameFormulaInfo().addAll(other.gameFormulaInfo);
      }
      return this;
    }

    @Override
    public RogueTournFormulaInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      formulaTypeValue.clear();
      gameFormulaInfo.clear();
      return this;
    }

    @Override
    public RogueTournFormulaInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      formulaTypeValue.clearQuick();
      gameFormulaInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueTournFormulaInfo)) {
        return false;
      }
      RogueTournFormulaInfo other = (RogueTournFormulaInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFormulaTypeValue() || formulaTypeValue.equals(other.formulaTypeValue))
        && (!hasGameFormulaInfo() || gameFormulaInfo.equals(other.gameFormulaInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(formulaTypeValue);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < gameFormulaInfo.length(); i++) {
          output.writeRawByte((byte) 122);
          output.writeMessageNoTag(gameFormulaInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(formulaTypeValue);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * gameFormulaInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(gameFormulaInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueTournFormulaInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 74: {
            // formulaTypeValue
            input.readMessage(formulaTypeValue);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // gameFormulaInfo
            tag = input.readRepeatedMessage(gameFormulaInfo, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.formulaTypeValue, formulaTypeValue);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.gameFormulaInfo, gameFormulaInfo);
      }
      output.endObject();
    }

    @Override
    public RogueTournFormulaInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1932429201:
          case -977536859: {
            if (input.isAtField(FieldNames.formulaTypeValue)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(formulaTypeValue);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 568973282:
          case -839953644: {
            if (input.isAtField(FieldNames.gameFormulaInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(gameFormulaInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueTournFormulaInfo clone() {
      return new RogueTournFormulaInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueTournFormulaInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaInfo(), data).checkInitialized();
    }

    public static RogueTournFormulaInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaInfo(), input).checkInitialized();
    }

    public static RogueTournFormulaInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueTournFormulaInfo messages
     */
    public static MessageFactory<RogueTournFormulaInfo> getFactory() {
      return RogueTournFormulaInfoFactory.INSTANCE;
    }

    private enum RogueTournFormulaInfoFactory implements MessageFactory<RogueTournFormulaInfo> {
      INSTANCE;

      @Override
      public RogueTournFormulaInfo create() {
        return RogueTournFormulaInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName formulaTypeValue = FieldName.forField("formulaTypeValue", "formula_type_value");

      static final FieldName gameFormulaInfo = FieldName.forField("gameFormulaInfo", "game_formula_info");
    }
  }
}
