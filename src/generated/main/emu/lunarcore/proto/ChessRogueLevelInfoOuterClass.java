// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueLevelInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueLevelInfo}
   */
  public static final class ChessRogueLevelInfo extends ProtoMessage<ChessRogueLevelInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int32 FMOMABLDNCF = 8;</code>
     */
    private int fMOMABLDNCF;

    /**
     * <code>optional int32 action_point = 13;</code>
     */
    private int actionPoint;

    /**
     * <code>optional uint32 id = 6;</code>
     */
    private int id;

    /**
     * <code>optional uint32 PLANCGLJEFE = 7;</code>
     */
    private int pLANCGLJEFE;

    /**
     * <code>optional uint32 layer_id = 14;</code>
     */
    private int layerId;

    /**
     * <code>optional uint32 level_status = 15;</code>
     */
    private int levelStatus;

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     */
    private final ChessRogueAreaInfoOuterClass.ChessRogueAreaInfo areaInfo = ChessRogueAreaInfoOuterClass.ChessRogueAreaInfo.newInstance();

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     */
    private final RepeatedInt areaIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     */
    private final RepeatedInt exploredAreaIdList = RepeatedInt.newEmptyInstance();

    private ChessRogueLevelInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueLevelInfo}
     */
    public static ChessRogueLevelInfo newInstance() {
      return new ChessRogueLevelInfo();
    }

    /**
     * <code>optional int32 FMOMABLDNCF = 8;</code>
     * @return whether the fMOMABLDNCF field is set
     */
    public boolean hasFMOMABLDNCF() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int32 FMOMABLDNCF = 8;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearFMOMABLDNCF() {
      bitField0_ &= ~0x00000001;
      fMOMABLDNCF = 0;
      return this;
    }

    /**
     * <code>optional int32 FMOMABLDNCF = 8;</code>
     * @return the fMOMABLDNCF
     */
    public int getFMOMABLDNCF() {
      return fMOMABLDNCF;
    }

    /**
     * <code>optional int32 FMOMABLDNCF = 8;</code>
     * @param value the fMOMABLDNCF to set
     * @return this
     */
    public ChessRogueLevelInfo setFMOMABLDNCF(final int value) {
      bitField0_ |= 0x00000001;
      fMOMABLDNCF = value;
      return this;
    }

    /**
     * <code>optional int32 action_point = 13;</code>
     * @return whether the actionPoint field is set
     */
    public boolean hasActionPoint() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional int32 action_point = 13;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearActionPoint() {
      bitField0_ &= ~0x00000002;
      actionPoint = 0;
      return this;
    }

    /**
     * <code>optional int32 action_point = 13;</code>
     * @return the actionPoint
     */
    public int getActionPoint() {
      return actionPoint;
    }

    /**
     * <code>optional int32 action_point = 13;</code>
     * @param value the actionPoint to set
     * @return this
     */
    public ChessRogueLevelInfo setActionPoint(final int value) {
      bitField0_ |= 0x00000002;
      actionPoint = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 6;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 id = 6;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearId() {
      bitField0_ &= ~0x00000004;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 6;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 6;</code>
     * @param value the id to set
     * @return this
     */
    public ChessRogueLevelInfo setId(final int value) {
      bitField0_ |= 0x00000004;
      id = value;
      return this;
    }

    /**
     * <code>optional uint32 PLANCGLJEFE = 7;</code>
     * @return whether the pLANCGLJEFE field is set
     */
    public boolean hasPLANCGLJEFE() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 PLANCGLJEFE = 7;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearPLANCGLJEFE() {
      bitField0_ &= ~0x00000008;
      pLANCGLJEFE = 0;
      return this;
    }

    /**
     * <code>optional uint32 PLANCGLJEFE = 7;</code>
     * @return the pLANCGLJEFE
     */
    public int getPLANCGLJEFE() {
      return pLANCGLJEFE;
    }

    /**
     * <code>optional uint32 PLANCGLJEFE = 7;</code>
     * @param value the pLANCGLJEFE to set
     * @return this
     */
    public ChessRogueLevelInfo setPLANCGLJEFE(final int value) {
      bitField0_ |= 0x00000008;
      pLANCGLJEFE = value;
      return this;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return whether the layerId field is set
     */
    public boolean hasLayerId() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearLayerId() {
      bitField0_ &= ~0x00000010;
      layerId = 0;
      return this;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return the layerId
     */
    public int getLayerId() {
      return layerId;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @param value the layerId to set
     * @return this
     */
    public ChessRogueLevelInfo setLayerId(final int value) {
      bitField0_ |= 0x00000010;
      layerId = value;
      return this;
    }

    /**
     * <code>optional uint32 level_status = 15;</code>
     * @return whether the levelStatus field is set
     */
    public boolean hasLevelStatus() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 level_status = 15;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearLevelStatus() {
      bitField0_ &= ~0x00000020;
      levelStatus = 0;
      return this;
    }

    /**
     * <code>optional uint32 level_status = 15;</code>
     * @return the levelStatus
     */
    public int getLevelStatus() {
      return levelStatus;
    }

    /**
     * <code>optional uint32 level_status = 15;</code>
     * @param value the levelStatus to set
     * @return this
     */
    public ChessRogueLevelInfo setLevelStatus(final int value) {
      bitField0_ |= 0x00000020;
      levelStatus = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     * @return whether the areaInfo field is set
     */
    public boolean hasAreaInfo() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearAreaInfo() {
      bitField0_ &= ~0x00000040;
      areaInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAreaInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueAreaInfoOuterClass.ChessRogueAreaInfo getAreaInfo() {
      return areaInfo;
    }

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueAreaInfoOuterClass.ChessRogueAreaInfo getMutableAreaInfo() {
      bitField0_ |= 0x00000040;
      return areaInfo;
    }

    /**
     * <code>optional .ChessRogueAreaInfo area_info = 1;</code>
     * @param value the areaInfo to set
     * @return this
     */
    public ChessRogueLevelInfo setAreaInfo(
        final ChessRogueAreaInfoOuterClass.ChessRogueAreaInfo value) {
      bitField0_ |= 0x00000040;
      areaInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     * @return whether the areaIdList field is set
     */
    public boolean hasAreaIdList() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearAreaIdList() {
      bitField0_ &= ~0x00000080;
      areaIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAreaIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAreaIdList() {
      return areaIdList;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAreaIdList() {
      bitField0_ |= 0x00000080;
      return areaIdList;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     * @param value the areaIdList to add
     * @return this
     */
    public ChessRogueLevelInfo addAreaIdList(final int value) {
      bitField0_ |= 0x00000080;
      areaIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 5;</code>
     * @param values the areaIdList to add
     * @return this
     */
    public ChessRogueLevelInfo addAllAreaIdList(final int... values) {
      bitField0_ |= 0x00000080;
      areaIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     * @return whether the exploredAreaIdList field is set
     */
    public boolean hasExploredAreaIdList() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     * @return this
     */
    public ChessRogueLevelInfo clearExploredAreaIdList() {
      bitField0_ &= ~0x00000100;
      exploredAreaIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableExploredAreaIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getExploredAreaIdList() {
      return exploredAreaIdList;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableExploredAreaIdList() {
      bitField0_ |= 0x00000100;
      return exploredAreaIdList;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     * @param value the exploredAreaIdList to add
     * @return this
     */
    public ChessRogueLevelInfo addExploredAreaIdList(final int value) {
      bitField0_ |= 0x00000100;
      exploredAreaIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 9;</code>
     * @param values the exploredAreaIdList to add
     * @return this
     */
    public ChessRogueLevelInfo addAllExploredAreaIdList(final int... values) {
      bitField0_ |= 0x00000100;
      exploredAreaIdList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueLevelInfo copyFrom(final ChessRogueLevelInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fMOMABLDNCF = other.fMOMABLDNCF;
        actionPoint = other.actionPoint;
        id = other.id;
        pLANCGLJEFE = other.pLANCGLJEFE;
        layerId = other.layerId;
        levelStatus = other.levelStatus;
        areaInfo.copyFrom(other.areaInfo);
        areaIdList.copyFrom(other.areaIdList);
        exploredAreaIdList.copyFrom(other.exploredAreaIdList);
      }
      return this;
    }

    @Override
    public ChessRogueLevelInfo mergeFrom(final ChessRogueLevelInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFMOMABLDNCF()) {
        setFMOMABLDNCF(other.fMOMABLDNCF);
      }
      if (other.hasActionPoint()) {
        setActionPoint(other.actionPoint);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasPLANCGLJEFE()) {
        setPLANCGLJEFE(other.pLANCGLJEFE);
      }
      if (other.hasLayerId()) {
        setLayerId(other.layerId);
      }
      if (other.hasLevelStatus()) {
        setLevelStatus(other.levelStatus);
      }
      if (other.hasAreaInfo()) {
        getMutableAreaInfo().mergeFrom(other.areaInfo);
      }
      if (other.hasAreaIdList()) {
        getMutableAreaIdList().addAll(other.areaIdList);
      }
      if (other.hasExploredAreaIdList()) {
        getMutableExploredAreaIdList().addAll(other.exploredAreaIdList);
      }
      return this;
    }

    @Override
    public ChessRogueLevelInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fMOMABLDNCF = 0;
      actionPoint = 0;
      id = 0;
      pLANCGLJEFE = 0;
      layerId = 0;
      levelStatus = 0;
      areaInfo.clear();
      areaIdList.clear();
      exploredAreaIdList.clear();
      return this;
    }

    @Override
    public ChessRogueLevelInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      areaInfo.clearQuick();
      areaIdList.clear();
      exploredAreaIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueLevelInfo)) {
        return false;
      }
      ChessRogueLevelInfo other = (ChessRogueLevelInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFMOMABLDNCF() || fMOMABLDNCF == other.fMOMABLDNCF)
        && (!hasActionPoint() || actionPoint == other.actionPoint)
        && (!hasId() || id == other.id)
        && (!hasPLANCGLJEFE() || pLANCGLJEFE == other.pLANCGLJEFE)
        && (!hasLayerId() || layerId == other.layerId)
        && (!hasLevelStatus() || levelStatus == other.levelStatus)
        && (!hasAreaInfo() || areaInfo.equals(other.areaInfo))
        && (!hasAreaIdList() || areaIdList.equals(other.areaIdList))
        && (!hasExploredAreaIdList() || exploredAreaIdList.equals(other.exploredAreaIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeInt32NoTag(fMOMABLDNCF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeInt32NoTag(actionPoint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(pLANCGLJEFE);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(layerId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(levelStatus);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(areaInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < areaIdList.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(areaIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000100) != 0) {
        for (int i = 0; i < exploredAreaIdList.length(); i++) {
          output.writeRawByte((byte) 72);
          output.writeUInt32NoTag(exploredAreaIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(fMOMABLDNCF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(actionPoint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pLANCGLJEFE);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(layerId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(levelStatus);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(areaInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * areaIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(areaIdList);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += (1 * exploredAreaIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(exploredAreaIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueLevelInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // fMOMABLDNCF
            fMOMABLDNCF = input.readInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // actionPoint
            actionPoint = input.readInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // pLANCGLJEFE
            pLANCGLJEFE = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // layerId
            layerId = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // levelStatus
            levelStatus = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // areaInfo
            input.readMessage(areaInfo);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // areaIdList [packed=true]
            input.readPackedUInt32(areaIdList, tag);
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // exploredAreaIdList [packed=true]
            input.readPackedUInt32(exploredAreaIdList, tag);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // areaIdList [packed=false]
            tag = input.readRepeatedUInt32(areaIdList, tag);
            bitField0_ |= 0x00000080;
            break;
          }
          case 72: {
            // exploredAreaIdList [packed=false]
            tag = input.readRepeatedUInt32(exploredAreaIdList, tag);
            bitField0_ |= 0x00000100;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt32(FieldNames.fMOMABLDNCF, fMOMABLDNCF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeInt32(FieldNames.actionPoint, actionPoint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.pLANCGLJEFE, pLANCGLJEFE);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.layerId, layerId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.levelStatus, levelStatus);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeMessage(FieldNames.areaInfo, areaInfo);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedUInt32(FieldNames.areaIdList, areaIdList);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRepeatedUInt32(FieldNames.exploredAreaIdList, exploredAreaIdList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueLevelInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 333225139: {
            if (input.isAtField(FieldNames.fMOMABLDNCF)) {
              if (!input.trySkipNullValue()) {
                fMOMABLDNCF = input.readInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1569741050:
          case 1847866951: {
            if (input.isAtField(FieldNames.actionPoint)) {
              if (!input.trySkipNullValue()) {
                actionPoint = input.readInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1359180711: {
            if (input.isAtField(FieldNames.pLANCGLJEFE)) {
              if (!input.trySkipNullValue()) {
                pLANCGLJEFE = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -41955764:
          case -1300607287: {
            if (input.isAtField(FieldNames.layerId)) {
              if (!input.trySkipNullValue()) {
                layerId = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1781179542:
          case 1430451469: {
            if (input.isAtField(FieldNames.levelStatus)) {
              if (!input.trySkipNullValue()) {
                levelStatus = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1666475301:
          case -100950752: {
            if (input.isAtField(FieldNames.areaInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(areaInfo);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 530025286:
          case -1239486576: {
            if (input.isAtField(FieldNames.areaIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(areaIdList);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -471271849:
          case -942040866: {
            if (input.isAtField(FieldNames.exploredAreaIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(exploredAreaIdList);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueLevelInfo clone() {
      return new ChessRogueLevelInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueLevelInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueLevelInfo(), data).checkInitialized();
    }

    public static ChessRogueLevelInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueLevelInfo(), input).checkInitialized();
    }

    public static ChessRogueLevelInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueLevelInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueLevelInfo messages
     */
    public static MessageFactory<ChessRogueLevelInfo> getFactory() {
      return ChessRogueLevelInfoFactory.INSTANCE;
    }

    private enum ChessRogueLevelInfoFactory implements MessageFactory<ChessRogueLevelInfo> {
      INSTANCE;

      @Override
      public ChessRogueLevelInfo create() {
        return ChessRogueLevelInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fMOMABLDNCF = FieldName.forField("FMOMABLDNCF");

      static final FieldName actionPoint = FieldName.forField("actionPoint", "action_point");

      static final FieldName id = FieldName.forField("id");

      static final FieldName pLANCGLJEFE = FieldName.forField("PLANCGLJEFE");

      static final FieldName layerId = FieldName.forField("layerId", "layer_id");

      static final FieldName levelStatus = FieldName.forField("levelStatus", "level_status");

      static final FieldName areaInfo = FieldName.forField("areaInfo", "area_info");

      static final FieldName areaIdList = FieldName.forField("areaIdList", "area_id_list");

      static final FieldName exploredAreaIdList = FieldName.forField("exploredAreaIdList", "explored_area_id_list");
    }
  }
}
