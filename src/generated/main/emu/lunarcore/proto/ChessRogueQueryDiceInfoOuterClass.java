// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueQueryDiceInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueQueryDiceInfo}
   */
  public static final class ChessRogueQueryDiceInfo extends ProtoMessage<ChessRogueQueryDiceInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .ChessRogueNousDicePhase dice_phase = 7;</code>
     */
    private int dicePhase;

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     */
    private final RepeatedInt surfaceIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     */
    private final RepeatedMessage<MLKDHOECNFLEntry> mLKDHOECNFL = RepeatedMessage.newEmptyInstance(MLKDHOECNFLEntry.getFactory());

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     */
    private final RepeatedMessage<ChessRogueDiceOuterClass.ChessRogueDice> diceList = RepeatedMessage.newEmptyInstance(ChessRogueDiceOuterClass.ChessRogueDice.getFactory());

    private ChessRogueQueryDiceInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueQueryDiceInfo}
     */
    public static ChessRogueQueryDiceInfo newInstance() {
      return new ChessRogueQueryDiceInfo();
    }

    /**
     * <code>optional .ChessRogueNousDicePhase dice_phase = 7;</code>
     * @return whether the dicePhase field is set
     */
    public boolean hasDicePhase() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChessRogueNousDicePhase dice_phase = 7;</code>
     * @return this
     */
    public ChessRogueQueryDiceInfo clearDicePhase() {
      bitField0_ &= ~0x00000001;
      dicePhase = 0;
      return this;
    }

    /**
     * <code>optional .ChessRogueNousDicePhase dice_phase = 7;</code>
     * @return the dicePhase
     */
    public ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase getDicePhase() {
      return ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase.forNumber(dicePhase);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link ChessRogueQueryDiceInfo#getDicePhase()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getDicePhaseValue() {
      return dicePhase;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase}. Setting an invalid value
     * can cause {@link ChessRogueQueryDiceInfo#getDicePhase()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public ChessRogueQueryDiceInfo setDicePhaseValue(final int value) {
      bitField0_ |= 0x00000001;
      dicePhase = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueNousDicePhase dice_phase = 7;</code>
     * @param value the dicePhase to set
     * @return this
     */
    public ChessRogueQueryDiceInfo setDicePhase(
        final ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase value) {
      bitField0_ |= 0x00000001;
      dicePhase = value.getNumber();
      return this;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     * @return whether the surfaceIdList field is set
     */
    public boolean hasSurfaceIdList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     * @return this
     */
    public ChessRogueQueryDiceInfo clearSurfaceIdList() {
      bitField0_ &= ~0x00000002;
      surfaceIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSurfaceIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getSurfaceIdList() {
      return surfaceIdList;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableSurfaceIdList() {
      bitField0_ |= 0x00000002;
      return surfaceIdList;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     * @param value the surfaceIdList to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addSurfaceIdList(final int value) {
      bitField0_ |= 0x00000002;
      surfaceIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 surface_id_list = 5;</code>
     * @param values the surfaceIdList to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addAllSurfaceIdList(final int... values) {
      bitField0_ |= 0x00000002;
      surfaceIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     * @return whether the mLKDHOECNFL field is set
     */
    public boolean hasMLKDHOECNFL() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     * @return this
     */
    public ChessRogueQueryDiceInfo clearMLKDHOECNFL() {
      bitField0_ &= ~0x00000004;
      mLKDHOECNFL.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMLKDHOECNFL()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MLKDHOECNFLEntry> getMLKDHOECNFL() {
      return mLKDHOECNFL;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MLKDHOECNFLEntry> getMutableMLKDHOECNFL() {
      bitField0_ |= 0x00000004;
      return mLKDHOECNFL;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     * @param value the mLKDHOECNFL to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addMLKDHOECNFL(final MLKDHOECNFLEntry value) {
      bitField0_ |= 0x00000004;
      mLKDHOECNFL.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueQueryDiceInfo.MLKDHOECNFLEntry MLKDHOECNFL = 9;</code>
     * @param values the mLKDHOECNFL to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addAllMLKDHOECNFL(final MLKDHOECNFLEntry... values) {
      bitField0_ |= 0x00000004;
      mLKDHOECNFL.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     * @return whether the diceList field is set
     */
    public boolean hasDiceList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     * @return this
     */
    public ChessRogueQueryDiceInfo clearDiceList() {
      bitField0_ &= ~0x00000008;
      diceList.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDiceList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChessRogueDiceOuterClass.ChessRogueDice> getDiceList() {
      return diceList;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChessRogueDiceOuterClass.ChessRogueDice> getMutableDiceList() {
      bitField0_ |= 0x00000008;
      return diceList;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     * @param value the diceList to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addDiceList(
        final ChessRogueDiceOuterClass.ChessRogueDice value) {
      bitField0_ |= 0x00000008;
      diceList.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueDice dice_list = 15;</code>
     * @param values the diceList to add
     * @return this
     */
    public ChessRogueQueryDiceInfo addAllDiceList(
        final ChessRogueDiceOuterClass.ChessRogueDice... values) {
      bitField0_ |= 0x00000008;
      diceList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueQueryDiceInfo copyFrom(final ChessRogueQueryDiceInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        dicePhase = other.dicePhase;
        surfaceIdList.copyFrom(other.surfaceIdList);
        mLKDHOECNFL.copyFrom(other.mLKDHOECNFL);
        diceList.copyFrom(other.diceList);
      }
      return this;
    }

    @Override
    public ChessRogueQueryDiceInfo mergeFrom(final ChessRogueQueryDiceInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDicePhase()) {
        setDicePhaseValue(other.dicePhase);
      }
      if (other.hasSurfaceIdList()) {
        getMutableSurfaceIdList().addAll(other.surfaceIdList);
      }
      if (other.hasMLKDHOECNFL()) {
        getMutableMLKDHOECNFL().addAll(other.mLKDHOECNFL);
      }
      if (other.hasDiceList()) {
        getMutableDiceList().addAll(other.diceList);
      }
      return this;
    }

    @Override
    public ChessRogueQueryDiceInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dicePhase = 0;
      surfaceIdList.clear();
      mLKDHOECNFL.clear();
      diceList.clear();
      return this;
    }

    @Override
    public ChessRogueQueryDiceInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      surfaceIdList.clear();
      mLKDHOECNFL.clearQuick();
      diceList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueQueryDiceInfo)) {
        return false;
      }
      ChessRogueQueryDiceInfo other = (ChessRogueQueryDiceInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasDicePhase() || dicePhase == other.dicePhase)
        && (!hasSurfaceIdList() || surfaceIdList.equals(other.surfaceIdList))
        && (!hasMLKDHOECNFL() || mLKDHOECNFL.equals(other.mLKDHOECNFL))
        && (!hasDiceList() || diceList.equals(other.diceList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeEnumNoTag(dicePhase);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < surfaceIdList.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(surfaceIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < mLKDHOECNFL.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(mLKDHOECNFL.get(i));
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < diceList.length(); i++) {
          output.writeRawByte((byte) 122);
          output.writeMessageNoTag(diceList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(dicePhase);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * surfaceIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(surfaceIdList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * mLKDHOECNFL.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mLKDHOECNFL);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * diceList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(diceList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueQueryDiceInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // dicePhase
            final int value = input.readInt32();
            if (ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase.forNumber(value) != null) {
              dicePhase = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // surfaceIdList [packed=true]
            input.readPackedUInt32(surfaceIdList, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // mLKDHOECNFL
            tag = input.readRepeatedMessage(mLKDHOECNFL, tag);
            bitField0_ |= 0x00000004;
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // diceList
            tag = input.readRepeatedMessage(diceList, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // surfaceIdList [packed=false]
            tag = input.readRepeatedUInt32(surfaceIdList, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.dicePhase, dicePhase, ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.surfaceIdList, surfaceIdList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.mLKDHOECNFL, mLKDHOECNFL);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.diceList, diceList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueQueryDiceInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1408156140:
          case -266150173: {
            if (input.isAtField(FieldNames.dicePhase)) {
              if (!input.trySkipNullValue()) {
                final ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase value = input.readEnum(ChessRogueNousDicePhaseOuterClass.ChessRogueNousDicePhase.converter());
                if (value != null) {
                  dicePhase = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 120983398:
          case 808250288: {
            if (input.isAtField(FieldNames.surfaceIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(surfaceIdList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1041283753: {
            if (input.isAtField(FieldNames.mLKDHOECNFL)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mLKDHOECNFL);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -184089371:
          case -1394176458: {
            if (input.isAtField(FieldNames.diceList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(diceList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueQueryDiceInfo clone() {
      return new ChessRogueQueryDiceInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueQueryDiceInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryDiceInfo(), data).checkInitialized();
    }

    public static ChessRogueQueryDiceInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryDiceInfo(), input).checkInitialized();
    }

    public static ChessRogueQueryDiceInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryDiceInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueQueryDiceInfo messages
     */
    public static MessageFactory<ChessRogueQueryDiceInfo> getFactory() {
      return ChessRogueQueryDiceInfoFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code MLKDHOECNFLEntry}
     */
    public static final class MLKDHOECNFLEntry extends ProtoMessage<MLKDHOECNFLEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional bool value = 2;</code>
       */
      private boolean value_;

      private MLKDHOECNFLEntry() {
      }

      /**
       * @return a new empty instance of {@code MLKDHOECNFLEntry}
       */
      public static MLKDHOECNFLEntry newInstance() {
        return new MLKDHOECNFLEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public MLKDHOECNFLEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public MLKDHOECNFLEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return this
       */
      public MLKDHOECNFLEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = false;
        return this;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @return the value_
       */
      public boolean getValue() {
        return value_;
      }

      /**
       * <code>optional bool value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public MLKDHOECNFLEntry setValue(final boolean value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public MLKDHOECNFLEntry copyFrom(final MLKDHOECNFLEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public MLKDHOECNFLEntry mergeFrom(final MLKDHOECNFLEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public MLKDHOECNFLEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = false;
        return this;
      }

      @Override
      public MLKDHOECNFLEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof MLKDHOECNFLEntry)) {
          return false;
        }
        MLKDHOECNFLEntry other = (MLKDHOECNFLEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeBoolNoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 2;
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public MLKDHOECNFLEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readBool();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeBool(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public MLKDHOECNFLEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readBool();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public MLKDHOECNFLEntry clone() {
        return new MLKDHOECNFLEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static MLKDHOECNFLEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new MLKDHOECNFLEntry(), data).checkInitialized();
      }

      public static MLKDHOECNFLEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new MLKDHOECNFLEntry(), input).checkInitialized();
      }

      public static MLKDHOECNFLEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new MLKDHOECNFLEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating MLKDHOECNFLEntry messages
       */
      public static MessageFactory<MLKDHOECNFLEntry> getFactory() {
        return MLKDHOECNFLEntryFactory.INSTANCE;
      }

      private enum MLKDHOECNFLEntryFactory implements MessageFactory<MLKDHOECNFLEntry> {
        INSTANCE;

        @Override
        public MLKDHOECNFLEntry create() {
          return MLKDHOECNFLEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum ChessRogueQueryDiceInfoFactory implements MessageFactory<ChessRogueQueryDiceInfo> {
      INSTANCE;

      @Override
      public ChessRogueQueryDiceInfo create() {
        return ChessRogueQueryDiceInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName dicePhase = FieldName.forField("dicePhase", "dice_phase");

      static final FieldName surfaceIdList = FieldName.forField("surfaceIdList", "surface_id_list");

      static final FieldName mLKDHOECNFL = FieldName.forField("MLKDHOECNFL");

      static final FieldName diceList = FieldName.forField("diceList", "dice_list");
    }
  }
}
