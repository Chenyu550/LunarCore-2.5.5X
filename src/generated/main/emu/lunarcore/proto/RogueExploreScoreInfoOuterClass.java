// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueExploreScoreInfoOuterClass {
  /**
   * Protobuf type {@code RogueExploreScoreInfo}
   */
  public static final class RogueExploreScoreInfo extends ProtoMessage<RogueExploreScoreInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float KCILNHFLPFB = 2;</code>
     */
    private float kCILNHFLPFB;

    /**
     * <code>optional uint32 BABGDLHDFHE = 5;</code>
     */
    private int bABGDLHDFHE;

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     */
    private final RepeatedMessage<RogueExploreScoreOuterClass.RogueExploreScore> scoreList = RepeatedMessage.newEmptyInstance(RogueExploreScoreOuterClass.RogueExploreScore.getFactory());

    private RogueExploreScoreInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueExploreScoreInfo}
     */
    public static RogueExploreScoreInfo newInstance() {
      return new RogueExploreScoreInfo();
    }

    /**
     * <code>optional float KCILNHFLPFB = 2;</code>
     * @return whether the kCILNHFLPFB field is set
     */
    public boolean hasKCILNHFLPFB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float KCILNHFLPFB = 2;</code>
     * @return this
     */
    public RogueExploreScoreInfo clearKCILNHFLPFB() {
      bitField0_ &= ~0x00000001;
      kCILNHFLPFB = 0F;
      return this;
    }

    /**
     * <code>optional float KCILNHFLPFB = 2;</code>
     * @return the kCILNHFLPFB
     */
    public float getKCILNHFLPFB() {
      return kCILNHFLPFB;
    }

    /**
     * <code>optional float KCILNHFLPFB = 2;</code>
     * @param value the kCILNHFLPFB to set
     * @return this
     */
    public RogueExploreScoreInfo setKCILNHFLPFB(final float value) {
      bitField0_ |= 0x00000001;
      kCILNHFLPFB = value;
      return this;
    }

    /**
     * <code>optional uint32 BABGDLHDFHE = 5;</code>
     * @return whether the bABGDLHDFHE field is set
     */
    public boolean hasBABGDLHDFHE() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 BABGDLHDFHE = 5;</code>
     * @return this
     */
    public RogueExploreScoreInfo clearBABGDLHDFHE() {
      bitField0_ &= ~0x00000002;
      bABGDLHDFHE = 0;
      return this;
    }

    /**
     * <code>optional uint32 BABGDLHDFHE = 5;</code>
     * @return the bABGDLHDFHE
     */
    public int getBABGDLHDFHE() {
      return bABGDLHDFHE;
    }

    /**
     * <code>optional uint32 BABGDLHDFHE = 5;</code>
     * @param value the bABGDLHDFHE to set
     * @return this
     */
    public RogueExploreScoreInfo setBABGDLHDFHE(final int value) {
      bitField0_ |= 0x00000002;
      bABGDLHDFHE = value;
      return this;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     * @return whether the scoreList field is set
     */
    public boolean hasScoreList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     * @return this
     */
    public RogueExploreScoreInfo clearScoreList() {
      bitField0_ &= ~0x00000004;
      scoreList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableScoreList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueExploreScoreOuterClass.RogueExploreScore> getScoreList() {
      return scoreList;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueExploreScoreOuterClass.RogueExploreScore> getMutableScoreList() {
      bitField0_ |= 0x00000004;
      return scoreList;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     * @param value the scoreList to add
     * @return this
     */
    public RogueExploreScoreInfo addScoreList(
        final RogueExploreScoreOuterClass.RogueExploreScore value) {
      bitField0_ |= 0x00000004;
      scoreList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueExploreScore score_list = 13;</code>
     * @param values the scoreList to add
     * @return this
     */
    public RogueExploreScoreInfo addAllScoreList(
        final RogueExploreScoreOuterClass.RogueExploreScore... values) {
      bitField0_ |= 0x00000004;
      scoreList.addAll(values);
      return this;
    }

    @Override
    public RogueExploreScoreInfo copyFrom(final RogueExploreScoreInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kCILNHFLPFB = other.kCILNHFLPFB;
        bABGDLHDFHE = other.bABGDLHDFHE;
        scoreList.copyFrom(other.scoreList);
      }
      return this;
    }

    @Override
    public RogueExploreScoreInfo mergeFrom(final RogueExploreScoreInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKCILNHFLPFB()) {
        setKCILNHFLPFB(other.kCILNHFLPFB);
      }
      if (other.hasBABGDLHDFHE()) {
        setBABGDLHDFHE(other.bABGDLHDFHE);
      }
      if (other.hasScoreList()) {
        getMutableScoreList().addAll(other.scoreList);
      }
      return this;
    }

    @Override
    public RogueExploreScoreInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kCILNHFLPFB = 0F;
      bABGDLHDFHE = 0;
      scoreList.clear();
      return this;
    }

    @Override
    public RogueExploreScoreInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scoreList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueExploreScoreInfo)) {
        return false;
      }
      RogueExploreScoreInfo other = (RogueExploreScoreInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasKCILNHFLPFB() || ProtoUtil.isEqual(kCILNHFLPFB, other.kCILNHFLPFB))
        && (!hasBABGDLHDFHE() || bABGDLHDFHE == other.bABGDLHDFHE)
        && (!hasScoreList() || scoreList.equals(other.scoreList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 21);
        output.writeFloatNoTag(kCILNHFLPFB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(bABGDLHDFHE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < scoreList.length(); i++) {
          output.writeRawByte((byte) 106);
          output.writeMessageNoTag(scoreList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bABGDLHDFHE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * scoreList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(scoreList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueExploreScoreInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 21: {
            // kCILNHFLPFB
            kCILNHFLPFB = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // bABGDLHDFHE
            bABGDLHDFHE = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // scoreList
            tag = input.readRepeatedMessage(scoreList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.kCILNHFLPFB, kCILNHFLPFB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.bABGDLHDFHE, bABGDLHDFHE);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.scoreList, scoreList);
      }
      output.endObject();
    }

    @Override
    public RogueExploreScoreInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1234639921: {
            if (input.isAtField(FieldNames.kCILNHFLPFB)) {
              if (!input.trySkipNullValue()) {
                kCILNHFLPFB = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 94535803: {
            if (input.isAtField(FieldNames.bABGDLHDFHE)) {
              if (!input.trySkipNullValue()) {
                bABGDLHDFHE = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2128726608:
          case 1583642155: {
            if (input.isAtField(FieldNames.scoreList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(scoreList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueExploreScoreInfo clone() {
      return new RogueExploreScoreInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueExploreScoreInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueExploreScoreInfo(), data).checkInitialized();
    }

    public static RogueExploreScoreInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueExploreScoreInfo(), input).checkInitialized();
    }

    public static RogueExploreScoreInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueExploreScoreInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueExploreScoreInfo messages
     */
    public static MessageFactory<RogueExploreScoreInfo> getFactory() {
      return RogueExploreScoreInfoFactory.INSTANCE;
    }

    private enum RogueExploreScoreInfoFactory implements MessageFactory<RogueExploreScoreInfo> {
      INSTANCE;

      @Override
      public RogueExploreScoreInfo create() {
        return RogueExploreScoreInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kCILNHFLPFB = FieldName.forField("KCILNHFLPFB");

      static final FieldName bABGDLHDFHE = FieldName.forField("BABGDLHDFHE");

      static final FieldName scoreList = FieldName.forField("scoreList", "score_list");
    }
  }
}
