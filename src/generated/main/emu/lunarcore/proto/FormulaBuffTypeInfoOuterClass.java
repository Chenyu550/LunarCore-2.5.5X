// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class FormulaBuffTypeInfoOuterClass {
  /**
   * Protobuf type {@code FormulaBuffTypeInfo}
   */
  public static final class FormulaBuffTypeInfo extends ProtoMessage<FormulaBuffTypeInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int32 formula_buff_num = 2;</code>
     */
    private int formulaBuffNum;

    /**
     * <code>optional uint32 key = 9;</code>
     */
    private int key;

    private FormulaBuffTypeInfo() {
    }

    /**
     * @return a new empty instance of {@code FormulaBuffTypeInfo}
     */
    public static FormulaBuffTypeInfo newInstance() {
      return new FormulaBuffTypeInfo();
    }

    /**
     * <code>optional int32 formula_buff_num = 2;</code>
     * @return whether the formulaBuffNum field is set
     */
    public boolean hasFormulaBuffNum() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int32 formula_buff_num = 2;</code>
     * @return this
     */
    public FormulaBuffTypeInfo clearFormulaBuffNum() {
      bitField0_ &= ~0x00000001;
      formulaBuffNum = 0;
      return this;
    }

    /**
     * <code>optional int32 formula_buff_num = 2;</code>
     * @return the formulaBuffNum
     */
    public int getFormulaBuffNum() {
      return formulaBuffNum;
    }

    /**
     * <code>optional int32 formula_buff_num = 2;</code>
     * @param value the formulaBuffNum to set
     * @return this
     */
    public FormulaBuffTypeInfo setFormulaBuffNum(final int value) {
      bitField0_ |= 0x00000001;
      formulaBuffNum = value;
      return this;
    }

    /**
     * <code>optional uint32 key = 9;</code>
     * @return whether the key field is set
     */
    public boolean hasKey() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 key = 9;</code>
     * @return this
     */
    public FormulaBuffTypeInfo clearKey() {
      bitField0_ &= ~0x00000002;
      key = 0;
      return this;
    }

    /**
     * <code>optional uint32 key = 9;</code>
     * @return the key
     */
    public int getKey() {
      return key;
    }

    /**
     * <code>optional uint32 key = 9;</code>
     * @param value the key to set
     * @return this
     */
    public FormulaBuffTypeInfo setKey(final int value) {
      bitField0_ |= 0x00000002;
      key = value;
      return this;
    }

    @Override
    public FormulaBuffTypeInfo copyFrom(final FormulaBuffTypeInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        formulaBuffNum = other.formulaBuffNum;
        key = other.key;
      }
      return this;
    }

    @Override
    public FormulaBuffTypeInfo mergeFrom(final FormulaBuffTypeInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFormulaBuffNum()) {
        setFormulaBuffNum(other.formulaBuffNum);
      }
      if (other.hasKey()) {
        setKey(other.key);
      }
      return this;
    }

    @Override
    public FormulaBuffTypeInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      formulaBuffNum = 0;
      key = 0;
      return this;
    }

    @Override
    public FormulaBuffTypeInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FormulaBuffTypeInfo)) {
        return false;
      }
      FormulaBuffTypeInfo other = (FormulaBuffTypeInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFormulaBuffNum() || formulaBuffNum == other.formulaBuffNum)
        && (!hasKey() || key == other.key);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeInt32NoTag(formulaBuffNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(key);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(formulaBuffNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FormulaBuffTypeInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // formulaBuffNum
            formulaBuffNum = input.readInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // key
            key = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt32(FieldNames.formulaBuffNum, formulaBuffNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.key, key);
      }
      output.endObject();
    }

    @Override
    public FormulaBuffTypeInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 993699309:
          case -2013733805: {
            if (input.isAtField(FieldNames.formulaBuffNum)) {
              if (!input.trySkipNullValue()) {
                formulaBuffNum = input.readInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 106079: {
            if (input.isAtField(FieldNames.key)) {
              if (!input.trySkipNullValue()) {
                key = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FormulaBuffTypeInfo clone() {
      return new FormulaBuffTypeInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FormulaBuffTypeInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FormulaBuffTypeInfo(), data).checkInitialized();
    }

    public static FormulaBuffTypeInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FormulaBuffTypeInfo(), input).checkInitialized();
    }

    public static FormulaBuffTypeInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FormulaBuffTypeInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating FormulaBuffTypeInfo messages
     */
    public static MessageFactory<FormulaBuffTypeInfo> getFactory() {
      return FormulaBuffTypeInfoFactory.INSTANCE;
    }

    private enum FormulaBuffTypeInfoFactory implements MessageFactory<FormulaBuffTypeInfo> {
      INSTANCE;

      @Override
      public FormulaBuffTypeInfo create() {
        return FormulaBuffTypeInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName formulaBuffNum = FieldName.forField("formulaBuffNum", "formula_buff_num");

      static final FieldName key = FieldName.forField("key");
    }
  }
}
