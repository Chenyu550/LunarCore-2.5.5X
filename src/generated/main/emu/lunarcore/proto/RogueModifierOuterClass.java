// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueModifierOuterClass {
  /**
   * Protobuf type {@code RogueModifier}
   */
  public static final class RogueModifier extends ProtoMessage<RogueModifier> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint64 main_modifier_effect = 12;</code>
     */
    private long mainModifierEffect;

    /**
     * <code>optional .RogueModifierSourceType modifier_source_type = 11;</code>
     */
    private int modifierSourceType;

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     */
    private final RogueModifierContentOuterClass.RogueModifierContent modifierContent = RogueModifierContentOuterClass.RogueModifierContent.newInstance();

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     */
    private final ChessRogueModifierInfoOuterClass.ChessRogueModifierInfo modifierInfo = ChessRogueModifierInfoOuterClass.ChessRogueModifierInfo.newInstance();

    private RogueModifier() {
    }

    /**
     * @return a new empty instance of {@code RogueModifier}
     */
    public static RogueModifier newInstance() {
      return new RogueModifier();
    }

    public boolean hasLIMAECOEBPE() {
      return (((bitField0_ & 0x00000001)) != 0);
    }

    public RogueModifier clearLIMAECOEBPE() {
      if (hasLIMAECOEBPE()) {
        clearModifierInfo();
      }
      return this;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 12;</code>
     * @return whether the mainModifierEffect field is set
     */
    public boolean hasMainModifierEffect() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 12;</code>
     * @return this
     */
    public RogueModifier clearMainModifierEffect() {
      bitField0_ &= ~0x00000002;
      mainModifierEffect = 0L;
      return this;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 12;</code>
     * @return the mainModifierEffect
     */
    public long getMainModifierEffect() {
      return mainModifierEffect;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 12;</code>
     * @param value the mainModifierEffect to set
     * @return this
     */
    public RogueModifier setMainModifierEffect(final long value) {
      bitField0_ |= 0x00000002;
      mainModifierEffect = value;
      return this;
    }

    /**
     * <code>optional .RogueModifierSourceType modifier_source_type = 11;</code>
     * @return whether the modifierSourceType field is set
     */
    public boolean hasModifierSourceType() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .RogueModifierSourceType modifier_source_type = 11;</code>
     * @return this
     */
    public RogueModifier clearModifierSourceType() {
      bitField0_ &= ~0x00000004;
      modifierSourceType = 0;
      return this;
    }

    /**
     * <code>optional .RogueModifierSourceType modifier_source_type = 11;</code>
     * @return the modifierSourceType
     */
    public RogueModifierSourceTypeOuterClass.RogueModifierSourceType getModifierSourceType() {
      return RogueModifierSourceTypeOuterClass.RogueModifierSourceType.forNumber(modifierSourceType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RogueModifier#getModifierSourceType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getModifierSourceTypeValue() {
      return modifierSourceType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link RogueModifierSourceTypeOuterClass.RogueModifierSourceType}. Setting an invalid value
     * can cause {@link RogueModifier#getModifierSourceType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RogueModifier setModifierSourceTypeValue(final int value) {
      bitField0_ |= 0x00000004;
      modifierSourceType = value;
      return this;
    }

    /**
     * <code>optional .RogueModifierSourceType modifier_source_type = 11;</code>
     * @param value the modifierSourceType to set
     * @return this
     */
    public RogueModifier setModifierSourceType(
        final RogueModifierSourceTypeOuterClass.RogueModifierSourceType value) {
      bitField0_ |= 0x00000004;
      modifierSourceType = value.getNumber();
      return this;
    }

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     * @return whether the modifierContent field is set
     */
    public boolean hasModifierContent() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     * @return this
     */
    public RogueModifier clearModifierContent() {
      bitField0_ &= ~0x00000008;
      modifierContent.clear();
      return this;
    }

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableModifierContent()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueModifierContentOuterClass.RogueModifierContent getModifierContent() {
      return modifierContent;
    }

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueModifierContentOuterClass.RogueModifierContent getMutableModifierContent() {
      bitField0_ |= 0x00000008;
      return modifierContent;
    }

    /**
     * <code>optional .RogueModifierContent modifier_content = 4;</code>
     * @param value the modifierContent to set
     * @return this
     */
    public RogueModifier setModifierContent(
        final RogueModifierContentOuterClass.RogueModifierContent value) {
      bitField0_ |= 0x00000008;
      modifierContent.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     * @return whether the modifierInfo field is set
     */
    public boolean hasModifierInfo() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     * @return this
     */
    public RogueModifier clearModifierInfo() {
      bitField0_ &= ~0x00000001;
      modifierInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableModifierInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueModifierInfoOuterClass.ChessRogueModifierInfo getModifierInfo() {
      return modifierInfo;
    }

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueModifierInfoOuterClass.ChessRogueModifierInfo getMutableModifierInfo() {
      bitField0_ |= 0x00000001;
      return modifierInfo;
    }

    /**
     * <code>optional .ChessRogueModifierInfo modifier_info = 1044;</code>
     * @param value the modifierInfo to set
     * @return this
     */
    public RogueModifier setModifierInfo(
        final ChessRogueModifierInfoOuterClass.ChessRogueModifierInfo value) {
      bitField0_ |= 0x00000001;
      modifierInfo.copyFrom(value);
      return this;
    }

    @Override
    public RogueModifier copyFrom(final RogueModifier other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mainModifierEffect = other.mainModifierEffect;
        modifierSourceType = other.modifierSourceType;
        modifierContent.copyFrom(other.modifierContent);
        modifierInfo.copyFrom(other.modifierInfo);
      }
      return this;
    }

    @Override
    public RogueModifier mergeFrom(final RogueModifier other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMainModifierEffect()) {
        setMainModifierEffect(other.mainModifierEffect);
      }
      if (other.hasModifierSourceType()) {
        setModifierSourceTypeValue(other.modifierSourceType);
      }
      if (other.hasModifierContent()) {
        getMutableModifierContent().mergeFrom(other.modifierContent);
      }
      if (other.hasModifierInfo()) {
        getMutableModifierInfo().mergeFrom(other.modifierInfo);
      }
      return this;
    }

    @Override
    public RogueModifier clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mainModifierEffect = 0L;
      modifierSourceType = 0;
      modifierContent.clear();
      modifierInfo.clear();
      return this;
    }

    @Override
    public RogueModifier clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      modifierContent.clearQuick();
      modifierInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueModifier)) {
        return false;
      }
      RogueModifier other = (RogueModifier) o;
      return bitField0_ == other.bitField0_
        && (!hasMainModifierEffect() || mainModifierEffect == other.mainModifierEffect)
        && (!hasModifierSourceType() || modifierSourceType == other.modifierSourceType)
        && (!hasModifierContent() || modifierContent.equals(other.modifierContent))
        && (!hasModifierInfo() || modifierInfo.equals(other.modifierInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt64NoTag(mainModifierEffect);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeEnumNoTag(modifierSourceType);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(modifierContent);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawLittleEndian16((short) 16802);
        output.writeMessageNoTag(modifierInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt64SizeNoTag(mainModifierEffect);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(modifierSourceType);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(modifierContent);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(modifierInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueModifier mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 96: {
            // mainModifierEffect
            mainModifierEffect = input.readUInt64();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // modifierSourceType
            final int value = input.readInt32();
            if (RogueModifierSourceTypeOuterClass.RogueModifierSourceType.forNumber(value) != null) {
              modifierSourceType = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // modifierContent
            input.readMessage(modifierContent);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 8354) {
              break;
            }
          }
          case 8354: {
            // modifierInfo
            input.readMessage(modifierInfo);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt64(FieldNames.mainModifierEffect, mainModifierEffect);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.modifierSourceType, modifierSourceType, RogueModifierSourceTypeOuterClass.RogueModifierSourceType.converter());
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.modifierContent, modifierContent);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.modifierInfo, modifierInfo);
      }
      output.endObject();
    }

    @Override
    public RogueModifier mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -58014367:
          case -1440158349: {
            if (input.isAtField(FieldNames.mainModifierEffect)) {
              if (!input.trySkipNullValue()) {
                mainModifierEffect = input.readUInt64();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 22701100:
          case -1891070090: {
            if (input.isAtField(FieldNames.modifierSourceType)) {
              if (!input.trySkipNullValue()) {
                final RogueModifierSourceTypeOuterClass.RogueModifierSourceType value = input.readEnum(RogueModifierSourceTypeOuterClass.RogueModifierSourceType.converter());
                if (value != null) {
                  modifierSourceType = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1729509794:
          case 1592661777: {
            if (input.isAtField(FieldNames.modifierContent)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(modifierContent);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -612919259:
          case -1800451818: {
            if (input.isAtField(FieldNames.modifierInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(modifierInfo);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueModifier clone() {
      return new RogueModifier().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueModifier parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueModifier(), data).checkInitialized();
    }

    public static RogueModifier parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifier(), input).checkInitialized();
    }

    public static RogueModifier parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifier(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueModifier messages
     */
    public static MessageFactory<RogueModifier> getFactory() {
      return RogueModifierFactory.INSTANCE;
    }

    private enum RogueModifierFactory implements MessageFactory<RogueModifier> {
      INSTANCE;

      @Override
      public RogueModifier create() {
        return RogueModifier.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mainModifierEffect = FieldName.forField("mainModifierEffect", "main_modifier_effect");

      static final FieldName modifierSourceType = FieldName.forField("modifierSourceType", "modifier_source_type");

      static final FieldName modifierContent = FieldName.forField("modifierContent", "modifier_content");

      static final FieldName modifierInfo = FieldName.forField("modifierInfo", "modifier_info");
    }
  }
}
