// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class HDGLNDMEMEDOuterClass {
  /**
   * Protobuf type {@code HDGLNDMEMED}
   */
  public static final class HDGLNDMEMED extends ProtoMessage<HDGLNDMEMED> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     */
    private final CellMonsterInfoOuterClass.CellMonsterInfo bossInfo = CellMonsterInfoOuterClass.CellMonsterInfo.newInstance();

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     */
    private final CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo selectBossInfo = CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo.newInstance();

    private HDGLNDMEMED() {
    }

    /**
     * @return a new empty instance of {@code HDGLNDMEMED}
     */
    public static HDGLNDMEMED newInstance() {
      return new HDGLNDMEMED();
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     * @return whether the bossInfo field is set
     */
    public boolean hasBossInfo() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     * @return this
     */
    public HDGLNDMEMED clearBossInfo() {
      bitField0_ &= ~0x00000001;
      bossInfo.clear();
      return this;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBossInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellMonsterInfoOuterClass.CellMonsterInfo getBossInfo() {
      return bossInfo;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellMonsterInfoOuterClass.CellMonsterInfo getMutableBossInfo() {
      bitField0_ |= 0x00000001;
      return bossInfo;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 5;</code>
     * @param value the bossInfo to set
     * @return this
     */
    public HDGLNDMEMED setBossInfo(final CellMonsterInfoOuterClass.CellMonsterInfo value) {
      bitField0_ |= 0x00000001;
      bossInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     * @return whether the selectBossInfo field is set
     */
    public boolean hasSelectBossInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     * @return this
     */
    public HDGLNDMEMED clearSelectBossInfo() {
      bitField0_ &= ~0x00000002;
      selectBossInfo.clear();
      return this;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSelectBossInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo getSelectBossInfo() {
      return selectBossInfo;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo getMutableSelectBossInfo() {
      bitField0_ |= 0x00000002;
      return selectBossInfo;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 7;</code>
     * @param value the selectBossInfo to set
     * @return this
     */
    public HDGLNDMEMED setSelectBossInfo(
        final CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo value) {
      bitField0_ |= 0x00000002;
      selectBossInfo.copyFrom(value);
      return this;
    }

    @Override
    public HDGLNDMEMED copyFrom(final HDGLNDMEMED other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bossInfo.copyFrom(other.bossInfo);
        selectBossInfo.copyFrom(other.selectBossInfo);
      }
      return this;
    }

    @Override
    public HDGLNDMEMED mergeFrom(final HDGLNDMEMED other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBossInfo()) {
        getMutableBossInfo().mergeFrom(other.bossInfo);
      }
      if (other.hasSelectBossInfo()) {
        getMutableSelectBossInfo().mergeFrom(other.selectBossInfo);
      }
      return this;
    }

    @Override
    public HDGLNDMEMED clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bossInfo.clear();
      selectBossInfo.clear();
      return this;
    }

    @Override
    public HDGLNDMEMED clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bossInfo.clearQuick();
      selectBossInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HDGLNDMEMED)) {
        return false;
      }
      HDGLNDMEMED other = (HDGLNDMEMED) o;
      return bitField0_ == other.bitField0_
        && (!hasBossInfo() || bossInfo.equals(other.bossInfo))
        && (!hasSelectBossInfo() || selectBossInfo.equals(other.selectBossInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(bossInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(selectBossInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(bossInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(selectBossInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HDGLNDMEMED mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 42: {
            // bossInfo
            input.readMessage(bossInfo);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // selectBossInfo
            input.readMessage(selectBossInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.bossInfo, bossInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.selectBossInfo, selectBossInfo);
      }
      output.endObject();
    }

    @Override
    public HDGLNDMEMED mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2126222779:
          case 1508572736: {
            if (input.isAtField(FieldNames.bossInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(bossInfo);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1216449833:
          case -1646648643: {
            if (input.isAtField(FieldNames.selectBossInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(selectBossInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HDGLNDMEMED clone() {
      return new HDGLNDMEMED().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HDGLNDMEMED parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HDGLNDMEMED(), data).checkInitialized();
    }

    public static HDGLNDMEMED parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HDGLNDMEMED(), input).checkInitialized();
    }

    public static HDGLNDMEMED parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HDGLNDMEMED(), input).checkInitialized();
    }

    /**
     * @return factory for creating HDGLNDMEMED messages
     */
    public static MessageFactory<HDGLNDMEMED> getFactory() {
      return HDGLNDMEMEDFactory.INSTANCE;
    }

    private enum HDGLNDMEMEDFactory implements MessageFactory<HDGLNDMEMED> {
      INSTANCE;

      @Override
      public HDGLNDMEMED create() {
        return HDGLNDMEMED.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bossInfo = FieldName.forField("bossInfo", "boss_info");

      static final FieldName selectBossInfo = FieldName.forField("selectBossInfo", "select_boss_info");
    }
  }
}
