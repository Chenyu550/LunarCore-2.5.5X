// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueExploreScoreOuterClass {
  /**
   * Protobuf type {@code RogueExploreScore}
   */
  public static final class RogueExploreScore extends ProtoMessage<RogueExploreScore> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 score_id = 2;</code>
     */
    private int scoreId;

    /**
     * <code>optional uint32 OOFAJAGAAOL = 4;</code>
     */
    private int oOFAJAGAAOL;

    /**
     * <code>optional uint32 HMGLNINOCGH = 11;</code>
     */
    private int hMGLNINOCGH;

    private RogueExploreScore() {
    }

    /**
     * @return a new empty instance of {@code RogueExploreScore}
     */
    public static RogueExploreScore newInstance() {
      return new RogueExploreScore();
    }

    /**
     * <code>optional uint32 score_id = 2;</code>
     * @return whether the scoreId field is set
     */
    public boolean hasScoreId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 score_id = 2;</code>
     * @return this
     */
    public RogueExploreScore clearScoreId() {
      bitField0_ &= ~0x00000001;
      scoreId = 0;
      return this;
    }

    /**
     * <code>optional uint32 score_id = 2;</code>
     * @return the scoreId
     */
    public int getScoreId() {
      return scoreId;
    }

    /**
     * <code>optional uint32 score_id = 2;</code>
     * @param value the scoreId to set
     * @return this
     */
    public RogueExploreScore setScoreId(final int value) {
      bitField0_ |= 0x00000001;
      scoreId = value;
      return this;
    }

    /**
     * <code>optional uint32 OOFAJAGAAOL = 4;</code>
     * @return whether the oOFAJAGAAOL field is set
     */
    public boolean hasOOFAJAGAAOL() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OOFAJAGAAOL = 4;</code>
     * @return this
     */
    public RogueExploreScore clearOOFAJAGAAOL() {
      bitField0_ &= ~0x00000002;
      oOFAJAGAAOL = 0;
      return this;
    }

    /**
     * <code>optional uint32 OOFAJAGAAOL = 4;</code>
     * @return the oOFAJAGAAOL
     */
    public int getOOFAJAGAAOL() {
      return oOFAJAGAAOL;
    }

    /**
     * <code>optional uint32 OOFAJAGAAOL = 4;</code>
     * @param value the oOFAJAGAAOL to set
     * @return this
     */
    public RogueExploreScore setOOFAJAGAAOL(final int value) {
      bitField0_ |= 0x00000002;
      oOFAJAGAAOL = value;
      return this;
    }

    /**
     * <code>optional uint32 HMGLNINOCGH = 11;</code>
     * @return whether the hMGLNINOCGH field is set
     */
    public boolean hasHMGLNINOCGH() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 HMGLNINOCGH = 11;</code>
     * @return this
     */
    public RogueExploreScore clearHMGLNINOCGH() {
      bitField0_ &= ~0x00000004;
      hMGLNINOCGH = 0;
      return this;
    }

    /**
     * <code>optional uint32 HMGLNINOCGH = 11;</code>
     * @return the hMGLNINOCGH
     */
    public int getHMGLNINOCGH() {
      return hMGLNINOCGH;
    }

    /**
     * <code>optional uint32 HMGLNINOCGH = 11;</code>
     * @param value the hMGLNINOCGH to set
     * @return this
     */
    public RogueExploreScore setHMGLNINOCGH(final int value) {
      bitField0_ |= 0x00000004;
      hMGLNINOCGH = value;
      return this;
    }

    @Override
    public RogueExploreScore copyFrom(final RogueExploreScore other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        scoreId = other.scoreId;
        oOFAJAGAAOL = other.oOFAJAGAAOL;
        hMGLNINOCGH = other.hMGLNINOCGH;
      }
      return this;
    }

    @Override
    public RogueExploreScore mergeFrom(final RogueExploreScore other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasScoreId()) {
        setScoreId(other.scoreId);
      }
      if (other.hasOOFAJAGAAOL()) {
        setOOFAJAGAAOL(other.oOFAJAGAAOL);
      }
      if (other.hasHMGLNINOCGH()) {
        setHMGLNINOCGH(other.hMGLNINOCGH);
      }
      return this;
    }

    @Override
    public RogueExploreScore clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scoreId = 0;
      oOFAJAGAAOL = 0;
      hMGLNINOCGH = 0;
      return this;
    }

    @Override
    public RogueExploreScore clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueExploreScore)) {
        return false;
      }
      RogueExploreScore other = (RogueExploreScore) o;
      return bitField0_ == other.bitField0_
        && (!hasScoreId() || scoreId == other.scoreId)
        && (!hasOOFAJAGAAOL() || oOFAJAGAAOL == other.oOFAJAGAAOL)
        && (!hasHMGLNINOCGH() || hMGLNINOCGH == other.hMGLNINOCGH);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(scoreId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(oOFAJAGAAOL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(hMGLNINOCGH);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(scoreId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oOFAJAGAAOL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hMGLNINOCGH);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueExploreScore mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // scoreId
            scoreId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // oOFAJAGAAOL
            oOFAJAGAAOL = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // hMGLNINOCGH
            hMGLNINOCGH = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.scoreId, scoreId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oOFAJAGAAOL, oOFAJAGAAOL);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.hMGLNINOCGH, hMGLNINOCGH);
      }
      output.endObject();
    }

    @Override
    public RogueExploreScore mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1924000589:
          case -485502488: {
            if (input.isAtField(FieldNames.scoreId)) {
              if (!input.trySkipNullValue()) {
                scoreId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -39911182: {
            if (input.isAtField(FieldNames.oOFAJAGAAOL)) {
              if (!input.trySkipNullValue()) {
                oOFAJAGAAOL = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -278572482: {
            if (input.isAtField(FieldNames.hMGLNINOCGH)) {
              if (!input.trySkipNullValue()) {
                hMGLNINOCGH = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueExploreScore clone() {
      return new RogueExploreScore().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueExploreScore parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueExploreScore(), data).checkInitialized();
    }

    public static RogueExploreScore parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueExploreScore(), input).checkInitialized();
    }

    public static RogueExploreScore parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueExploreScore(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueExploreScore messages
     */
    public static MessageFactory<RogueExploreScore> getFactory() {
      return RogueExploreScoreFactory.INSTANCE;
    }

    private enum RogueExploreScoreFactory implements MessageFactory<RogueExploreScore> {
      INSTANCE;

      @Override
      public RogueExploreScore create() {
        return RogueExploreScore.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName scoreId = FieldName.forField("scoreId", "score_id");

      static final FieldName oOFAJAGAAOL = FieldName.forField("OOFAJAGAAOL");

      static final FieldName hMGLNINOCGH = FieldName.forField("HMGLNINOCGH");
    }
  }
}
