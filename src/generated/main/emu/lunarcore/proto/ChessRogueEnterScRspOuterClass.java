// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueEnterScRspOuterClass {
  /**
   * Protobuf type {@code ChessRogueEnterScRsp}
   */
  public static final class ChessRogueEnterScRsp extends ProtoMessage<ChessRogueEnterScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 4;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 id = 12;</code>
     */
    private int id;

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     */
    private final ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo info = ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo.newInstance();

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     */
    private final ChessRogueQueryGameInfoOuterClass.ChessRogueQueryGameInfo rogueCurrentInfo = ChessRogueQueryGameInfoOuterClass.ChessRogueQueryGameInfo.newInstance();

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     */
    private final ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo playerInfo = ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo.newInstance();

    private ChessRogueEnterScRsp() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueEnterScRsp}
     */
    public static ChessRogueEnterScRsp newInstance() {
      return new ChessRogueEnterScRsp();
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return this
     */
    public ChessRogueEnterScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @param value the retcode to set
     * @return this
     */
    public ChessRogueEnterScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 12;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 id = 12;</code>
     * @return this
     */
    public ChessRogueEnterScRsp clearId() {
      bitField0_ &= ~0x00000002;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 12;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 12;</code>
     * @param value the id to set
     * @return this
     */
    public ChessRogueEnterScRsp setId(final int value) {
      bitField0_ |= 0x00000002;
      id = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     * @return whether the info field is set
     */
    public boolean hasInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     * @return this
     */
    public ChessRogueEnterScRsp clearInfo() {
      bitField0_ &= ~0x00000004;
      info.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo getInfo() {
      return info;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo getMutableInfo() {
      bitField0_ |= 0x00000004;
      return info;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo info = 3;</code>
     * @param value the info to set
     * @return this
     */
    public ChessRogueEnterScRsp setInfo(
        final ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo value) {
      bitField0_ |= 0x00000004;
      info.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     * @return whether the rogueCurrentInfo field is set
     */
    public boolean hasRogueCurrentInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     * @return this
     */
    public ChessRogueEnterScRsp clearRogueCurrentInfo() {
      bitField0_ &= ~0x00000008;
      rogueCurrentInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueCurrentInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryGameInfoOuterClass.ChessRogueQueryGameInfo getRogueCurrentInfo() {
      return rogueCurrentInfo;
    }

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryGameInfoOuterClass.ChessRogueQueryGameInfo getMutableRogueCurrentInfo() {
      bitField0_ |= 0x00000008;
      return rogueCurrentInfo;
    }

    /**
     * <code>optional .ChessRogueQueryGameInfo rogue_current_info = 8;</code>
     * @param value the rogueCurrentInfo to set
     * @return this
     */
    public ChessRogueEnterScRsp setRogueCurrentInfo(
        final ChessRogueQueryGameInfoOuterClass.ChessRogueQueryGameInfo value) {
      bitField0_ |= 0x00000008;
      rogueCurrentInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     * @return whether the playerInfo field is set
     */
    public boolean hasPlayerInfo() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     * @return this
     */
    public ChessRogueEnterScRsp clearPlayerInfo() {
      bitField0_ &= ~0x00000010;
      playerInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutablePlayerInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo getPlayerInfo() {
      return playerInfo;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo getMutablePlayerInfo() {
      bitField0_ |= 0x00000010;
      return playerInfo;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 15;</code>
     * @param value the playerInfo to set
     * @return this
     */
    public ChessRogueEnterScRsp setPlayerInfo(
        final ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo value) {
      bitField0_ |= 0x00000010;
      playerInfo.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueEnterScRsp copyFrom(final ChessRogueEnterScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        id = other.id;
        info.copyFrom(other.info);
        rogueCurrentInfo.copyFrom(other.rogueCurrentInfo);
        playerInfo.copyFrom(other.playerInfo);
      }
      return this;
    }

    @Override
    public ChessRogueEnterScRsp mergeFrom(final ChessRogueEnterScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasInfo()) {
        getMutableInfo().mergeFrom(other.info);
      }
      if (other.hasRogueCurrentInfo()) {
        getMutableRogueCurrentInfo().mergeFrom(other.rogueCurrentInfo);
      }
      if (other.hasPlayerInfo()) {
        getMutablePlayerInfo().mergeFrom(other.playerInfo);
      }
      return this;
    }

    @Override
    public ChessRogueEnterScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      id = 0;
      info.clear();
      rogueCurrentInfo.clear();
      playerInfo.clear();
      return this;
    }

    @Override
    public ChessRogueEnterScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      info.clearQuick();
      rogueCurrentInfo.clearQuick();
      playerInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueEnterScRsp)) {
        return false;
      }
      ChessRogueEnterScRsp other = (ChessRogueEnterScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasId() || id == other.id)
        && (!hasInfo() || info.equals(other.info))
        && (!hasRogueCurrentInfo() || rogueCurrentInfo.equals(other.rogueCurrentInfo))
        && (!hasPlayerInfo() || playerInfo.equals(other.playerInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 26);
        output.writeMessageNoTag(info);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(rogueCurrentInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(playerInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(info);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueCurrentInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(playerInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueEnterScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // info
            input.readMessage(info);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // rogueCurrentInfo
            input.readMessage(rogueCurrentInfo);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // playerInfo
            input.readMessage(playerInfo);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.info, info);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.rogueCurrentInfo, rogueCurrentInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.playerInfo, playerInfo);
      }
      output.endObject();
    }

    @Override
    public ChessRogueEnterScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3237038: {
            if (input.isAtField(FieldNames.info)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(info);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -611905651:
          case 1279173113: {
            if (input.isAtField(FieldNames.rogueCurrentInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueCurrentInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2095520559:
          case 556803916: {
            if (input.isAtField(FieldNames.playerInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(playerInfo);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueEnterScRsp clone() {
      return new ChessRogueEnterScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueEnterScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterScRsp(), data).checkInitialized();
    }

    public static ChessRogueEnterScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterScRsp(), input).checkInitialized();
    }

    public static ChessRogueEnterScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueEnterScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueEnterScRsp messages
     */
    public static MessageFactory<ChessRogueEnterScRsp> getFactory() {
      return ChessRogueEnterScRspFactory.INSTANCE;
    }

    private enum ChessRogueEnterScRspFactory implements MessageFactory<ChessRogueEnterScRsp> {
      INSTANCE;

      @Override
      public ChessRogueEnterScRsp create() {
        return ChessRogueEnterScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName id = FieldName.forField("id");

      static final FieldName info = FieldName.forField("info");

      static final FieldName rogueCurrentInfo = FieldName.forField("rogueCurrentInfo", "rogue_current_info");

      static final FieldName playerInfo = FieldName.forField("playerInfo", "player_info");
    }
  }
}
