// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueCommonKeywordOuterClass {
  /**
   * Protobuf type {@code RogueCommonKeyword}
   */
  public static final class RogueCommonKeyword extends ProtoMessage<RogueCommonKeyword> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 keyword_id = 3;</code>
     */
    private int keywordId;

    private RogueCommonKeyword() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonKeyword}
     */
    public static RogueCommonKeyword newInstance() {
      return new RogueCommonKeyword();
    }

    /**
     * <code>optional uint32 keyword_id = 3;</code>
     * @return whether the keywordId field is set
     */
    public boolean hasKeywordId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 keyword_id = 3;</code>
     * @return this
     */
    public RogueCommonKeyword clearKeywordId() {
      bitField0_ &= ~0x00000001;
      keywordId = 0;
      return this;
    }

    /**
     * <code>optional uint32 keyword_id = 3;</code>
     * @return the keywordId
     */
    public int getKeywordId() {
      return keywordId;
    }

    /**
     * <code>optional uint32 keyword_id = 3;</code>
     * @param value the keywordId to set
     * @return this
     */
    public RogueCommonKeyword setKeywordId(final int value) {
      bitField0_ |= 0x00000001;
      keywordId = value;
      return this;
    }

    @Override
    public RogueCommonKeyword copyFrom(final RogueCommonKeyword other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        keywordId = other.keywordId;
      }
      return this;
    }

    @Override
    public RogueCommonKeyword mergeFrom(final RogueCommonKeyword other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKeywordId()) {
        setKeywordId(other.keywordId);
      }
      return this;
    }

    @Override
    public RogueCommonKeyword clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      keywordId = 0;
      return this;
    }

    @Override
    public RogueCommonKeyword clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonKeyword)) {
        return false;
      }
      RogueCommonKeyword other = (RogueCommonKeyword) o;
      return bitField0_ == other.bitField0_
        && (!hasKeywordId() || keywordId == other.keywordId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(keywordId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(keywordId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonKeyword mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // keywordId
            keywordId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.keywordId, keywordId);
      }
      output.endObject();
    }

    @Override
    public RogueCommonKeyword mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -962244380:
          case 235216689: {
            if (input.isAtField(FieldNames.keywordId)) {
              if (!input.trySkipNullValue()) {
                keywordId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonKeyword clone() {
      return new RogueCommonKeyword().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonKeyword parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonKeyword(), data).checkInitialized();
    }

    public static RogueCommonKeyword parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonKeyword(), input).checkInitialized();
    }

    public static RogueCommonKeyword parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonKeyword(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonKeyword messages
     */
    public static MessageFactory<RogueCommonKeyword> getFactory() {
      return RogueCommonKeywordFactory.INSTANCE;
    }

    private enum RogueCommonKeywordFactory implements MessageFactory<RogueCommonKeyword> {
      INSTANCE;

      @Override
      public RogueCommonKeyword create() {
        return RogueCommonKeyword.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName keywordId = FieldName.forField("keywordId", "keyword_id");
    }
  }
}
