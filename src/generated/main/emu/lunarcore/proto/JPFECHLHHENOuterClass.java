// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class JPFECHLHHENOuterClass {
  /**
   * Protobuf type {@code JPFECHLHHEN}
   */
  public static final class JPFECHLHHEN extends ProtoMessage<JPFECHLHHEN> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 chess_rogue_main_story_id = 7;</code>
     */
    private int chessRogueMainStoryId;

    /**
     * <code>optional uint32 chess_rogue_sub_story_id = 11;</code>
     */
    private int chessRogueSubStoryId;

    /**
     * <code>optional uint32 OIIEELPECGL = 12;</code>
     */
    private int oIIEELPECGL;

    /**
     * <code>optional bool NJJKIOHDOMP = 8;</code>
     */
    private boolean nJJKIOHDOMP;

    /**
     * <code>optional bool ALNMBFMEIAC = 15;</code>
     */
    private boolean aLNMBFMEIAC;

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     */
    private final RepeatedInt nDJJNLKCNHM = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     */
    private final RepeatedInt pCOMKOLMBBG = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     */
    private final RepeatedInt nIMEABELKEH = RepeatedInt.newEmptyInstance();

    private JPFECHLHHEN() {
    }

    /**
     * @return a new empty instance of {@code JPFECHLHHEN}
     */
    public static JPFECHLHHEN newInstance() {
      return new JPFECHLHHEN();
    }

    /**
     * <code>optional uint32 chess_rogue_main_story_id = 7;</code>
     * @return whether the chessRogueMainStoryId field is set
     */
    public boolean hasChessRogueMainStoryId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 chess_rogue_main_story_id = 7;</code>
     * @return this
     */
    public JPFECHLHHEN clearChessRogueMainStoryId() {
      bitField0_ &= ~0x00000001;
      chessRogueMainStoryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 chess_rogue_main_story_id = 7;</code>
     * @return the chessRogueMainStoryId
     */
    public int getChessRogueMainStoryId() {
      return chessRogueMainStoryId;
    }

    /**
     * <code>optional uint32 chess_rogue_main_story_id = 7;</code>
     * @param value the chessRogueMainStoryId to set
     * @return this
     */
    public JPFECHLHHEN setChessRogueMainStoryId(final int value) {
      bitField0_ |= 0x00000001;
      chessRogueMainStoryId = value;
      return this;
    }

    /**
     * <code>optional uint32 chess_rogue_sub_story_id = 11;</code>
     * @return whether the chessRogueSubStoryId field is set
     */
    public boolean hasChessRogueSubStoryId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 chess_rogue_sub_story_id = 11;</code>
     * @return this
     */
    public JPFECHLHHEN clearChessRogueSubStoryId() {
      bitField0_ &= ~0x00000002;
      chessRogueSubStoryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 chess_rogue_sub_story_id = 11;</code>
     * @return the chessRogueSubStoryId
     */
    public int getChessRogueSubStoryId() {
      return chessRogueSubStoryId;
    }

    /**
     * <code>optional uint32 chess_rogue_sub_story_id = 11;</code>
     * @param value the chessRogueSubStoryId to set
     * @return this
     */
    public JPFECHLHHEN setChessRogueSubStoryId(final int value) {
      bitField0_ |= 0x00000002;
      chessRogueSubStoryId = value;
      return this;
    }

    /**
     * <code>optional uint32 OIIEELPECGL = 12;</code>
     * @return whether the oIIEELPECGL field is set
     */
    public boolean hasOIIEELPECGL() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 OIIEELPECGL = 12;</code>
     * @return this
     */
    public JPFECHLHHEN clearOIIEELPECGL() {
      bitField0_ &= ~0x00000004;
      oIIEELPECGL = 0;
      return this;
    }

    /**
     * <code>optional uint32 OIIEELPECGL = 12;</code>
     * @return the oIIEELPECGL
     */
    public int getOIIEELPECGL() {
      return oIIEELPECGL;
    }

    /**
     * <code>optional uint32 OIIEELPECGL = 12;</code>
     * @param value the oIIEELPECGL to set
     * @return this
     */
    public JPFECHLHHEN setOIIEELPECGL(final int value) {
      bitField0_ |= 0x00000004;
      oIIEELPECGL = value;
      return this;
    }

    /**
     * <code>optional bool NJJKIOHDOMP = 8;</code>
     * @return whether the nJJKIOHDOMP field is set
     */
    public boolean hasNJJKIOHDOMP() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool NJJKIOHDOMP = 8;</code>
     * @return this
     */
    public JPFECHLHHEN clearNJJKIOHDOMP() {
      bitField0_ &= ~0x00000008;
      nJJKIOHDOMP = false;
      return this;
    }

    /**
     * <code>optional bool NJJKIOHDOMP = 8;</code>
     * @return the nJJKIOHDOMP
     */
    public boolean getNJJKIOHDOMP() {
      return nJJKIOHDOMP;
    }

    /**
     * <code>optional bool NJJKIOHDOMP = 8;</code>
     * @param value the nJJKIOHDOMP to set
     * @return this
     */
    public JPFECHLHHEN setNJJKIOHDOMP(final boolean value) {
      bitField0_ |= 0x00000008;
      nJJKIOHDOMP = value;
      return this;
    }

    /**
     * <code>optional bool ALNMBFMEIAC = 15;</code>
     * @return whether the aLNMBFMEIAC field is set
     */
    public boolean hasALNMBFMEIAC() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional bool ALNMBFMEIAC = 15;</code>
     * @return this
     */
    public JPFECHLHHEN clearALNMBFMEIAC() {
      bitField0_ &= ~0x00000010;
      aLNMBFMEIAC = false;
      return this;
    }

    /**
     * <code>optional bool ALNMBFMEIAC = 15;</code>
     * @return the aLNMBFMEIAC
     */
    public boolean getALNMBFMEIAC() {
      return aLNMBFMEIAC;
    }

    /**
     * <code>optional bool ALNMBFMEIAC = 15;</code>
     * @param value the aLNMBFMEIAC to set
     * @return this
     */
    public JPFECHLHHEN setALNMBFMEIAC(final boolean value) {
      bitField0_ |= 0x00000010;
      aLNMBFMEIAC = value;
      return this;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     * @return whether the nDJJNLKCNHM field is set
     */
    public boolean hasNDJJNLKCNHM() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     * @return this
     */
    public JPFECHLHHEN clearNDJJNLKCNHM() {
      bitField0_ &= ~0x00000020;
      nDJJNLKCNHM.clear();
      return this;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNDJJNLKCNHM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getNDJJNLKCNHM() {
      return nDJJNLKCNHM;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableNDJJNLKCNHM() {
      bitField0_ |= 0x00000020;
      return nDJJNLKCNHM;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     * @param value the nDJJNLKCNHM to add
     * @return this
     */
    public JPFECHLHHEN addNDJJNLKCNHM(final int value) {
      bitField0_ |= 0x00000020;
      nDJJNLKCNHM.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 NDJJNLKCNHM = 2;</code>
     * @param values the nDJJNLKCNHM to add
     * @return this
     */
    public JPFECHLHHEN addAllNDJJNLKCNHM(final int... values) {
      bitField0_ |= 0x00000020;
      nDJJNLKCNHM.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     * @return whether the pCOMKOLMBBG field is set
     */
    public boolean hasPCOMKOLMBBG() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     * @return this
     */
    public JPFECHLHHEN clearPCOMKOLMBBG() {
      bitField0_ &= ~0x00000040;
      pCOMKOLMBBG.clear();
      return this;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutablePCOMKOLMBBG()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getPCOMKOLMBBG() {
      return pCOMKOLMBBG;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutablePCOMKOLMBBG() {
      bitField0_ |= 0x00000040;
      return pCOMKOLMBBG;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     * @param value the pCOMKOLMBBG to add
     * @return this
     */
    public JPFECHLHHEN addPCOMKOLMBBG(final int value) {
      bitField0_ |= 0x00000040;
      pCOMKOLMBBG.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 PCOMKOLMBBG = 3;</code>
     * @param values the pCOMKOLMBBG to add
     * @return this
     */
    public JPFECHLHHEN addAllPCOMKOLMBBG(final int... values) {
      bitField0_ |= 0x00000040;
      pCOMKOLMBBG.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     * @return whether the nIMEABELKEH field is set
     */
    public boolean hasNIMEABELKEH() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     * @return this
     */
    public JPFECHLHHEN clearNIMEABELKEH() {
      bitField0_ &= ~0x00000080;
      nIMEABELKEH.clear();
      return this;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNIMEABELKEH()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getNIMEABELKEH() {
      return nIMEABELKEH;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableNIMEABELKEH() {
      bitField0_ |= 0x00000080;
      return nIMEABELKEH;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     * @param value the nIMEABELKEH to add
     * @return this
     */
    public JPFECHLHHEN addNIMEABELKEH(final int value) {
      bitField0_ |= 0x00000080;
      nIMEABELKEH.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 NIMEABELKEH = 6;</code>
     * @param values the nIMEABELKEH to add
     * @return this
     */
    public JPFECHLHHEN addAllNIMEABELKEH(final int... values) {
      bitField0_ |= 0x00000080;
      nIMEABELKEH.addAll(values);
      return this;
    }

    @Override
    public JPFECHLHHEN copyFrom(final JPFECHLHHEN other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        chessRogueMainStoryId = other.chessRogueMainStoryId;
        chessRogueSubStoryId = other.chessRogueSubStoryId;
        oIIEELPECGL = other.oIIEELPECGL;
        nJJKIOHDOMP = other.nJJKIOHDOMP;
        aLNMBFMEIAC = other.aLNMBFMEIAC;
        nDJJNLKCNHM.copyFrom(other.nDJJNLKCNHM);
        pCOMKOLMBBG.copyFrom(other.pCOMKOLMBBG);
        nIMEABELKEH.copyFrom(other.nIMEABELKEH);
      }
      return this;
    }

    @Override
    public JPFECHLHHEN mergeFrom(final JPFECHLHHEN other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasChessRogueMainStoryId()) {
        setChessRogueMainStoryId(other.chessRogueMainStoryId);
      }
      if (other.hasChessRogueSubStoryId()) {
        setChessRogueSubStoryId(other.chessRogueSubStoryId);
      }
      if (other.hasOIIEELPECGL()) {
        setOIIEELPECGL(other.oIIEELPECGL);
      }
      if (other.hasNJJKIOHDOMP()) {
        setNJJKIOHDOMP(other.nJJKIOHDOMP);
      }
      if (other.hasALNMBFMEIAC()) {
        setALNMBFMEIAC(other.aLNMBFMEIAC);
      }
      if (other.hasNDJJNLKCNHM()) {
        getMutableNDJJNLKCNHM().addAll(other.nDJJNLKCNHM);
      }
      if (other.hasPCOMKOLMBBG()) {
        getMutablePCOMKOLMBBG().addAll(other.pCOMKOLMBBG);
      }
      if (other.hasNIMEABELKEH()) {
        getMutableNIMEABELKEH().addAll(other.nIMEABELKEH);
      }
      return this;
    }

    @Override
    public JPFECHLHHEN clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      chessRogueMainStoryId = 0;
      chessRogueSubStoryId = 0;
      oIIEELPECGL = 0;
      nJJKIOHDOMP = false;
      aLNMBFMEIAC = false;
      nDJJNLKCNHM.clear();
      pCOMKOLMBBG.clear();
      nIMEABELKEH.clear();
      return this;
    }

    @Override
    public JPFECHLHHEN clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nDJJNLKCNHM.clear();
      pCOMKOLMBBG.clear();
      nIMEABELKEH.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof JPFECHLHHEN)) {
        return false;
      }
      JPFECHLHHEN other = (JPFECHLHHEN) o;
      return bitField0_ == other.bitField0_
        && (!hasChessRogueMainStoryId() || chessRogueMainStoryId == other.chessRogueMainStoryId)
        && (!hasChessRogueSubStoryId() || chessRogueSubStoryId == other.chessRogueSubStoryId)
        && (!hasOIIEELPECGL() || oIIEELPECGL == other.oIIEELPECGL)
        && (!hasNJJKIOHDOMP() || nJJKIOHDOMP == other.nJJKIOHDOMP)
        && (!hasALNMBFMEIAC() || aLNMBFMEIAC == other.aLNMBFMEIAC)
        && (!hasNDJJNLKCNHM() || nDJJNLKCNHM.equals(other.nDJJNLKCNHM))
        && (!hasPCOMKOLMBBG() || pCOMKOLMBBG.equals(other.pCOMKOLMBBG))
        && (!hasNIMEABELKEH() || nIMEABELKEH.equals(other.nIMEABELKEH));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(chessRogueMainStoryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(chessRogueSubStoryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(oIIEELPECGL);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeBoolNoTag(nJJKIOHDOMP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 120);
        output.writeBoolNoTag(aLNMBFMEIAC);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < nDJJNLKCNHM.length(); i++) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(nDJJNLKCNHM.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < pCOMKOLMBBG.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(pCOMKOLMBBG.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < nIMEABELKEH.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(nIMEABELKEH.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(chessRogueMainStoryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(chessRogueSubStoryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oIIEELPECGL);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * nDJJNLKCNHM.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(nDJJNLKCNHM);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * pCOMKOLMBBG.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(pCOMKOLMBBG);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * nIMEABELKEH.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(nIMEABELKEH);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public JPFECHLHHEN mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // chessRogueMainStoryId
            chessRogueMainStoryId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // chessRogueSubStoryId
            chessRogueSubStoryId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // oIIEELPECGL
            oIIEELPECGL = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // nJJKIOHDOMP
            nJJKIOHDOMP = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // aLNMBFMEIAC
            aLNMBFMEIAC = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // nDJJNLKCNHM [packed=true]
            input.readPackedUInt32(nDJJNLKCNHM, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // pCOMKOLMBBG [packed=true]
            input.readPackedUInt32(pCOMKOLMBBG, tag);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // nIMEABELKEH [packed=true]
            input.readPackedUInt32(nIMEABELKEH, tag);
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 16: {
            // nDJJNLKCNHM [packed=false]
            tag = input.readRepeatedUInt32(nDJJNLKCNHM, tag);
            bitField0_ |= 0x00000020;
            break;
          }
          case 24: {
            // pCOMKOLMBBG [packed=false]
            tag = input.readRepeatedUInt32(pCOMKOLMBBG, tag);
            bitField0_ |= 0x00000040;
            break;
          }
          case 48: {
            // nIMEABELKEH [packed=false]
            tag = input.readRepeatedUInt32(nIMEABELKEH, tag);
            bitField0_ |= 0x00000080;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.chessRogueMainStoryId, chessRogueMainStoryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.chessRogueSubStoryId, chessRogueSubStoryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.oIIEELPECGL, oIIEELPECGL);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.nJJKIOHDOMP, nJJKIOHDOMP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.aLNMBFMEIAC, aLNMBFMEIAC);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.nDJJNLKCNHM, nDJJNLKCNHM);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedUInt32(FieldNames.pCOMKOLMBBG, pCOMKOLMBBG);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedUInt32(FieldNames.nIMEABELKEH, nIMEABELKEH);
      }
      output.endObject();
    }

    @Override
    public JPFECHLHHEN mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -2023751203:
          case 1610113799: {
            if (input.isAtField(FieldNames.chessRogueMainStoryId)) {
              if (!input.trySkipNullValue()) {
                chessRogueMainStoryId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -570872598:
          case 437588392: {
            if (input.isAtField(FieldNames.chessRogueSubStoryId)) {
              if (!input.trySkipNullValue()) {
                chessRogueSubStoryId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1426117418: {
            if (input.isAtField(FieldNames.oIIEELPECGL)) {
              if (!input.trySkipNullValue()) {
                oIIEELPECGL = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -432677965: {
            if (input.isAtField(FieldNames.nJJKIOHDOMP)) {
              if (!input.trySkipNullValue()) {
                nJJKIOHDOMP = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -559983259: {
            if (input.isAtField(FieldNames.aLNMBFMEIAC)) {
              if (!input.trySkipNullValue()) {
                aLNMBFMEIAC = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -937003961: {
            if (input.isAtField(FieldNames.nDJJNLKCNHM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(nDJJNLKCNHM);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2128713775: {
            if (input.isAtField(FieldNames.pCOMKOLMBBG)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(pCOMKOLMBBG);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2115298125: {
            if (input.isAtField(FieldNames.nIMEABELKEH)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(nIMEABELKEH);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public JPFECHLHHEN clone() {
      return new JPFECHLHHEN().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static JPFECHLHHEN parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new JPFECHLHHEN(), data).checkInitialized();
    }

    public static JPFECHLHHEN parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new JPFECHLHHEN(), input).checkInitialized();
    }

    public static JPFECHLHHEN parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new JPFECHLHHEN(), input).checkInitialized();
    }

    /**
     * @return factory for creating JPFECHLHHEN messages
     */
    public static MessageFactory<JPFECHLHHEN> getFactory() {
      return JPFECHLHHENFactory.INSTANCE;
    }

    private enum JPFECHLHHENFactory implements MessageFactory<JPFECHLHHEN> {
      INSTANCE;

      @Override
      public JPFECHLHHEN create() {
        return JPFECHLHHEN.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName chessRogueMainStoryId = FieldName.forField("chessRogueMainStoryId", "chess_rogue_main_story_id");

      static final FieldName chessRogueSubStoryId = FieldName.forField("chessRogueSubStoryId", "chess_rogue_sub_story_id");

      static final FieldName oIIEELPECGL = FieldName.forField("OIIEELPECGL");

      static final FieldName nJJKIOHDOMP = FieldName.forField("NJJKIOHDOMP");

      static final FieldName aLNMBFMEIAC = FieldName.forField("ALNMBFMEIAC");

      static final FieldName nDJJNLKCNHM = FieldName.forField("NDJJNLKCNHM");

      static final FieldName pCOMKOLMBBG = FieldName.forField("PCOMKOLMBBG");

      static final FieldName nIMEABELKEH = FieldName.forField("NIMEABELKEH");
    }
  }
}
