// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class CellMonsterInfoOuterClass {
  /**
   * Protobuf type {@code CellMonsterInfo}
   */
  public static final class CellMonsterInfo extends ProtoMessage<CellMonsterInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 select_boss_id = 13;</code>
     */
    private int selectBossId;

    /**
     * <code>optional bool confirm = 9;</code>
     */
    private boolean confirm;

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     */
    private final RepeatedMessage<CellMonsterOuterClass.CellMonster> monsterList = RepeatedMessage.newEmptyInstance(CellMonsterOuterClass.CellMonster.getFactory());

    private CellMonsterInfo() {
    }

    /**
     * @return a new empty instance of {@code CellMonsterInfo}
     */
    public static CellMonsterInfo newInstance() {
      return new CellMonsterInfo();
    }

    /**
     * <code>optional uint32 select_boss_id = 13;</code>
     * @return whether the selectBossId field is set
     */
    public boolean hasSelectBossId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 select_boss_id = 13;</code>
     * @return this
     */
    public CellMonsterInfo clearSelectBossId() {
      bitField0_ &= ~0x00000001;
      selectBossId = 0;
      return this;
    }

    /**
     * <code>optional uint32 select_boss_id = 13;</code>
     * @return the selectBossId
     */
    public int getSelectBossId() {
      return selectBossId;
    }

    /**
     * <code>optional uint32 select_boss_id = 13;</code>
     * @param value the selectBossId to set
     * @return this
     */
    public CellMonsterInfo setSelectBossId(final int value) {
      bitField0_ |= 0x00000001;
      selectBossId = value;
      return this;
    }

    /**
     * <code>optional bool confirm = 9;</code>
     * @return whether the confirm field is set
     */
    public boolean hasConfirm() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool confirm = 9;</code>
     * @return this
     */
    public CellMonsterInfo clearConfirm() {
      bitField0_ &= ~0x00000002;
      confirm = false;
      return this;
    }

    /**
     * <code>optional bool confirm = 9;</code>
     * @return the confirm
     */
    public boolean getConfirm() {
      return confirm;
    }

    /**
     * <code>optional bool confirm = 9;</code>
     * @param value the confirm to set
     * @return this
     */
    public CellMonsterInfo setConfirm(final boolean value) {
      bitField0_ |= 0x00000002;
      confirm = value;
      return this;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     * @return whether the monsterList field is set
     */
    public boolean hasMonsterList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     * @return this
     */
    public CellMonsterInfo clearMonsterList() {
      bitField0_ &= ~0x00000004;
      monsterList.clear();
      return this;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMonsterList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<CellMonsterOuterClass.CellMonster> getMonsterList() {
      return monsterList;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<CellMonsterOuterClass.CellMonster> getMutableMonsterList() {
      bitField0_ |= 0x00000004;
      return monsterList;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     * @param value the monsterList to add
     * @return this
     */
    public CellMonsterInfo addMonsterList(final CellMonsterOuterClass.CellMonster value) {
      bitField0_ |= 0x00000004;
      monsterList.add(value);
      return this;
    }

    /**
     * <code>repeated .CellMonster monster_list = 3;</code>
     * @param values the monsterList to add
     * @return this
     */
    public CellMonsterInfo addAllMonsterList(final CellMonsterOuterClass.CellMonster... values) {
      bitField0_ |= 0x00000004;
      monsterList.addAll(values);
      return this;
    }

    @Override
    public CellMonsterInfo copyFrom(final CellMonsterInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        selectBossId = other.selectBossId;
        confirm = other.confirm;
        monsterList.copyFrom(other.monsterList);
      }
      return this;
    }

    @Override
    public CellMonsterInfo mergeFrom(final CellMonsterInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSelectBossId()) {
        setSelectBossId(other.selectBossId);
      }
      if (other.hasConfirm()) {
        setConfirm(other.confirm);
      }
      if (other.hasMonsterList()) {
        getMutableMonsterList().addAll(other.monsterList);
      }
      return this;
    }

    @Override
    public CellMonsterInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      selectBossId = 0;
      confirm = false;
      monsterList.clear();
      return this;
    }

    @Override
    public CellMonsterInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      monsterList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof CellMonsterInfo)) {
        return false;
      }
      CellMonsterInfo other = (CellMonsterInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasSelectBossId() || selectBossId == other.selectBossId)
        && (!hasConfirm() || confirm == other.confirm)
        && (!hasMonsterList() || monsterList.equals(other.monsterList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(selectBossId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeBoolNoTag(confirm);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < monsterList.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(monsterList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(selectBossId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * monsterList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(monsterList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public CellMonsterInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 104: {
            // selectBossId
            selectBossId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // confirm
            confirm = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // monsterList
            tag = input.readRepeatedMessage(monsterList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.selectBossId, selectBossId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.confirm, confirm);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.monsterList, monsterList);
      }
      output.endObject();
    }

    @Override
    public CellMonsterInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1549570436:
          case -980483350: {
            if (input.isAtField(FieldNames.selectBossId)) {
              if (!input.trySkipNullValue()) {
                selectBossId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 951117504: {
            if (input.isAtField(FieldNames.confirm)) {
              if (!input.trySkipNullValue()) {
                confirm = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1541271448:
          case 552401379: {
            if (input.isAtField(FieldNames.monsterList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(monsterList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public CellMonsterInfo clone() {
      return new CellMonsterInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static CellMonsterInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new CellMonsterInfo(), data).checkInitialized();
    }

    public static CellMonsterInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonsterInfo(), input).checkInitialized();
    }

    public static CellMonsterInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonsterInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating CellMonsterInfo messages
     */
    public static MessageFactory<CellMonsterInfo> getFactory() {
      return CellMonsterInfoFactory.INSTANCE;
    }

    private enum CellMonsterInfoFactory implements MessageFactory<CellMonsterInfo> {
      INSTANCE;

      @Override
      public CellMonsterInfo create() {
        return CellMonsterInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName selectBossId = FieldName.forField("selectBossId", "select_boss_id");

      static final FieldName confirm = FieldName.forField("confirm");

      static final FieldName monsterList = FieldName.forField("monsterList", "monster_list");
    }
  }
}
