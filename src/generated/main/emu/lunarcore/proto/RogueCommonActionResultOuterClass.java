// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueCommonActionResultOuterClass {
  /**
   * Protobuf type {@code RogueCommonActionResult}
   */
  public static final class RogueCommonActionResult extends ProtoMessage<RogueCommonActionResult> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueCommonActionResultSourceType source = 11;</code>
     */
    private int source;

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     */
    private final RogueCommonActionResultDataOuterClass.RogueCommonActionResultData rogueAction = RogueCommonActionResultDataOuterClass.RogueCommonActionResultData.newInstance();

    private RogueCommonActionResult() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonActionResult}
     */
    public static RogueCommonActionResult newInstance() {
      return new RogueCommonActionResult();
    }

    /**
     * <code>optional .RogueCommonActionResultSourceType source = 11;</code>
     * @return whether the source field is set
     */
    public boolean hasSource() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueCommonActionResultSourceType source = 11;</code>
     * @return this
     */
    public RogueCommonActionResult clearSource() {
      bitField0_ &= ~0x00000001;
      source = 0;
      return this;
    }

    /**
     * <code>optional .RogueCommonActionResultSourceType source = 11;</code>
     * @return the source
     */
    public RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType getSource(
        ) {
      return RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType.forNumber(source);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RogueCommonActionResult#getSource()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getSourceValue() {
      return source;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType}. Setting an invalid value
     * can cause {@link RogueCommonActionResult#getSource()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RogueCommonActionResult setSourceValue(final int value) {
      bitField0_ |= 0x00000001;
      source = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonActionResultSourceType source = 11;</code>
     * @param value the source to set
     * @return this
     */
    public RogueCommonActionResult setSource(
        final RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType value) {
      bitField0_ |= 0x00000001;
      source = value.getNumber();
      return this;
    }

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     * @return whether the rogueAction field is set
     */
    public boolean hasRogueAction() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     * @return this
     */
    public RogueCommonActionResult clearRogueAction() {
      bitField0_ &= ~0x00000002;
      rogueAction.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueAction()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonActionResultDataOuterClass.RogueCommonActionResultData getRogueAction() {
      return rogueAction;
    }

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonActionResultDataOuterClass.RogueCommonActionResultData getMutableRogueAction(
        ) {
      bitField0_ |= 0x00000002;
      return rogueAction;
    }

    /**
     * <code>optional .RogueCommonActionResultData rogue_action = 4;</code>
     * @param value the rogueAction to set
     * @return this
     */
    public RogueCommonActionResult setRogueAction(
        final RogueCommonActionResultDataOuterClass.RogueCommonActionResultData value) {
      bitField0_ |= 0x00000002;
      rogueAction.copyFrom(value);
      return this;
    }

    @Override
    public RogueCommonActionResult copyFrom(final RogueCommonActionResult other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        source = other.source;
        rogueAction.copyFrom(other.rogueAction);
      }
      return this;
    }

    @Override
    public RogueCommonActionResult mergeFrom(final RogueCommonActionResult other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSource()) {
        setSourceValue(other.source);
      }
      if (other.hasRogueAction()) {
        getMutableRogueAction().mergeFrom(other.rogueAction);
      }
      return this;
    }

    @Override
    public RogueCommonActionResult clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      source = 0;
      rogueAction.clear();
      return this;
    }

    @Override
    public RogueCommonActionResult clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueAction.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonActionResult)) {
        return false;
      }
      RogueCommonActionResult other = (RogueCommonActionResult) o;
      return bitField0_ == other.bitField0_
        && (!hasSource() || source == other.source)
        && (!hasRogueAction() || rogueAction.equals(other.rogueAction));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeEnumNoTag(source);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(rogueAction);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(source);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueAction);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonActionResult mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // source
            final int value = input.readInt32();
            if (RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType.forNumber(value) != null) {
              source = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // rogueAction
            input.readMessage(rogueAction);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.source, source, RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.rogueAction, rogueAction);
      }
      output.endObject();
    }

    @Override
    public RogueCommonActionResult mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -896505829: {
            if (input.isAtField(FieldNames.source)) {
              if (!input.trySkipNullValue()) {
                final RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType value = input.readEnum(RogueCommonActionResultSourceTypeOuterClass.RogueCommonActionResultSourceType.converter());
                if (value != null) {
                  source = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1366582096:
          case 1368298555: {
            if (input.isAtField(FieldNames.rogueAction)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueAction);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonActionResult clone() {
      return new RogueCommonActionResult().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonActionResult parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonActionResult(), data).checkInitialized();
    }

    public static RogueCommonActionResult parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonActionResult(), input).checkInitialized();
    }

    public static RogueCommonActionResult parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonActionResult(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonActionResult messages
     */
    public static MessageFactory<RogueCommonActionResult> getFactory() {
      return RogueCommonActionResultFactory.INSTANCE;
    }

    private enum RogueCommonActionResultFactory implements MessageFactory<RogueCommonActionResult> {
      INSTANCE;

      @Override
      public RogueCommonActionResult create() {
        return RogueCommonActionResult.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName source = FieldName.forField("source");

      static final FieldName rogueAction = FieldName.forField("rogueAction", "rogue_action");
    }
  }
}
