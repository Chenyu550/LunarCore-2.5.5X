// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueBuffEnhanceInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueBuffEnhanceInfo}
   */
  public static final class ChessRogueBuffEnhanceInfo extends ProtoMessage<ChessRogueBuffEnhanceInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 buff_id = 8;</code>
     */
    private int buffId;

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     */
    private final ItemCostListOuterClass.ItemCostList costData = ItemCostListOuterClass.ItemCostList.newInstance();

    private ChessRogueBuffEnhanceInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueBuffEnhanceInfo}
     */
    public static ChessRogueBuffEnhanceInfo newInstance() {
      return new ChessRogueBuffEnhanceInfo();
    }

    /**
     * <code>optional uint32 buff_id = 8;</code>
     * @return whether the buffId field is set
     */
    public boolean hasBuffId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 buff_id = 8;</code>
     * @return this
     */
    public ChessRogueBuffEnhanceInfo clearBuffId() {
      bitField0_ &= ~0x00000001;
      buffId = 0;
      return this;
    }

    /**
     * <code>optional uint32 buff_id = 8;</code>
     * @return the buffId
     */
    public int getBuffId() {
      return buffId;
    }

    /**
     * <code>optional uint32 buff_id = 8;</code>
     * @param value the buffId to set
     * @return this
     */
    public ChessRogueBuffEnhanceInfo setBuffId(final int value) {
      bitField0_ |= 0x00000001;
      buffId = value;
      return this;
    }

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     * @return whether the costData field is set
     */
    public boolean hasCostData() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     * @return this
     */
    public ChessRogueBuffEnhanceInfo clearCostData() {
      bitField0_ &= ~0x00000002;
      costData.clear();
      return this;
    }

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCostData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemCostListOuterClass.ItemCostList getCostData() {
      return costData;
    }

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemCostListOuterClass.ItemCostList getMutableCostData() {
      bitField0_ |= 0x00000002;
      return costData;
    }

    /**
     * <code>optional .ItemCostList cost_data = 6;</code>
     * @param value the costData to set
     * @return this
     */
    public ChessRogueBuffEnhanceInfo setCostData(final ItemCostListOuterClass.ItemCostList value) {
      bitField0_ |= 0x00000002;
      costData.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueBuffEnhanceInfo copyFrom(final ChessRogueBuffEnhanceInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        buffId = other.buffId;
        costData.copyFrom(other.costData);
      }
      return this;
    }

    @Override
    public ChessRogueBuffEnhanceInfo mergeFrom(final ChessRogueBuffEnhanceInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBuffId()) {
        setBuffId(other.buffId);
      }
      if (other.hasCostData()) {
        getMutableCostData().mergeFrom(other.costData);
      }
      return this;
    }

    @Override
    public ChessRogueBuffEnhanceInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      buffId = 0;
      costData.clear();
      return this;
    }

    @Override
    public ChessRogueBuffEnhanceInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      costData.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueBuffEnhanceInfo)) {
        return false;
      }
      ChessRogueBuffEnhanceInfo other = (ChessRogueBuffEnhanceInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasBuffId() || buffId == other.buffId)
        && (!hasCostData() || costData.equals(other.costData));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(buffId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(costData);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(buffId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(costData);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueBuffEnhanceInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // buffId
            buffId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // costData
            input.readMessage(costData);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.buffId, buffId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.costData, costData);
      }
      output.endObject();
    }

    @Override
    public ChessRogueBuffEnhanceInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1378119474:
          case 227990663: {
            if (input.isAtField(FieldNames.buffId)) {
              if (!input.trySkipNullValue()) {
                buffId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -425171689:
          case -270413604: {
            if (input.isAtField(FieldNames.costData)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(costData);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueBuffEnhanceInfo clone() {
      return new ChessRogueBuffEnhanceInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueBuffEnhanceInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueBuffEnhanceInfo(), data).checkInitialized();
    }

    public static ChessRogueBuffEnhanceInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueBuffEnhanceInfo(), input).checkInitialized();
    }

    public static ChessRogueBuffEnhanceInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueBuffEnhanceInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueBuffEnhanceInfo messages
     */
    public static MessageFactory<ChessRogueBuffEnhanceInfo> getFactory() {
      return ChessRogueBuffEnhanceInfoFactory.INSTANCE;
    }

    private enum ChessRogueBuffEnhanceInfoFactory implements MessageFactory<ChessRogueBuffEnhanceInfo> {
      INSTANCE;

      @Override
      public ChessRogueBuffEnhanceInfo create() {
        return ChessRogueBuffEnhanceInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName buffId = FieldName.forField("buffId", "buff_id");

      static final FieldName costData = FieldName.forField("costData", "cost_data");
    }
  }
}
