// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueModifierDelNotifyOuterClass {
  /**
   * Protobuf type {@code RogueModifierDelNotify}
   */
  public static final class RogueModifierDelNotify extends ProtoMessage<RogueModifierDelNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint64 main_modifier_effect = 9;</code>
     */
    private long mainModifierEffect;

    private RogueModifierDelNotify() {
    }

    /**
     * @return a new empty instance of {@code RogueModifierDelNotify}
     */
    public static RogueModifierDelNotify newInstance() {
      return new RogueModifierDelNotify();
    }

    /**
     * <code>optional uint64 main_modifier_effect = 9;</code>
     * @return whether the mainModifierEffect field is set
     */
    public boolean hasMainModifierEffect() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 9;</code>
     * @return this
     */
    public RogueModifierDelNotify clearMainModifierEffect() {
      bitField0_ &= ~0x00000001;
      mainModifierEffect = 0L;
      return this;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 9;</code>
     * @return the mainModifierEffect
     */
    public long getMainModifierEffect() {
      return mainModifierEffect;
    }

    /**
     * <code>optional uint64 main_modifier_effect = 9;</code>
     * @param value the mainModifierEffect to set
     * @return this
     */
    public RogueModifierDelNotify setMainModifierEffect(final long value) {
      bitField0_ |= 0x00000001;
      mainModifierEffect = value;
      return this;
    }

    @Override
    public RogueModifierDelNotify copyFrom(final RogueModifierDelNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mainModifierEffect = other.mainModifierEffect;
      }
      return this;
    }

    @Override
    public RogueModifierDelNotify mergeFrom(final RogueModifierDelNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMainModifierEffect()) {
        setMainModifierEffect(other.mainModifierEffect);
      }
      return this;
    }

    @Override
    public RogueModifierDelNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mainModifierEffect = 0L;
      return this;
    }

    @Override
    public RogueModifierDelNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueModifierDelNotify)) {
        return false;
      }
      RogueModifierDelNotify other = (RogueModifierDelNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasMainModifierEffect() || mainModifierEffect == other.mainModifierEffect);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt64NoTag(mainModifierEffect);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt64SizeNoTag(mainModifierEffect);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueModifierDelNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // mainModifierEffect
            mainModifierEffect = input.readUInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt64(FieldNames.mainModifierEffect, mainModifierEffect);
      }
      output.endObject();
    }

    @Override
    public RogueModifierDelNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -58014367:
          case -1440158349: {
            if (input.isAtField(FieldNames.mainModifierEffect)) {
              if (!input.trySkipNullValue()) {
                mainModifierEffect = input.readUInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueModifierDelNotify clone() {
      return new RogueModifierDelNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueModifierDelNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueModifierDelNotify(), data).checkInitialized();
    }

    public static RogueModifierDelNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierDelNotify(), input).checkInitialized();
    }

    public static RogueModifierDelNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierDelNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueModifierDelNotify messages
     */
    public static MessageFactory<RogueModifierDelNotify> getFactory() {
      return RogueModifierDelNotifyFactory.INSTANCE;
    }

    private enum RogueModifierDelNotifyFactory implements MessageFactory<RogueModifierDelNotify> {
      INSTANCE;

      @Override
      public RogueModifierDelNotify create() {
        return RogueModifierDelNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mainModifierEffect = FieldName.forField("mainModifierEffect", "main_modifier_effect");
    }
  }
}
