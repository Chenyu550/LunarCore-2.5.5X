// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueGiveUpScRspOuterClass {
  /**
   * Protobuf type {@code ChessRogueGiveUpScRsp}
   */
  public static final class ChessRogueGiveUpScRsp extends ProtoMessage<ChessRogueGiveUpScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 11;</code>
     */
    private int retcode;

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     */
    private final ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo finishInfo = ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo.newInstance();

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     */
    private final ChessRogueQueryInfoOuterClass.ChessRogueQueryInfo queryInfo = ChessRogueQueryInfoOuterClass.ChessRogueQueryInfo.newInstance();

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     */
    private final ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo playerInfo = ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo.newInstance();

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     */
    private final ChessRogueGetInfoOuterClass.ChessRogueGetInfo rogueGetInfo = ChessRogueGetInfoOuterClass.ChessRogueGetInfo.newInstance();

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     */
    private final ChessRogueAeonInfoOuterClass.ChessRogueAeonInfo rogueAeonInfo = ChessRogueAeonInfoOuterClass.ChessRogueAeonInfo.newInstance();

    private ChessRogueGiveUpScRsp() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueGiveUpScRsp}
     */
    public static ChessRogueGiveUpScRsp newInstance() {
      return new ChessRogueGiveUpScRsp();
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @param value the retcode to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     * @return whether the finishInfo field is set
     */
    public boolean hasFinishInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearFinishInfo() {
      bitField0_ &= ~0x00000002;
      finishInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFinishInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo getFinishInfo() {
      return finishInfo;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo getMutableFinishInfo() {
      bitField0_ |= 0x00000002;
      return finishInfo;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 5;</code>
     * @param value the finishInfo to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setFinishInfo(
        final ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo value) {
      bitField0_ |= 0x00000002;
      finishInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     * @return whether the queryInfo field is set
     */
    public boolean hasQueryInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearQueryInfo() {
      bitField0_ &= ~0x00000004;
      queryInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableQueryInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryInfoOuterClass.ChessRogueQueryInfo getQueryInfo() {
      return queryInfo;
    }

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryInfoOuterClass.ChessRogueQueryInfo getMutableQueryInfo() {
      bitField0_ |= 0x00000004;
      return queryInfo;
    }

    /**
     * <code>optional .ChessRogueQueryInfo query_info = 6;</code>
     * @param value the queryInfo to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setQueryInfo(
        final ChessRogueQueryInfoOuterClass.ChessRogueQueryInfo value) {
      bitField0_ |= 0x00000004;
      queryInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     * @return whether the playerInfo field is set
     */
    public boolean hasPlayerInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearPlayerInfo() {
      bitField0_ &= ~0x00000008;
      playerInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutablePlayerInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo getPlayerInfo() {
      return playerInfo;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo getMutablePlayerInfo() {
      bitField0_ |= 0x00000008;
      return playerInfo;
    }

    /**
     * <code>optional .ChessRoguePlayerInfo player_info = 7;</code>
     * @param value the playerInfo to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setPlayerInfo(
        final ChessRoguePlayerInfoOuterClass.ChessRoguePlayerInfo value) {
      bitField0_ |= 0x00000008;
      playerInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     * @return whether the rogueGetInfo field is set
     */
    public boolean hasRogueGetInfo() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearRogueGetInfo() {
      bitField0_ &= ~0x00000010;
      rogueGetInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueGetInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueGetInfoOuterClass.ChessRogueGetInfo getRogueGetInfo() {
      return rogueGetInfo;
    }

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueGetInfoOuterClass.ChessRogueGetInfo getMutableRogueGetInfo() {
      bitField0_ |= 0x00000010;
      return rogueGetInfo;
    }

    /**
     * <code>optional .ChessRogueGetInfo rogue_get_info = 9;</code>
     * @param value the rogueGetInfo to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setRogueGetInfo(
        final ChessRogueGetInfoOuterClass.ChessRogueGetInfo value) {
      bitField0_ |= 0x00000010;
      rogueGetInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     * @return whether the rogueAeonInfo field is set
     */
    public boolean hasRogueAeonInfo() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     * @return this
     */
    public ChessRogueGiveUpScRsp clearRogueAeonInfo() {
      bitField0_ &= ~0x00000020;
      rogueAeonInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueAeonInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueAeonInfoOuterClass.ChessRogueAeonInfo getRogueAeonInfo() {
      return rogueAeonInfo;
    }

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueAeonInfoOuterClass.ChessRogueAeonInfo getMutableRogueAeonInfo() {
      bitField0_ |= 0x00000020;
      return rogueAeonInfo;
    }

    /**
     * <code>optional .ChessRogueAeonInfo rogue_aeon_info = 14;</code>
     * @param value the rogueAeonInfo to set
     * @return this
     */
    public ChessRogueGiveUpScRsp setRogueAeonInfo(
        final ChessRogueAeonInfoOuterClass.ChessRogueAeonInfo value) {
      bitField0_ |= 0x00000020;
      rogueAeonInfo.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueGiveUpScRsp copyFrom(final ChessRogueGiveUpScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        finishInfo.copyFrom(other.finishInfo);
        queryInfo.copyFrom(other.queryInfo);
        playerInfo.copyFrom(other.playerInfo);
        rogueGetInfo.copyFrom(other.rogueGetInfo);
        rogueAeonInfo.copyFrom(other.rogueAeonInfo);
      }
      return this;
    }

    @Override
    public ChessRogueGiveUpScRsp mergeFrom(final ChessRogueGiveUpScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasFinishInfo()) {
        getMutableFinishInfo().mergeFrom(other.finishInfo);
      }
      if (other.hasQueryInfo()) {
        getMutableQueryInfo().mergeFrom(other.queryInfo);
      }
      if (other.hasPlayerInfo()) {
        getMutablePlayerInfo().mergeFrom(other.playerInfo);
      }
      if (other.hasRogueGetInfo()) {
        getMutableRogueGetInfo().mergeFrom(other.rogueGetInfo);
      }
      if (other.hasRogueAeonInfo()) {
        getMutableRogueAeonInfo().mergeFrom(other.rogueAeonInfo);
      }
      return this;
    }

    @Override
    public ChessRogueGiveUpScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      finishInfo.clear();
      queryInfo.clear();
      playerInfo.clear();
      rogueGetInfo.clear();
      rogueAeonInfo.clear();
      return this;
    }

    @Override
    public ChessRogueGiveUpScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      finishInfo.clearQuick();
      queryInfo.clearQuick();
      playerInfo.clearQuick();
      rogueGetInfo.clearQuick();
      rogueAeonInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueGiveUpScRsp)) {
        return false;
      }
      ChessRogueGiveUpScRsp other = (ChessRogueGiveUpScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasFinishInfo() || finishInfo.equals(other.finishInfo))
        && (!hasQueryInfo() || queryInfo.equals(other.queryInfo))
        && (!hasPlayerInfo() || playerInfo.equals(other.playerInfo))
        && (!hasRogueGetInfo() || rogueGetInfo.equals(other.rogueGetInfo))
        && (!hasRogueAeonInfo() || rogueAeonInfo.equals(other.rogueAeonInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(finishInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(queryInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(playerInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(rogueGetInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(rogueAeonInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(finishInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(queryInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(playerInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueGetInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueAeonInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueGiveUpScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // finishInfo
            input.readMessage(finishInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // queryInfo
            input.readMessage(queryInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // playerInfo
            input.readMessage(playerInfo);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // rogueGetInfo
            input.readMessage(rogueGetInfo);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // rogueAeonInfo
            input.readMessage(rogueAeonInfo);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.finishInfo, finishInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.queryInfo, queryInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.playerInfo, playerInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.rogueGetInfo, rogueGetInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeMessage(FieldNames.rogueAeonInfo, rogueAeonInfo);
      }
      output.endObject();
    }

    @Override
    public ChessRogueGiveUpScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1151198177:
          case 1347581146: {
            if (input.isAtField(FieldNames.finishInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(finishInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1807200874:
          case -168476219: {
            if (input.isAtField(FieldNames.queryInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(queryInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2095520559:
          case 556803916: {
            if (input.isAtField(FieldNames.playerInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(playerInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1671986666:
          case 12475580: {
            if (input.isAtField(FieldNames.rogueGetInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueGetInfo);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1685018549:
          case -1375922619: {
            if (input.isAtField(FieldNames.rogueAeonInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueAeonInfo);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueGiveUpScRsp clone() {
      return new ChessRogueGiveUpScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueGiveUpScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueGiveUpScRsp(), data).checkInitialized();
    }

    public static ChessRogueGiveUpScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueGiveUpScRsp(), input).checkInitialized();
    }

    public static ChessRogueGiveUpScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueGiveUpScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueGiveUpScRsp messages
     */
    public static MessageFactory<ChessRogueGiveUpScRsp> getFactory() {
      return ChessRogueGiveUpScRspFactory.INSTANCE;
    }

    private enum ChessRogueGiveUpScRspFactory implements MessageFactory<ChessRogueGiveUpScRsp> {
      INSTANCE;

      @Override
      public ChessRogueGiveUpScRsp create() {
        return ChessRogueGiveUpScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName finishInfo = FieldName.forField("finishInfo", "finish_info");

      static final FieldName queryInfo = FieldName.forField("queryInfo", "query_info");

      static final FieldName playerInfo = FieldName.forField("playerInfo", "player_info");

      static final FieldName rogueGetInfo = FieldName.forField("rogueGetInfo", "rogue_get_info");

      static final FieldName rogueAeonInfo = FieldName.forField("rogueAeonInfo", "rogue_aeon_info");
    }
  }
}
