// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueGetInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueGetInfo}
   */
  public static final class ChessRogueGetInfo extends ProtoMessage<ChessRogueGetInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     */
    private final ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo chessAeonInfo = ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo.newInstance();

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     */
    private final ChessRogueQueryDiceInfoOuterClass.ChessRogueQueryDiceInfo queryDiceInfo = ChessRogueQueryDiceInfoOuterClass.ChessRogueQueryDiceInfo.newInstance();

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     */
    private final ChessRogueQueryDiffcultyInfoOuterClass.ChessRogueQueryDiffcultyInfo rogueDifficultyInfo = ChessRogueQueryDiffcultyInfoOuterClass.ChessRogueQueryDiffcultyInfo.newInstance();

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     */
    private final ChessRogueTalentInfoOuterClass.ChessRogueTalentInfo talentInfoList = ChessRogueTalentInfoOuterClass.ChessRogueTalentInfo.newInstance();

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     */
    private final RepeatedInt areaIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     */
    private final RepeatedInt exploredAreaIdList = RepeatedInt.newEmptyInstance();

    private ChessRogueGetInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueGetInfo}
     */
    public static ChessRogueGetInfo newInstance() {
      return new ChessRogueGetInfo();
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     * @return whether the chessAeonInfo field is set
     */
    public boolean hasChessAeonInfo() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     * @return this
     */
    public ChessRogueGetInfo clearChessAeonInfo() {
      bitField0_ &= ~0x00000001;
      chessAeonInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChessAeonInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo getChessAeonInfo() {
      return chessAeonInfo;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo getMutableChessAeonInfo() {
      bitField0_ |= 0x00000001;
      return chessAeonInfo;
    }

    /**
     * <code>optional .ChessRogueQueryAeonInfo chess_aeon_info = 1;</code>
     * @param value the chessAeonInfo to set
     * @return this
     */
    public ChessRogueGetInfo setChessAeonInfo(
        final ChessRogueQueryAeonInfoOuterClass.ChessRogueQueryAeonInfo value) {
      bitField0_ |= 0x00000001;
      chessAeonInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     * @return whether the queryDiceInfo field is set
     */
    public boolean hasQueryDiceInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     * @return this
     */
    public ChessRogueGetInfo clearQueryDiceInfo() {
      bitField0_ &= ~0x00000002;
      queryDiceInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableQueryDiceInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryDiceInfoOuterClass.ChessRogueQueryDiceInfo getQueryDiceInfo() {
      return queryDiceInfo;
    }

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryDiceInfoOuterClass.ChessRogueQueryDiceInfo getMutableQueryDiceInfo() {
      bitField0_ |= 0x00000002;
      return queryDiceInfo;
    }

    /**
     * <code>optional .ChessRogueQueryDiceInfo query_dice_info = 3;</code>
     * @param value the queryDiceInfo to set
     * @return this
     */
    public ChessRogueGetInfo setQueryDiceInfo(
        final ChessRogueQueryDiceInfoOuterClass.ChessRogueQueryDiceInfo value) {
      bitField0_ |= 0x00000002;
      queryDiceInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     * @return whether the rogueDifficultyInfo field is set
     */
    public boolean hasRogueDifficultyInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     * @return this
     */
    public ChessRogueGetInfo clearRogueDifficultyInfo() {
      bitField0_ &= ~0x00000004;
      rogueDifficultyInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueDifficultyInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueQueryDiffcultyInfoOuterClass.ChessRogueQueryDiffcultyInfo getRogueDifficultyInfo(
        ) {
      return rogueDifficultyInfo;
    }

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueQueryDiffcultyInfoOuterClass.ChessRogueQueryDiffcultyInfo getMutableRogueDifficultyInfo(
        ) {
      bitField0_ |= 0x00000004;
      return rogueDifficultyInfo;
    }

    /**
     * <code>optional .ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;</code>
     * @param value the rogueDifficultyInfo to set
     * @return this
     */
    public ChessRogueGetInfo setRogueDifficultyInfo(
        final ChessRogueQueryDiffcultyInfoOuterClass.ChessRogueQueryDiffcultyInfo value) {
      bitField0_ |= 0x00000004;
      rogueDifficultyInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     * @return whether the talentInfoList field is set
     */
    public boolean hasTalentInfoList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     * @return this
     */
    public ChessRogueGetInfo clearTalentInfoList() {
      bitField0_ &= ~0x00000008;
      talentInfoList.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTalentInfoList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueTalentInfoOuterClass.ChessRogueTalentInfo getTalentInfoList() {
      return talentInfoList;
    }

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueTalentInfoOuterClass.ChessRogueTalentInfo getMutableTalentInfoList() {
      bitField0_ |= 0x00000008;
      return talentInfoList;
    }

    /**
     * <code>optional .ChessRogueTalentInfo talent_info_list = 9;</code>
     * @param value the talentInfoList to set
     * @return this
     */
    public ChessRogueGetInfo setTalentInfoList(
        final ChessRogueTalentInfoOuterClass.ChessRogueTalentInfo value) {
      bitField0_ |= 0x00000008;
      talentInfoList.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     * @return whether the areaIdList field is set
     */
    public boolean hasAreaIdList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     * @return this
     */
    public ChessRogueGetInfo clearAreaIdList() {
      bitField0_ &= ~0x00000010;
      areaIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAreaIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAreaIdList() {
      return areaIdList;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAreaIdList() {
      bitField0_ |= 0x00000010;
      return areaIdList;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     * @param value the areaIdList to add
     * @return this
     */
    public ChessRogueGetInfo addAreaIdList(final int value) {
      bitField0_ |= 0x00000010;
      areaIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 area_id_list = 13;</code>
     * @param values the areaIdList to add
     * @return this
     */
    public ChessRogueGetInfo addAllAreaIdList(final int... values) {
      bitField0_ |= 0x00000010;
      areaIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     * @return whether the exploredAreaIdList field is set
     */
    public boolean hasExploredAreaIdList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     * @return this
     */
    public ChessRogueGetInfo clearExploredAreaIdList() {
      bitField0_ &= ~0x00000020;
      exploredAreaIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableExploredAreaIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getExploredAreaIdList() {
      return exploredAreaIdList;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableExploredAreaIdList() {
      bitField0_ |= 0x00000020;
      return exploredAreaIdList;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     * @param value the exploredAreaIdList to add
     * @return this
     */
    public ChessRogueGetInfo addExploredAreaIdList(final int value) {
      bitField0_ |= 0x00000020;
      exploredAreaIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 explored_area_id_list = 14;</code>
     * @param values the exploredAreaIdList to add
     * @return this
     */
    public ChessRogueGetInfo addAllExploredAreaIdList(final int... values) {
      bitField0_ |= 0x00000020;
      exploredAreaIdList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueGetInfo copyFrom(final ChessRogueGetInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        chessAeonInfo.copyFrom(other.chessAeonInfo);
        queryDiceInfo.copyFrom(other.queryDiceInfo);
        rogueDifficultyInfo.copyFrom(other.rogueDifficultyInfo);
        talentInfoList.copyFrom(other.talentInfoList);
        areaIdList.copyFrom(other.areaIdList);
        exploredAreaIdList.copyFrom(other.exploredAreaIdList);
      }
      return this;
    }

    @Override
    public ChessRogueGetInfo mergeFrom(final ChessRogueGetInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasChessAeonInfo()) {
        getMutableChessAeonInfo().mergeFrom(other.chessAeonInfo);
      }
      if (other.hasQueryDiceInfo()) {
        getMutableQueryDiceInfo().mergeFrom(other.queryDiceInfo);
      }
      if (other.hasRogueDifficultyInfo()) {
        getMutableRogueDifficultyInfo().mergeFrom(other.rogueDifficultyInfo);
      }
      if (other.hasTalentInfoList()) {
        getMutableTalentInfoList().mergeFrom(other.talentInfoList);
      }
      if (other.hasAreaIdList()) {
        getMutableAreaIdList().addAll(other.areaIdList);
      }
      if (other.hasExploredAreaIdList()) {
        getMutableExploredAreaIdList().addAll(other.exploredAreaIdList);
      }
      return this;
    }

    @Override
    public ChessRogueGetInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      chessAeonInfo.clear();
      queryDiceInfo.clear();
      rogueDifficultyInfo.clear();
      talentInfoList.clear();
      areaIdList.clear();
      exploredAreaIdList.clear();
      return this;
    }

    @Override
    public ChessRogueGetInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      chessAeonInfo.clearQuick();
      queryDiceInfo.clearQuick();
      rogueDifficultyInfo.clearQuick();
      talentInfoList.clearQuick();
      areaIdList.clear();
      exploredAreaIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueGetInfo)) {
        return false;
      }
      ChessRogueGetInfo other = (ChessRogueGetInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasChessAeonInfo() || chessAeonInfo.equals(other.chessAeonInfo))
        && (!hasQueryDiceInfo() || queryDiceInfo.equals(other.queryDiceInfo))
        && (!hasRogueDifficultyInfo() || rogueDifficultyInfo.equals(other.rogueDifficultyInfo))
        && (!hasTalentInfoList() || talentInfoList.equals(other.talentInfoList))
        && (!hasAreaIdList() || areaIdList.equals(other.areaIdList))
        && (!hasExploredAreaIdList() || exploredAreaIdList.equals(other.exploredAreaIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(chessAeonInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 26);
        output.writeMessageNoTag(queryDiceInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(rogueDifficultyInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(talentInfoList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < areaIdList.length(); i++) {
          output.writeRawByte((byte) 104);
          output.writeUInt32NoTag(areaIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < exploredAreaIdList.length(); i++) {
          output.writeRawByte((byte) 112);
          output.writeUInt32NoTag(exploredAreaIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(chessAeonInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(queryDiceInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueDifficultyInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(talentInfoList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * areaIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(areaIdList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * exploredAreaIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(exploredAreaIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueGetInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 10: {
            // chessAeonInfo
            input.readMessage(chessAeonInfo);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // queryDiceInfo
            input.readMessage(queryDiceInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // rogueDifficultyInfo
            input.readMessage(rogueDifficultyInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // talentInfoList
            input.readMessage(talentInfoList);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // areaIdList [packed=true]
            input.readPackedUInt32(areaIdList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // exploredAreaIdList [packed=true]
            input.readPackedUInt32(exploredAreaIdList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 104: {
            // areaIdList [packed=false]
            tag = input.readRepeatedUInt32(areaIdList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
          case 112: {
            // exploredAreaIdList [packed=false]
            tag = input.readRepeatedUInt32(exploredAreaIdList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.chessAeonInfo, chessAeonInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.queryDiceInfo, queryDiceInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rogueDifficultyInfo, rogueDifficultyInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.talentInfoList, talentInfoList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.areaIdList, areaIdList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.exploredAreaIdList, exploredAreaIdList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueGetInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1969851249:
          case 1965672427: {
            if (input.isAtField(FieldNames.chessAeonInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(chessAeonInfo);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1613622749:
          case 524483471: {
            if (input.isAtField(FieldNames.queryDiceInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(queryDiceInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 664895363:
          case -318397875: {
            if (input.isAtField(FieldNames.rogueDifficultyInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueDifficultyInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -363598984:
          case 1545287164: {
            if (input.isAtField(FieldNames.talentInfoList)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(talentInfoList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 530025286:
          case -1239486576: {
            if (input.isAtField(FieldNames.areaIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(areaIdList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -471271849:
          case -942040866: {
            if (input.isAtField(FieldNames.exploredAreaIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(exploredAreaIdList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueGetInfo clone() {
      return new ChessRogueGetInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueGetInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueGetInfo(), data).checkInitialized();
    }

    public static ChessRogueGetInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueGetInfo(), input).checkInitialized();
    }

    public static ChessRogueGetInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueGetInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueGetInfo messages
     */
    public static MessageFactory<ChessRogueGetInfo> getFactory() {
      return ChessRogueGetInfoFactory.INSTANCE;
    }

    private enum ChessRogueGetInfoFactory implements MessageFactory<ChessRogueGetInfo> {
      INSTANCE;

      @Override
      public ChessRogueGetInfo create() {
        return ChessRogueGetInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName chessAeonInfo = FieldName.forField("chessAeonInfo", "chess_aeon_info");

      static final FieldName queryDiceInfo = FieldName.forField("queryDiceInfo", "query_dice_info");

      static final FieldName rogueDifficultyInfo = FieldName.forField("rogueDifficultyInfo", "rogue_difficulty_info");

      static final FieldName talentInfoList = FieldName.forField("talentInfoList", "talent_info_list");

      static final FieldName areaIdList = FieldName.forField("areaIdList", "area_id_list");

      static final FieldName exploredAreaIdList = FieldName.forField("exploredAreaIdList", "explored_area_id_list");
    }
  }
}
