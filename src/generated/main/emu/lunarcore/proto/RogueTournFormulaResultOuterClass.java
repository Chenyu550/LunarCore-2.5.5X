// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueTournFormulaResultOuterClass {
  /**
   * Protobuf type {@code RogueTournFormulaResult}
   */
  public static final class RogueTournFormulaResult extends ProtoMessage<RogueTournFormulaResult> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 tourn_formula_id = 11;</code>
     */
    private int tournFormulaId;

    private RogueTournFormulaResult() {
    }

    /**
     * @return a new empty instance of {@code RogueTournFormulaResult}
     */
    public static RogueTournFormulaResult newInstance() {
      return new RogueTournFormulaResult();
    }

    /**
     * <code>optional uint32 tourn_formula_id = 11;</code>
     * @return whether the tournFormulaId field is set
     */
    public boolean hasTournFormulaId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 tourn_formula_id = 11;</code>
     * @return this
     */
    public RogueTournFormulaResult clearTournFormulaId() {
      bitField0_ &= ~0x00000001;
      tournFormulaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 tourn_formula_id = 11;</code>
     * @return the tournFormulaId
     */
    public int getTournFormulaId() {
      return tournFormulaId;
    }

    /**
     * <code>optional uint32 tourn_formula_id = 11;</code>
     * @param value the tournFormulaId to set
     * @return this
     */
    public RogueTournFormulaResult setTournFormulaId(final int value) {
      bitField0_ |= 0x00000001;
      tournFormulaId = value;
      return this;
    }

    @Override
    public RogueTournFormulaResult copyFrom(final RogueTournFormulaResult other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        tournFormulaId = other.tournFormulaId;
      }
      return this;
    }

    @Override
    public RogueTournFormulaResult mergeFrom(final RogueTournFormulaResult other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasTournFormulaId()) {
        setTournFormulaId(other.tournFormulaId);
      }
      return this;
    }

    @Override
    public RogueTournFormulaResult clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      tournFormulaId = 0;
      return this;
    }

    @Override
    public RogueTournFormulaResult clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueTournFormulaResult)) {
        return false;
      }
      RogueTournFormulaResult other = (RogueTournFormulaResult) o;
      return bitField0_ == other.bitField0_
        && (!hasTournFormulaId() || tournFormulaId == other.tournFormulaId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(tournFormulaId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(tournFormulaId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueTournFormulaResult mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // tournFormulaId
            tournFormulaId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.tournFormulaId, tournFormulaId);
      }
      output.endObject();
    }

    @Override
    public RogueTournFormulaResult mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1902686379:
          case 1630005597: {
            if (input.isAtField(FieldNames.tournFormulaId)) {
              if (!input.trySkipNullValue()) {
                tournFormulaId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueTournFormulaResult clone() {
      return new RogueTournFormulaResult().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueTournFormulaResult parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaResult(), data).checkInitialized();
    }

    public static RogueTournFormulaResult parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaResult(), input).checkInitialized();
    }

    public static RogueTournFormulaResult parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueTournFormulaResult(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueTournFormulaResult messages
     */
    public static MessageFactory<RogueTournFormulaResult> getFactory() {
      return RogueTournFormulaResultFactory.INSTANCE;
    }

    private enum RogueTournFormulaResultFactory implements MessageFactory<RogueTournFormulaResult> {
      INSTANCE;

      @Override
      public RogueTournFormulaResult create() {
        return RogueTournFormulaResult.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName tournFormulaId = FieldName.forField("tournFormulaId", "tourn_formula_id");
    }
  }
}
