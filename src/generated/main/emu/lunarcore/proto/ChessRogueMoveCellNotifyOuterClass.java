// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueMoveCellNotifyOuterClass {
  /**
   * Protobuf type {@code ChessRogueMoveCellNotify}
   */
  public static final class ChessRogueMoveCellNotify extends ProtoMessage<ChessRogueMoveCellNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 ONHIDCFMAHO = 8;</code>
     */
    private int oNHIDCFMAHO;

    /**
     * <code>optional uint32 EABHBAHINGJ = 13;</code>
     */
    private int eABHBAHINGJ;

    /**
     * <code>optional .CellInfo cell = 6;</code>
     */
    private final CellInfoOuterClass.CellInfo cell = CellInfoOuterClass.CellInfo.newInstance();

    private ChessRogueMoveCellNotify() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueMoveCellNotify}
     */
    public static ChessRogueMoveCellNotify newInstance() {
      return new ChessRogueMoveCellNotify();
    }

    /**
     * <code>optional uint32 ONHIDCFMAHO = 8;</code>
     * @return whether the oNHIDCFMAHO field is set
     */
    public boolean hasONHIDCFMAHO() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 ONHIDCFMAHO = 8;</code>
     * @return this
     */
    public ChessRogueMoveCellNotify clearONHIDCFMAHO() {
      bitField0_ &= ~0x00000001;
      oNHIDCFMAHO = 0;
      return this;
    }

    /**
     * <code>optional uint32 ONHIDCFMAHO = 8;</code>
     * @return the oNHIDCFMAHO
     */
    public int getONHIDCFMAHO() {
      return oNHIDCFMAHO;
    }

    /**
     * <code>optional uint32 ONHIDCFMAHO = 8;</code>
     * @param value the oNHIDCFMAHO to set
     * @return this
     */
    public ChessRogueMoveCellNotify setONHIDCFMAHO(final int value) {
      bitField0_ |= 0x00000001;
      oNHIDCFMAHO = value;
      return this;
    }

    /**
     * <code>optional uint32 EABHBAHINGJ = 13;</code>
     * @return whether the eABHBAHINGJ field is set
     */
    public boolean hasEABHBAHINGJ() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 EABHBAHINGJ = 13;</code>
     * @return this
     */
    public ChessRogueMoveCellNotify clearEABHBAHINGJ() {
      bitField0_ &= ~0x00000002;
      eABHBAHINGJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 EABHBAHINGJ = 13;</code>
     * @return the eABHBAHINGJ
     */
    public int getEABHBAHINGJ() {
      return eABHBAHINGJ;
    }

    /**
     * <code>optional uint32 EABHBAHINGJ = 13;</code>
     * @param value the eABHBAHINGJ to set
     * @return this
     */
    public ChessRogueMoveCellNotify setEABHBAHINGJ(final int value) {
      bitField0_ |= 0x00000002;
      eABHBAHINGJ = value;
      return this;
    }

    /**
     * <code>optional .CellInfo cell = 6;</code>
     * @return whether the cell field is set
     */
    public boolean hasCell() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .CellInfo cell = 6;</code>
     * @return this
     */
    public ChessRogueMoveCellNotify clearCell() {
      bitField0_ &= ~0x00000004;
      cell.clear();
      return this;
    }

    /**
     * <code>optional .CellInfo cell = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCell()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellInfoOuterClass.CellInfo getCell() {
      return cell;
    }

    /**
     * <code>optional .CellInfo cell = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellInfoOuterClass.CellInfo getMutableCell() {
      bitField0_ |= 0x00000004;
      return cell;
    }

    /**
     * <code>optional .CellInfo cell = 6;</code>
     * @param value the cell to set
     * @return this
     */
    public ChessRogueMoveCellNotify setCell(final CellInfoOuterClass.CellInfo value) {
      bitField0_ |= 0x00000004;
      cell.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueMoveCellNotify copyFrom(final ChessRogueMoveCellNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        oNHIDCFMAHO = other.oNHIDCFMAHO;
        eABHBAHINGJ = other.eABHBAHINGJ;
        cell.copyFrom(other.cell);
      }
      return this;
    }

    @Override
    public ChessRogueMoveCellNotify mergeFrom(final ChessRogueMoveCellNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasONHIDCFMAHO()) {
        setONHIDCFMAHO(other.oNHIDCFMAHO);
      }
      if (other.hasEABHBAHINGJ()) {
        setEABHBAHINGJ(other.eABHBAHINGJ);
      }
      if (other.hasCell()) {
        getMutableCell().mergeFrom(other.cell);
      }
      return this;
    }

    @Override
    public ChessRogueMoveCellNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      oNHIDCFMAHO = 0;
      eABHBAHINGJ = 0;
      cell.clear();
      return this;
    }

    @Override
    public ChessRogueMoveCellNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cell.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueMoveCellNotify)) {
        return false;
      }
      ChessRogueMoveCellNotify other = (ChessRogueMoveCellNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasONHIDCFMAHO() || oNHIDCFMAHO == other.oNHIDCFMAHO)
        && (!hasEABHBAHINGJ() || eABHBAHINGJ == other.eABHBAHINGJ)
        && (!hasCell() || cell.equals(other.cell));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(oNHIDCFMAHO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(eABHBAHINGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(cell);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oNHIDCFMAHO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(eABHBAHINGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(cell);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueMoveCellNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // oNHIDCFMAHO
            oNHIDCFMAHO = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // eABHBAHINGJ
            eABHBAHINGJ = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // cell
            input.readMessage(cell);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.oNHIDCFMAHO, oNHIDCFMAHO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.eABHBAHINGJ, eABHBAHINGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.cell, cell);
      }
      output.endObject();
    }

    @Override
    public ChessRogueMoveCellNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 920878754: {
            if (input.isAtField(FieldNames.oNHIDCFMAHO)) {
              if (!input.trySkipNullValue()) {
                oNHIDCFMAHO = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1348312049: {
            if (input.isAtField(FieldNames.eABHBAHINGJ)) {
              if (!input.trySkipNullValue()) {
                eABHBAHINGJ = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3049826: {
            if (input.isAtField(FieldNames.cell)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(cell);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueMoveCellNotify clone() {
      return new ChessRogueMoveCellNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueMoveCellNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueMoveCellNotify(), data).checkInitialized();
    }

    public static ChessRogueMoveCellNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueMoveCellNotify(), input).checkInitialized();
    }

    public static ChessRogueMoveCellNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueMoveCellNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueMoveCellNotify messages
     */
    public static MessageFactory<ChessRogueMoveCellNotify> getFactory() {
      return ChessRogueMoveCellNotifyFactory.INSTANCE;
    }

    private enum ChessRogueMoveCellNotifyFactory implements MessageFactory<ChessRogueMoveCellNotify> {
      INSTANCE;

      @Override
      public ChessRogueMoveCellNotify create() {
        return ChessRogueMoveCellNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName oNHIDCFMAHO = FieldName.forField("ONHIDCFMAHO");

      static final FieldName eABHBAHINGJ = FieldName.forField("EABHBAHINGJ");

      static final FieldName cell = FieldName.forField("cell");
    }
  }
}
