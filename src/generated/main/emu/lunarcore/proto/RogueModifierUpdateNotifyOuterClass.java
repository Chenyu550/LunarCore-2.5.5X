// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueModifierUpdateNotifyOuterClass {
  /**
   * Protobuf type {@code RogueModifierUpdateNotify}
   */
  public static final class RogueModifierUpdateNotify extends ProtoMessage<RogueModifierUpdateNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     */
    private final RogueModifierOuterClass.RogueModifier cHESSROGUECELLUPDATEREASONMODIFIER = RogueModifierOuterClass.RogueModifier.newInstance();

    private RogueModifierUpdateNotify() {
    }

    /**
     * @return a new empty instance of {@code RogueModifierUpdateNotify}
     */
    public static RogueModifierUpdateNotify newInstance() {
      return new RogueModifierUpdateNotify();
    }

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     * @return whether the cHESSROGUECELLUPDATEREASONMODIFIER field is set
     */
    public boolean hasCHESSROGUECELLUPDATEREASONMODIFIER() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     * @return this
     */
    public RogueModifierUpdateNotify clearCHESSROGUECELLUPDATEREASONMODIFIER() {
      bitField0_ &= ~0x00000001;
      cHESSROGUECELLUPDATEREASONMODIFIER.clear();
      return this;
    }

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCHESSROGUECELLUPDATEREASONMODIFIER()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueModifierOuterClass.RogueModifier getCHESSROGUECELLUPDATEREASONMODIFIER() {
      return cHESSROGUECELLUPDATEREASONMODIFIER;
    }

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueModifierOuterClass.RogueModifier getMutableCHESSROGUECELLUPDATEREASONMODIFIER() {
      bitField0_ |= 0x00000001;
      return cHESSROGUECELLUPDATEREASONMODIFIER;
    }

    /**
     * <code>optional .RogueModifier CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 6;</code>
     * @param value the cHESSROGUECELLUPDATEREASONMODIFIER to set
     * @return this
     */
    public RogueModifierUpdateNotify setCHESSROGUECELLUPDATEREASONMODIFIER(
        final RogueModifierOuterClass.RogueModifier value) {
      bitField0_ |= 0x00000001;
      cHESSROGUECELLUPDATEREASONMODIFIER.copyFrom(value);
      return this;
    }

    @Override
    public RogueModifierUpdateNotify copyFrom(final RogueModifierUpdateNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        cHESSROGUECELLUPDATEREASONMODIFIER.copyFrom(other.cHESSROGUECELLUPDATEREASONMODIFIER);
      }
      return this;
    }

    @Override
    public RogueModifierUpdateNotify mergeFrom(final RogueModifierUpdateNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCHESSROGUECELLUPDATEREASONMODIFIER()) {
        getMutableCHESSROGUECELLUPDATEREASONMODIFIER().mergeFrom(other.cHESSROGUECELLUPDATEREASONMODIFIER);
      }
      return this;
    }

    @Override
    public RogueModifierUpdateNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cHESSROGUECELLUPDATEREASONMODIFIER.clear();
      return this;
    }

    @Override
    public RogueModifierUpdateNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cHESSROGUECELLUPDATEREASONMODIFIER.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueModifierUpdateNotify)) {
        return false;
      }
      RogueModifierUpdateNotify other = (RogueModifierUpdateNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasCHESSROGUECELLUPDATEREASONMODIFIER() || cHESSROGUECELLUPDATEREASONMODIFIER.equals(other.cHESSROGUECELLUPDATEREASONMODIFIER));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(cHESSROGUECELLUPDATEREASONMODIFIER);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(cHESSROGUECELLUPDATEREASONMODIFIER);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueModifierUpdateNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 50: {
            // cHESSROGUECELLUPDATEREASONMODIFIER
            input.readMessage(cHESSROGUECELLUPDATEREASONMODIFIER);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.cHESSROGUECELLUPDATEREASONMODIFIER, cHESSROGUECELLUPDATEREASONMODIFIER);
      }
      output.endObject();
    }

    @Override
    public RogueModifierUpdateNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -83230880:
          case 1690038229: {
            if (input.isAtField(FieldNames.cHESSROGUECELLUPDATEREASONMODIFIER)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(cHESSROGUECELLUPDATEREASONMODIFIER);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueModifierUpdateNotify clone() {
      return new RogueModifierUpdateNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueModifierUpdateNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueModifierUpdateNotify(), data).checkInitialized();
    }

    public static RogueModifierUpdateNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierUpdateNotify(), input).checkInitialized();
    }

    public static RogueModifierUpdateNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueModifierUpdateNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueModifierUpdateNotify messages
     */
    public static MessageFactory<RogueModifierUpdateNotify> getFactory() {
      return RogueModifierUpdateNotifyFactory.INSTANCE;
    }

    private enum RogueModifierUpdateNotifyFactory implements MessageFactory<RogueModifierUpdateNotify> {
      INSTANCE;

      @Override
      public RogueModifierUpdateNotify create() {
        return RogueModifierUpdateNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName cHESSROGUECELLUPDATEREASONMODIFIER = FieldName.forField("CHESSROGUECELLUPDATEREASONMODIFIER", "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER");
    }
  }
}
