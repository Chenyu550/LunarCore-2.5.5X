// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueHistoryCellInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueHistoryCellInfo}
   */
  public static final class ChessRogueHistoryCellInfo extends ProtoMessage<ChessRogueHistoryCellInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cell_id = 9;</code>
     */
    private int cellId;

    /**
     * <code>optional uint32 room_id = 13;</code>
     */
    private int roomId;

    private ChessRogueHistoryCellInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueHistoryCellInfo}
     */
    public static ChessRogueHistoryCellInfo newInstance() {
      return new ChessRogueHistoryCellInfo();
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return whether the cellId field is set
     */
    public boolean hasCellId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return this
     */
    public ChessRogueHistoryCellInfo clearCellId() {
      bitField0_ &= ~0x00000001;
      cellId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return the cellId
     */
    public int getCellId() {
      return cellId;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @param value the cellId to set
     * @return this
     */
    public ChessRogueHistoryCellInfo setCellId(final int value) {
      bitField0_ |= 0x00000001;
      cellId = value;
      return this;
    }

    /**
     * <code>optional uint32 room_id = 13;</code>
     * @return whether the roomId field is set
     */
    public boolean hasRoomId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 room_id = 13;</code>
     * @return this
     */
    public ChessRogueHistoryCellInfo clearRoomId() {
      bitField0_ &= ~0x00000002;
      roomId = 0;
      return this;
    }

    /**
     * <code>optional uint32 room_id = 13;</code>
     * @return the roomId
     */
    public int getRoomId() {
      return roomId;
    }

    /**
     * <code>optional uint32 room_id = 13;</code>
     * @param value the roomId to set
     * @return this
     */
    public ChessRogueHistoryCellInfo setRoomId(final int value) {
      bitField0_ |= 0x00000002;
      roomId = value;
      return this;
    }

    @Override
    public ChessRogueHistoryCellInfo copyFrom(final ChessRogueHistoryCellInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        cellId = other.cellId;
        roomId = other.roomId;
      }
      return this;
    }

    @Override
    public ChessRogueHistoryCellInfo mergeFrom(final ChessRogueHistoryCellInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCellId()) {
        setCellId(other.cellId);
      }
      if (other.hasRoomId()) {
        setRoomId(other.roomId);
      }
      return this;
    }

    @Override
    public ChessRogueHistoryCellInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cellId = 0;
      roomId = 0;
      return this;
    }

    @Override
    public ChessRogueHistoryCellInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueHistoryCellInfo)) {
        return false;
      }
      ChessRogueHistoryCellInfo other = (ChessRogueHistoryCellInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasCellId() || cellId == other.cellId)
        && (!hasRoomId() || roomId == other.roomId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(roomId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(roomId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueHistoryCellInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // cellId
            cellId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // roomId
            roomId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.cellId, cellId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.roomId, roomId);
      }
      output.endObject();
    }

    @Override
    public ChessRogueHistoryCellInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1364082147:
          case 663147800: {
            if (input.isAtField(FieldNames.cellId)) {
              if (!input.trySkipNullValue()) {
                cellId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -925319338:
          case 1379892991: {
            if (input.isAtField(FieldNames.roomId)) {
              if (!input.trySkipNullValue()) {
                roomId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueHistoryCellInfo clone() {
      return new ChessRogueHistoryCellInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueHistoryCellInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueHistoryCellInfo(), data).checkInitialized();
    }

    public static ChessRogueHistoryCellInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueHistoryCellInfo(), input).checkInitialized();
    }

    public static ChessRogueHistoryCellInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueHistoryCellInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueHistoryCellInfo messages
     */
    public static MessageFactory<ChessRogueHistoryCellInfo> getFactory() {
      return ChessRogueHistoryCellInfoFactory.INSTANCE;
    }

    private enum ChessRogueHistoryCellInfoFactory implements MessageFactory<ChessRogueHistoryCellInfo> {
      INSTANCE;

      @Override
      public ChessRogueHistoryCellInfo create() {
        return ChessRogueHistoryCellInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName cellId = FieldName.forField("cellId", "cell_id");

      static final FieldName roomId = FieldName.forField("roomId", "room_id");
    }
  }
}
