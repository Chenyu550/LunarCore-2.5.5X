// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class CellMonsterOuterClass {
  /**
   * Protobuf type {@code CellMonster}
   */
  public static final class CellMonster extends ProtoMessage<CellMonster> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 boss_decay_id = 11;</code>
     */
    private int bossDecayId;

    /**
     * <code>optional uint32 monster_id = 15;</code>
     */
    private int monsterId;

    private CellMonster() {
    }

    /**
     * @return a new empty instance of {@code CellMonster}
     */
    public static CellMonster newInstance() {
      return new CellMonster();
    }

    /**
     * <code>optional uint32 boss_decay_id = 11;</code>
     * @return whether the bossDecayId field is set
     */
    public boolean hasBossDecayId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 boss_decay_id = 11;</code>
     * @return this
     */
    public CellMonster clearBossDecayId() {
      bitField0_ &= ~0x00000001;
      bossDecayId = 0;
      return this;
    }

    /**
     * <code>optional uint32 boss_decay_id = 11;</code>
     * @return the bossDecayId
     */
    public int getBossDecayId() {
      return bossDecayId;
    }

    /**
     * <code>optional uint32 boss_decay_id = 11;</code>
     * @param value the bossDecayId to set
     * @return this
     */
    public CellMonster setBossDecayId(final int value) {
      bitField0_ |= 0x00000001;
      bossDecayId = value;
      return this;
    }

    /**
     * <code>optional uint32 monster_id = 15;</code>
     * @return whether the monsterId field is set
     */
    public boolean hasMonsterId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 monster_id = 15;</code>
     * @return this
     */
    public CellMonster clearMonsterId() {
      bitField0_ &= ~0x00000002;
      monsterId = 0;
      return this;
    }

    /**
     * <code>optional uint32 monster_id = 15;</code>
     * @return the monsterId
     */
    public int getMonsterId() {
      return monsterId;
    }

    /**
     * <code>optional uint32 monster_id = 15;</code>
     * @param value the monsterId to set
     * @return this
     */
    public CellMonster setMonsterId(final int value) {
      bitField0_ |= 0x00000002;
      monsterId = value;
      return this;
    }

    @Override
    public CellMonster copyFrom(final CellMonster other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bossDecayId = other.bossDecayId;
        monsterId = other.monsterId;
      }
      return this;
    }

    @Override
    public CellMonster mergeFrom(final CellMonster other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBossDecayId()) {
        setBossDecayId(other.bossDecayId);
      }
      if (other.hasMonsterId()) {
        setMonsterId(other.monsterId);
      }
      return this;
    }

    @Override
    public CellMonster clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bossDecayId = 0;
      monsterId = 0;
      return this;
    }

    @Override
    public CellMonster clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof CellMonster)) {
        return false;
      }
      CellMonster other = (CellMonster) o;
      return bitField0_ == other.bitField0_
        && (!hasBossDecayId() || bossDecayId == other.bossDecayId)
        && (!hasMonsterId() || monsterId == other.monsterId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(bossDecayId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(monsterId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bossDecayId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(monsterId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public CellMonster mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // bossDecayId
            bossDecayId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // monsterId
            monsterId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.bossDecayId, bossDecayId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.monsterId, monsterId);
      }
      output.endObject();
    }

    @Override
    public CellMonster mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -278154680:
          case 1788381266: {
            if (input.isAtField(FieldNames.bossDecayId)) {
              if (!input.trySkipNullValue()) {
                bossDecayId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1316830571:
          case 2127946656: {
            if (input.isAtField(FieldNames.monsterId)) {
              if (!input.trySkipNullValue()) {
                monsterId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public CellMonster clone() {
      return new CellMonster().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static CellMonster parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new CellMonster(), data).checkInitialized();
    }

    public static CellMonster parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonster(), input).checkInitialized();
    }

    public static CellMonster parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellMonster(), input).checkInitialized();
    }

    /**
     * @return factory for creating CellMonster messages
     */
    public static MessageFactory<CellMonster> getFactory() {
      return CellMonsterFactory.INSTANCE;
    }

    private enum CellMonsterFactory implements MessageFactory<CellMonster> {
      INSTANCE;

      @Override
      public CellMonster create() {
        return CellMonster.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bossDecayId = FieldName.forField("bossDecayId", "boss_decay_id");

      static final FieldName monsterId = FieldName.forField("monsterId", "monster_id");
    }
  }
}
