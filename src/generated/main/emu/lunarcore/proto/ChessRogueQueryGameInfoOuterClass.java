// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueQueryGameInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueQueryGameInfo}
   */
  public static final class ChessRogueQueryGameInfo extends ProtoMessage<ChessRogueQueryGameInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 rogue_sub_mode = 7;</code>
     */
    private int rogueSubMode;

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     */
    private final RepeatedMessage<RogueGameInfoOuterClass.RogueGameInfo> rogueCurrentGameInfo = RepeatedMessage.newEmptyInstance(RogueGameInfoOuterClass.RogueGameInfo.getFactory());

    private ChessRogueQueryGameInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueQueryGameInfo}
     */
    public static ChessRogueQueryGameInfo newInstance() {
      return new ChessRogueQueryGameInfo();
    }

    /**
     * <code>optional uint32 rogue_sub_mode = 7;</code>
     * @return whether the rogueSubMode field is set
     */
    public boolean hasRogueSubMode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 rogue_sub_mode = 7;</code>
     * @return this
     */
    public ChessRogueQueryGameInfo clearRogueSubMode() {
      bitField0_ &= ~0x00000001;
      rogueSubMode = 0;
      return this;
    }

    /**
     * <code>optional uint32 rogue_sub_mode = 7;</code>
     * @return the rogueSubMode
     */
    public int getRogueSubMode() {
      return rogueSubMode;
    }

    /**
     * <code>optional uint32 rogue_sub_mode = 7;</code>
     * @param value the rogueSubMode to set
     * @return this
     */
    public ChessRogueQueryGameInfo setRogueSubMode(final int value) {
      bitField0_ |= 0x00000001;
      rogueSubMode = value;
      return this;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     * @return whether the rogueCurrentGameInfo field is set
     */
    public boolean hasRogueCurrentGameInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     * @return this
     */
    public ChessRogueQueryGameInfo clearRogueCurrentGameInfo() {
      bitField0_ &= ~0x00000002;
      rogueCurrentGameInfo.clear();
      return this;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueCurrentGameInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueGameInfoOuterClass.RogueGameInfo> getRogueCurrentGameInfo() {
      return rogueCurrentGameInfo;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueGameInfoOuterClass.RogueGameInfo> getMutableRogueCurrentGameInfo() {
      bitField0_ |= 0x00000002;
      return rogueCurrentGameInfo;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     * @param value the rogueCurrentGameInfo to add
     * @return this
     */
    public ChessRogueQueryGameInfo addRogueCurrentGameInfo(
        final RogueGameInfoOuterClass.RogueGameInfo value) {
      bitField0_ |= 0x00000002;
      rogueCurrentGameInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueGameInfo rogue_current_game_info = 12;</code>
     * @param values the rogueCurrentGameInfo to add
     * @return this
     */
    public ChessRogueQueryGameInfo addAllRogueCurrentGameInfo(
        final RogueGameInfoOuterClass.RogueGameInfo... values) {
      bitField0_ |= 0x00000002;
      rogueCurrentGameInfo.addAll(values);
      return this;
    }

    @Override
    public ChessRogueQueryGameInfo copyFrom(final ChessRogueQueryGameInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        rogueSubMode = other.rogueSubMode;
        rogueCurrentGameInfo.copyFrom(other.rogueCurrentGameInfo);
      }
      return this;
    }

    @Override
    public ChessRogueQueryGameInfo mergeFrom(final ChessRogueQueryGameInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRogueSubMode()) {
        setRogueSubMode(other.rogueSubMode);
      }
      if (other.hasRogueCurrentGameInfo()) {
        getMutableRogueCurrentGameInfo().addAll(other.rogueCurrentGameInfo);
      }
      return this;
    }

    @Override
    public ChessRogueQueryGameInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueSubMode = 0;
      rogueCurrentGameInfo.clear();
      return this;
    }

    @Override
    public ChessRogueQueryGameInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueCurrentGameInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueQueryGameInfo)) {
        return false;
      }
      ChessRogueQueryGameInfo other = (ChessRogueQueryGameInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasRogueSubMode() || rogueSubMode == other.rogueSubMode)
        && (!hasRogueCurrentGameInfo() || rogueCurrentGameInfo.equals(other.rogueCurrentGameInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(rogueSubMode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < rogueCurrentGameInfo.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(rogueCurrentGameInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rogueSubMode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * rogueCurrentGameInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueCurrentGameInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueQueryGameInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // rogueSubMode
            rogueSubMode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // rogueCurrentGameInfo
            tag = input.readRepeatedMessage(rogueCurrentGameInfo, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.rogueSubMode, rogueSubMode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.rogueCurrentGameInfo, rogueCurrentGameInfo);
      }
      output.endObject();
    }

    @Override
    public ChessRogueQueryGameInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -121307959:
          case 251315463: {
            if (input.isAtField(FieldNames.rogueSubMode)) {
              if (!input.trySkipNullValue()) {
                rogueSubMode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 658439967:
          case 122933872: {
            if (input.isAtField(FieldNames.rogueCurrentGameInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(rogueCurrentGameInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueQueryGameInfo clone() {
      return new ChessRogueQueryGameInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueQueryGameInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryGameInfo(), data).checkInitialized();
    }

    public static ChessRogueQueryGameInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryGameInfo(), input).checkInitialized();
    }

    public static ChessRogueQueryGameInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQueryGameInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueQueryGameInfo messages
     */
    public static MessageFactory<ChessRogueQueryGameInfo> getFactory() {
      return ChessRogueQueryGameInfoFactory.INSTANCE;
    }

    private enum ChessRogueQueryGameInfoFactory implements MessageFactory<ChessRogueQueryGameInfo> {
      INSTANCE;

      @Override
      public ChessRogueQueryGameInfo create() {
        return ChessRogueQueryGameInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName rogueSubMode = FieldName.forField("rogueSubMode", "rogue_sub_mode");

      static final FieldName rogueCurrentGameInfo = FieldName.forField("rogueCurrentGameInfo", "rogue_current_game_info");
    }
  }
}
