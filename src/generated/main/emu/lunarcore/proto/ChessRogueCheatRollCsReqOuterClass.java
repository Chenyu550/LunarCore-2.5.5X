// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueCheatRollCsReqOuterClass {
  /**
   * Protobuf type {@code ChessRogueCheatRollCsReq}
   */
  public static final class ChessRogueCheatRollCsReq extends ProtoMessage<ChessRogueCheatRollCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 surface_id = 9;</code>
     */
    private int surfaceId;

    /**
     * <code>optional uint32 OHCBBBKBIPJ = 15;</code>
     */
    private int oHCBBBKBIPJ;

    private ChessRogueCheatRollCsReq() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueCheatRollCsReq}
     */
    public static ChessRogueCheatRollCsReq newInstance() {
      return new ChessRogueCheatRollCsReq();
    }

    /**
     * <code>optional uint32 surface_id = 9;</code>
     * @return whether the surfaceId field is set
     */
    public boolean hasSurfaceId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 surface_id = 9;</code>
     * @return this
     */
    public ChessRogueCheatRollCsReq clearSurfaceId() {
      bitField0_ &= ~0x00000001;
      surfaceId = 0;
      return this;
    }

    /**
     * <code>optional uint32 surface_id = 9;</code>
     * @return the surfaceId
     */
    public int getSurfaceId() {
      return surfaceId;
    }

    /**
     * <code>optional uint32 surface_id = 9;</code>
     * @param value the surfaceId to set
     * @return this
     */
    public ChessRogueCheatRollCsReq setSurfaceId(final int value) {
      bitField0_ |= 0x00000001;
      surfaceId = value;
      return this;
    }

    /**
     * <code>optional uint32 OHCBBBKBIPJ = 15;</code>
     * @return whether the oHCBBBKBIPJ field is set
     */
    public boolean hasOHCBBBKBIPJ() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OHCBBBKBIPJ = 15;</code>
     * @return this
     */
    public ChessRogueCheatRollCsReq clearOHCBBBKBIPJ() {
      bitField0_ &= ~0x00000002;
      oHCBBBKBIPJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 OHCBBBKBIPJ = 15;</code>
     * @return the oHCBBBKBIPJ
     */
    public int getOHCBBBKBIPJ() {
      return oHCBBBKBIPJ;
    }

    /**
     * <code>optional uint32 OHCBBBKBIPJ = 15;</code>
     * @param value the oHCBBBKBIPJ to set
     * @return this
     */
    public ChessRogueCheatRollCsReq setOHCBBBKBIPJ(final int value) {
      bitField0_ |= 0x00000002;
      oHCBBBKBIPJ = value;
      return this;
    }

    @Override
    public ChessRogueCheatRollCsReq copyFrom(final ChessRogueCheatRollCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        surfaceId = other.surfaceId;
        oHCBBBKBIPJ = other.oHCBBBKBIPJ;
      }
      return this;
    }

    @Override
    public ChessRogueCheatRollCsReq mergeFrom(final ChessRogueCheatRollCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSurfaceId()) {
        setSurfaceId(other.surfaceId);
      }
      if (other.hasOHCBBBKBIPJ()) {
        setOHCBBBKBIPJ(other.oHCBBBKBIPJ);
      }
      return this;
    }

    @Override
    public ChessRogueCheatRollCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      surfaceId = 0;
      oHCBBBKBIPJ = 0;
      return this;
    }

    @Override
    public ChessRogueCheatRollCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueCheatRollCsReq)) {
        return false;
      }
      ChessRogueCheatRollCsReq other = (ChessRogueCheatRollCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasSurfaceId() || surfaceId == other.surfaceId)
        && (!hasOHCBBBKBIPJ() || oHCBBBKBIPJ == other.oHCBBBKBIPJ);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(surfaceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(oHCBBBKBIPJ);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(surfaceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oHCBBBKBIPJ);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueCheatRollCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // surfaceId
            surfaceId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // oHCBBBKBIPJ
            oHCBBBKBIPJ = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.surfaceId, surfaceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oHCBBBKBIPJ, oHCBBBKBIPJ);
      }
      output.endObject();
    }

    @Override
    public ChessRogueCheatRollCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1455521448:
          case -2123453971: {
            if (input.isAtField(FieldNames.surfaceId)) {
              if (!input.trySkipNullValue()) {
                surfaceId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1433188372: {
            if (input.isAtField(FieldNames.oHCBBBKBIPJ)) {
              if (!input.trySkipNullValue()) {
                oHCBBBKBIPJ = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueCheatRollCsReq clone() {
      return new ChessRogueCheatRollCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueCheatRollCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueCheatRollCsReq(), data).checkInitialized();
    }

    public static ChessRogueCheatRollCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueCheatRollCsReq(), input).checkInitialized();
    }

    public static ChessRogueCheatRollCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueCheatRollCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueCheatRollCsReq messages
     */
    public static MessageFactory<ChessRogueCheatRollCsReq> getFactory() {
      return ChessRogueCheatRollCsReqFactory.INSTANCE;
    }

    private enum ChessRogueCheatRollCsReqFactory implements MessageFactory<ChessRogueCheatRollCsReq> {
      INSTANCE;

      @Override
      public ChessRogueCheatRollCsReq create() {
        return ChessRogueCheatRollCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName surfaceId = FieldName.forField("surfaceId", "surface_id");

      static final FieldName oHCBBBKBIPJ = FieldName.forField("OHCBBBKBIPJ");
    }
  }
}
