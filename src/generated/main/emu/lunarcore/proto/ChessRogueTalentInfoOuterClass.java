// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueTalentInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueTalentInfo}
   */
  public static final class ChessRogueTalentInfo extends ProtoMessage<ChessRogueTalentInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 GDNBONNPGCN = 10;</code>
     */
    private int gDNBONNPGCN;

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     */
    private final RogueTalentInfoListOuterClass.RogueTalentInfoList rogueTalentInfoList = RogueTalentInfoListOuterClass.RogueTalentInfoList.newInstance();

    private ChessRogueTalentInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueTalentInfo}
     */
    public static ChessRogueTalentInfo newInstance() {
      return new ChessRogueTalentInfo();
    }

    /**
     * <code>optional uint32 GDNBONNPGCN = 10;</code>
     * @return whether the gDNBONNPGCN field is set
     */
    public boolean hasGDNBONNPGCN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 GDNBONNPGCN = 10;</code>
     * @return this
     */
    public ChessRogueTalentInfo clearGDNBONNPGCN() {
      bitField0_ &= ~0x00000001;
      gDNBONNPGCN = 0;
      return this;
    }

    /**
     * <code>optional uint32 GDNBONNPGCN = 10;</code>
     * @return the gDNBONNPGCN
     */
    public int getGDNBONNPGCN() {
      return gDNBONNPGCN;
    }

    /**
     * <code>optional uint32 GDNBONNPGCN = 10;</code>
     * @param value the gDNBONNPGCN to set
     * @return this
     */
    public ChessRogueTalentInfo setGDNBONNPGCN(final int value) {
      bitField0_ |= 0x00000001;
      gDNBONNPGCN = value;
      return this;
    }

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     * @return whether the rogueTalentInfoList field is set
     */
    public boolean hasRogueTalentInfoList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     * @return this
     */
    public ChessRogueTalentInfo clearRogueTalentInfoList() {
      bitField0_ &= ~0x00000002;
      rogueTalentInfoList.clear();
      return this;
    }

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueTalentInfoList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueTalentInfoListOuterClass.RogueTalentInfoList getRogueTalentInfoList() {
      return rogueTalentInfoList;
    }

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueTalentInfoListOuterClass.RogueTalentInfoList getMutableRogueTalentInfoList() {
      bitField0_ |= 0x00000002;
      return rogueTalentInfoList;
    }

    /**
     * <code>optional .RogueTalentInfoList rogue_talent_info_list = 1;</code>
     * @param value the rogueTalentInfoList to set
     * @return this
     */
    public ChessRogueTalentInfo setRogueTalentInfoList(
        final RogueTalentInfoListOuterClass.RogueTalentInfoList value) {
      bitField0_ |= 0x00000002;
      rogueTalentInfoList.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueTalentInfo copyFrom(final ChessRogueTalentInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        gDNBONNPGCN = other.gDNBONNPGCN;
        rogueTalentInfoList.copyFrom(other.rogueTalentInfoList);
      }
      return this;
    }

    @Override
    public ChessRogueTalentInfo mergeFrom(final ChessRogueTalentInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGDNBONNPGCN()) {
        setGDNBONNPGCN(other.gDNBONNPGCN);
      }
      if (other.hasRogueTalentInfoList()) {
        getMutableRogueTalentInfoList().mergeFrom(other.rogueTalentInfoList);
      }
      return this;
    }

    @Override
    public ChessRogueTalentInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gDNBONNPGCN = 0;
      rogueTalentInfoList.clear();
      return this;
    }

    @Override
    public ChessRogueTalentInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueTalentInfoList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueTalentInfo)) {
        return false;
      }
      ChessRogueTalentInfo other = (ChessRogueTalentInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasGDNBONNPGCN() || gDNBONNPGCN == other.gDNBONNPGCN)
        && (!hasRogueTalentInfoList() || rogueTalentInfoList.equals(other.rogueTalentInfoList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(gDNBONNPGCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(rogueTalentInfoList);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gDNBONNPGCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueTalentInfoList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueTalentInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // gDNBONNPGCN
            gDNBONNPGCN = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // rogueTalentInfoList
            input.readMessage(rogueTalentInfoList);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.gDNBONNPGCN, gDNBONNPGCN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.rogueTalentInfoList, rogueTalentInfoList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueTalentInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 7202560: {
            if (input.isAtField(FieldNames.gDNBONNPGCN)) {
              if (!input.trySkipNullValue()) {
                gDNBONNPGCN = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2135879666:
          case 1737378241: {
            if (input.isAtField(FieldNames.rogueTalentInfoList)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueTalentInfoList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueTalentInfo clone() {
      return new ChessRogueTalentInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueTalentInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueTalentInfo(), data).checkInitialized();
    }

    public static ChessRogueTalentInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueTalentInfo(), input).checkInitialized();
    }

    public static ChessRogueTalentInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueTalentInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueTalentInfo messages
     */
    public static MessageFactory<ChessRogueTalentInfo> getFactory() {
      return ChessRogueTalentInfoFactory.INSTANCE;
    }

    private enum ChessRogueTalentInfoFactory implements MessageFactory<ChessRogueTalentInfo> {
      INSTANCE;

      @Override
      public ChessRogueTalentInfo create() {
        return ChessRogueTalentInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName gDNBONNPGCN = FieldName.forField("GDNBONNPGCN");

      static final FieldName rogueTalentInfoList = FieldName.forField("rogueTalentInfoList", "rogue_talent_info_list");
    }
  }
}
