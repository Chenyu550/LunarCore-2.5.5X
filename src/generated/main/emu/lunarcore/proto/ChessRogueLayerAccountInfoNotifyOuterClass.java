// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueLayerAccountInfoNotifyOuterClass {
  /**
   * Protobuf type {@code ChessRogueLayerAccountInfoNotify}
   */
  public static final class ChessRogueLayerAccountInfoNotify extends ProtoMessage<ChessRogueLayerAccountInfoNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 difficulty_level = 10;</code>
     */
    private int difficultyLevel;

    /**
     * <code>optional uint32 layer_id = 14;</code>
     */
    private int layerId;

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     */
    private final ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo finishInfo = ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo.newInstance();

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     */
    private final ChessRogueLevelInfoOuterClass.ChessRogueLevelInfo levelInfo = ChessRogueLevelInfoOuterClass.ChessRogueLevelInfo.newInstance();

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     */
    private final RepeatedInt hHMFIDKFNNI = RepeatedInt.newEmptyInstance();

    private ChessRogueLayerAccountInfoNotify() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueLayerAccountInfoNotify}
     */
    public static ChessRogueLayerAccountInfoNotify newInstance() {
      return new ChessRogueLayerAccountInfoNotify();
    }

    /**
     * <code>optional uint32 difficulty_level = 10;</code>
     * @return whether the difficultyLevel field is set
     */
    public boolean hasDifficultyLevel() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 difficulty_level = 10;</code>
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify clearDifficultyLevel() {
      bitField0_ &= ~0x00000001;
      difficultyLevel = 0;
      return this;
    }

    /**
     * <code>optional uint32 difficulty_level = 10;</code>
     * @return the difficultyLevel
     */
    public int getDifficultyLevel() {
      return difficultyLevel;
    }

    /**
     * <code>optional uint32 difficulty_level = 10;</code>
     * @param value the difficultyLevel to set
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify setDifficultyLevel(final int value) {
      bitField0_ |= 0x00000001;
      difficultyLevel = value;
      return this;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return whether the layerId field is set
     */
    public boolean hasLayerId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify clearLayerId() {
      bitField0_ &= ~0x00000002;
      layerId = 0;
      return this;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @return the layerId
     */
    public int getLayerId() {
      return layerId;
    }

    /**
     * <code>optional uint32 layer_id = 14;</code>
     * @param value the layerId to set
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify setLayerId(final int value) {
      bitField0_ |= 0x00000002;
      layerId = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     * @return whether the finishInfo field is set
     */
    public boolean hasFinishInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify clearFinishInfo() {
      bitField0_ &= ~0x00000004;
      finishInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFinishInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo getFinishInfo() {
      return finishInfo;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo getMutableFinishInfo() {
      bitField0_ |= 0x00000004;
      return finishInfo;
    }

    /**
     * <code>optional .ChessRogueFinishInfo finish_info = 11;</code>
     * @param value the finishInfo to set
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify setFinishInfo(
        final ChessRogueFinishInfoOuterClass.ChessRogueFinishInfo value) {
      bitField0_ |= 0x00000004;
      finishInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     * @return whether the levelInfo field is set
     */
    public boolean hasLevelInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify clearLevelInfo() {
      bitField0_ &= ~0x00000008;
      levelInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLevelInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueLevelInfoOuterClass.ChessRogueLevelInfo getLevelInfo() {
      return levelInfo;
    }

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueLevelInfoOuterClass.ChessRogueLevelInfo getMutableLevelInfo() {
      bitField0_ |= 0x00000008;
      return levelInfo;
    }

    /**
     * <code>optional .ChessRogueLevelInfo level_info = 12;</code>
     * @param value the levelInfo to set
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify setLevelInfo(
        final ChessRogueLevelInfoOuterClass.ChessRogueLevelInfo value) {
      bitField0_ |= 0x00000008;
      levelInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     * @return whether the hHMFIDKFNNI field is set
     */
    public boolean hasHHMFIDKFNNI() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify clearHHMFIDKFNNI() {
      bitField0_ &= ~0x00000010;
      hHMFIDKFNNI.clear();
      return this;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHHMFIDKFNNI()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getHHMFIDKFNNI() {
      return hHMFIDKFNNI;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableHHMFIDKFNNI() {
      bitField0_ |= 0x00000010;
      return hHMFIDKFNNI;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     * @param value the hHMFIDKFNNI to add
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify addHHMFIDKFNNI(final int value) {
      bitField0_ |= 0x00000010;
      hHMFIDKFNNI.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 HHMFIDKFNNI = 5;</code>
     * @param values the hHMFIDKFNNI to add
     * @return this
     */
    public ChessRogueLayerAccountInfoNotify addAllHHMFIDKFNNI(final int... values) {
      bitField0_ |= 0x00000010;
      hHMFIDKFNNI.addAll(values);
      return this;
    }

    @Override
    public ChessRogueLayerAccountInfoNotify copyFrom(final ChessRogueLayerAccountInfoNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        difficultyLevel = other.difficultyLevel;
        layerId = other.layerId;
        finishInfo.copyFrom(other.finishInfo);
        levelInfo.copyFrom(other.levelInfo);
        hHMFIDKFNNI.copyFrom(other.hHMFIDKFNNI);
      }
      return this;
    }

    @Override
    public ChessRogueLayerAccountInfoNotify mergeFrom(
        final ChessRogueLayerAccountInfoNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDifficultyLevel()) {
        setDifficultyLevel(other.difficultyLevel);
      }
      if (other.hasLayerId()) {
        setLayerId(other.layerId);
      }
      if (other.hasFinishInfo()) {
        getMutableFinishInfo().mergeFrom(other.finishInfo);
      }
      if (other.hasLevelInfo()) {
        getMutableLevelInfo().mergeFrom(other.levelInfo);
      }
      if (other.hasHHMFIDKFNNI()) {
        getMutableHHMFIDKFNNI().addAll(other.hHMFIDKFNNI);
      }
      return this;
    }

    @Override
    public ChessRogueLayerAccountInfoNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      difficultyLevel = 0;
      layerId = 0;
      finishInfo.clear();
      levelInfo.clear();
      hHMFIDKFNNI.clear();
      return this;
    }

    @Override
    public ChessRogueLayerAccountInfoNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      finishInfo.clearQuick();
      levelInfo.clearQuick();
      hHMFIDKFNNI.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueLayerAccountInfoNotify)) {
        return false;
      }
      ChessRogueLayerAccountInfoNotify other = (ChessRogueLayerAccountInfoNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasDifficultyLevel() || difficultyLevel == other.difficultyLevel)
        && (!hasLayerId() || layerId == other.layerId)
        && (!hasFinishInfo() || finishInfo.equals(other.finishInfo))
        && (!hasLevelInfo() || levelInfo.equals(other.levelInfo))
        && (!hasHHMFIDKFNNI() || hHMFIDKFNNI.equals(other.hHMFIDKFNNI));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(difficultyLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(layerId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 90);
        output.writeMessageNoTag(finishInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(levelInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < hHMFIDKFNNI.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(hHMFIDKFNNI.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(difficultyLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(layerId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(finishInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(levelInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * hHMFIDKFNNI.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(hHMFIDKFNNI);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueLayerAccountInfoNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // difficultyLevel
            difficultyLevel = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // layerId
            layerId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // finishInfo
            input.readMessage(finishInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // levelInfo
            input.readMessage(levelInfo);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // hHMFIDKFNNI [packed=true]
            input.readPackedUInt32(hHMFIDKFNNI, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // hHMFIDKFNNI [packed=false]
            tag = input.readRepeatedUInt32(hHMFIDKFNNI, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.difficultyLevel, difficultyLevel);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.layerId, layerId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.finishInfo, finishInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.levelInfo, levelInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.hHMFIDKFNNI, hHMFIDKFNNI);
      }
      output.endObject();
    }

    @Override
    public ChessRogueLayerAccountInfoNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1034989431:
          case -1469972992: {
            if (input.isAtField(FieldNames.difficultyLevel)) {
              if (!input.trySkipNullValue()) {
                difficultyLevel = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -41955764:
          case -1300607287: {
            if (input.isAtField(FieldNames.layerId)) {
              if (!input.trySkipNullValue()) {
                layerId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1151198177:
          case 1347581146: {
            if (input.isAtField(FieldNames.finishInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(finishInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1656548782:
          case 206771337: {
            if (input.isAtField(FieldNames.levelInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(levelInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 588517978: {
            if (input.isAtField(FieldNames.hHMFIDKFNNI)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(hHMFIDKFNNI);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueLayerAccountInfoNotify clone() {
      return new ChessRogueLayerAccountInfoNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueLayerAccountInfoNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueLayerAccountInfoNotify(), data).checkInitialized();
    }

    public static ChessRogueLayerAccountInfoNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChessRogueLayerAccountInfoNotify(), input).checkInitialized();
    }

    public static ChessRogueLayerAccountInfoNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChessRogueLayerAccountInfoNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueLayerAccountInfoNotify messages
     */
    public static MessageFactory<ChessRogueLayerAccountInfoNotify> getFactory() {
      return ChessRogueLayerAccountInfoNotifyFactory.INSTANCE;
    }

    private enum ChessRogueLayerAccountInfoNotifyFactory implements MessageFactory<ChessRogueLayerAccountInfoNotify> {
      INSTANCE;

      @Override
      public ChessRogueLayerAccountInfoNotify create() {
        return ChessRogueLayerAccountInfoNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName difficultyLevel = FieldName.forField("difficultyLevel", "difficulty_level");

      static final FieldName layerId = FieldName.forField("layerId", "layer_id");

      static final FieldName finishInfo = FieldName.forField("finishInfo", "finish_info");

      static final FieldName levelInfo = FieldName.forField("levelInfo", "level_info");

      static final FieldName hHMFIDKFNNI = FieldName.forField("HHMFIDKFNNI");
    }
  }
}
