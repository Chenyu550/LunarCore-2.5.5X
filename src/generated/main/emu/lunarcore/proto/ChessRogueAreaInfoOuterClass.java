// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueAreaInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueAreaInfo}
   */
  public static final class ChessRogueAreaInfo extends ProtoMessage<ChessRogueAreaInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_id = 12;</code>
     */
    private int curId;

    /**
     * <code>optional uint32 cur_board_id = 15;</code>
     */
    private int curBoardId;

    /**
     * <code>optional .ChessRogueBoardCellStatus layer_status = 13;</code>
     */
    private int layerStatus;

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     */
    private final JDIPIHPMEKNOuterClass.JDIPIHPMEKN oJNCMJDAABJ = JDIPIHPMEKNOuterClass.JDIPIHPMEKN.newInstance();

    /**
     * <code>optional .CellInfo cell = 2;</code>
     */
    private final CellInfoOuterClass.CellInfo cell = CellInfoOuterClass.CellInfo.newInstance();

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     */
    private final RepeatedInt allowedSelectCellIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     */
    private final RepeatedMessage<ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo> historyCell = RepeatedMessage.newEmptyInstance(ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo.getFactory());

    private ChessRogueAreaInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueAreaInfo}
     */
    public static ChessRogueAreaInfo newInstance() {
      return new ChessRogueAreaInfo();
    }

    /**
     * <code>optional uint32 cur_id = 12;</code>
     * @return whether the curId field is set
     */
    public boolean hasCurId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_id = 12;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearCurId() {
      bitField0_ &= ~0x00000001;
      curId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_id = 12;</code>
     * @return the curId
     */
    public int getCurId() {
      return curId;
    }

    /**
     * <code>optional uint32 cur_id = 12;</code>
     * @param value the curId to set
     * @return this
     */
    public ChessRogueAreaInfo setCurId(final int value) {
      bitField0_ |= 0x00000001;
      curId = value;
      return this;
    }

    /**
     * <code>optional uint32 cur_board_id = 15;</code>
     * @return whether the curBoardId field is set
     */
    public boolean hasCurBoardId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 cur_board_id = 15;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearCurBoardId() {
      bitField0_ &= ~0x00000002;
      curBoardId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_board_id = 15;</code>
     * @return the curBoardId
     */
    public int getCurBoardId() {
      return curBoardId;
    }

    /**
     * <code>optional uint32 cur_board_id = 15;</code>
     * @param value the curBoardId to set
     * @return this
     */
    public ChessRogueAreaInfo setCurBoardId(final int value) {
      bitField0_ |= 0x00000002;
      curBoardId = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueBoardCellStatus layer_status = 13;</code>
     * @return whether the layerStatus field is set
     */
    public boolean hasLayerStatus() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChessRogueBoardCellStatus layer_status = 13;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearLayerStatus() {
      bitField0_ &= ~0x00000004;
      layerStatus = 0;
      return this;
    }

    /**
     * <code>optional .ChessRogueBoardCellStatus layer_status = 13;</code>
     * @return the layerStatus
     */
    public ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus getLayerStatus() {
      return ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus.forNumber(layerStatus);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link ChessRogueAreaInfo#getLayerStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getLayerStatusValue() {
      return layerStatus;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus}. Setting an invalid value
     * can cause {@link ChessRogueAreaInfo#getLayerStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public ChessRogueAreaInfo setLayerStatusValue(final int value) {
      bitField0_ |= 0x00000004;
      layerStatus = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueBoardCellStatus layer_status = 13;</code>
     * @param value the layerStatus to set
     * @return this
     */
    public ChessRogueAreaInfo setLayerStatus(
        final ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus value) {
      bitField0_ |= 0x00000004;
      layerStatus = value.getNumber();
      return this;
    }

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     * @return whether the oJNCMJDAABJ field is set
     */
    public boolean hasOJNCMJDAABJ() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearOJNCMJDAABJ() {
      bitField0_ &= ~0x00000008;
      oJNCMJDAABJ.clear();
      return this;
    }

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableOJNCMJDAABJ()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public JDIPIHPMEKNOuterClass.JDIPIHPMEKN getOJNCMJDAABJ() {
      return oJNCMJDAABJ;
    }

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public JDIPIHPMEKNOuterClass.JDIPIHPMEKN getMutableOJNCMJDAABJ() {
      bitField0_ |= 0x00000008;
      return oJNCMJDAABJ;
    }

    /**
     * <code>optional .JDIPIHPMEKN OJNCMJDAABJ = 1;</code>
     * @param value the oJNCMJDAABJ to set
     * @return this
     */
    public ChessRogueAreaInfo setOJNCMJDAABJ(final JDIPIHPMEKNOuterClass.JDIPIHPMEKN value) {
      bitField0_ |= 0x00000008;
      oJNCMJDAABJ.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .CellInfo cell = 2;</code>
     * @return whether the cell field is set
     */
    public boolean hasCell() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .CellInfo cell = 2;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearCell() {
      bitField0_ &= ~0x00000010;
      cell.clear();
      return this;
    }

    /**
     * <code>optional .CellInfo cell = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCell()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellInfoOuterClass.CellInfo getCell() {
      return cell;
    }

    /**
     * <code>optional .CellInfo cell = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellInfoOuterClass.CellInfo getMutableCell() {
      bitField0_ |= 0x00000010;
      return cell;
    }

    /**
     * <code>optional .CellInfo cell = 2;</code>
     * @param value the cell to set
     * @return this
     */
    public ChessRogueAreaInfo setCell(final CellInfoOuterClass.CellInfo value) {
      bitField0_ |= 0x00000010;
      cell.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     * @return whether the allowedSelectCellIdList field is set
     */
    public boolean hasAllowedSelectCellIdList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearAllowedSelectCellIdList() {
      bitField0_ &= ~0x00000020;
      allowedSelectCellIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAllowedSelectCellIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAllowedSelectCellIdList() {
      return allowedSelectCellIdList;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAllowedSelectCellIdList() {
      bitField0_ |= 0x00000020;
      return allowedSelectCellIdList;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     * @param value the allowedSelectCellIdList to add
     * @return this
     */
    public ChessRogueAreaInfo addAllowedSelectCellIdList(final int value) {
      bitField0_ |= 0x00000020;
      allowedSelectCellIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 allowed_select_cell_id_list = 10;</code>
     * @param values the allowedSelectCellIdList to add
     * @return this
     */
    public ChessRogueAreaInfo addAllAllowedSelectCellIdList(final int... values) {
      bitField0_ |= 0x00000020;
      allowedSelectCellIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     * @return whether the historyCell field is set
     */
    public boolean hasHistoryCell() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     * @return this
     */
    public ChessRogueAreaInfo clearHistoryCell() {
      bitField0_ &= ~0x00000040;
      historyCell.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHistoryCell()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo> getHistoryCell(
        ) {
      return historyCell;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo> getMutableHistoryCell(
        ) {
      bitField0_ |= 0x00000040;
      return historyCell;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     * @param value the historyCell to add
     * @return this
     */
    public ChessRogueAreaInfo addHistoryCell(
        final ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo value) {
      bitField0_ |= 0x00000040;
      historyCell.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueHistoryCellInfo history_cell = 7;</code>
     * @param values the historyCell to add
     * @return this
     */
    public ChessRogueAreaInfo addAllHistoryCell(
        final ChessRogueHistoryCellInfoOuterClass.ChessRogueHistoryCellInfo... values) {
      bitField0_ |= 0x00000040;
      historyCell.addAll(values);
      return this;
    }

    @Override
    public ChessRogueAreaInfo copyFrom(final ChessRogueAreaInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curId = other.curId;
        curBoardId = other.curBoardId;
        layerStatus = other.layerStatus;
        oJNCMJDAABJ.copyFrom(other.oJNCMJDAABJ);
        cell.copyFrom(other.cell);
        allowedSelectCellIdList.copyFrom(other.allowedSelectCellIdList);
        historyCell.copyFrom(other.historyCell);
      }
      return this;
    }

    @Override
    public ChessRogueAreaInfo mergeFrom(final ChessRogueAreaInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurId()) {
        setCurId(other.curId);
      }
      if (other.hasCurBoardId()) {
        setCurBoardId(other.curBoardId);
      }
      if (other.hasLayerStatus()) {
        setLayerStatusValue(other.layerStatus);
      }
      if (other.hasOJNCMJDAABJ()) {
        getMutableOJNCMJDAABJ().mergeFrom(other.oJNCMJDAABJ);
      }
      if (other.hasCell()) {
        getMutableCell().mergeFrom(other.cell);
      }
      if (other.hasAllowedSelectCellIdList()) {
        getMutableAllowedSelectCellIdList().addAll(other.allowedSelectCellIdList);
      }
      if (other.hasHistoryCell()) {
        getMutableHistoryCell().addAll(other.historyCell);
      }
      return this;
    }

    @Override
    public ChessRogueAreaInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curId = 0;
      curBoardId = 0;
      layerStatus = 0;
      oJNCMJDAABJ.clear();
      cell.clear();
      allowedSelectCellIdList.clear();
      historyCell.clear();
      return this;
    }

    @Override
    public ChessRogueAreaInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      oJNCMJDAABJ.clearQuick();
      cell.clearQuick();
      allowedSelectCellIdList.clear();
      historyCell.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueAreaInfo)) {
        return false;
      }
      ChessRogueAreaInfo other = (ChessRogueAreaInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasCurId() || curId == other.curId)
        && (!hasCurBoardId() || curBoardId == other.curBoardId)
        && (!hasLayerStatus() || layerStatus == other.layerStatus)
        && (!hasOJNCMJDAABJ() || oJNCMJDAABJ.equals(other.oJNCMJDAABJ))
        && (!hasCell() || cell.equals(other.cell))
        && (!hasAllowedSelectCellIdList() || allowedSelectCellIdList.equals(other.allowedSelectCellIdList))
        && (!hasHistoryCell() || historyCell.equals(other.historyCell));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(curId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(curBoardId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 104);
        output.writeEnumNoTag(layerStatus);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(oJNCMJDAABJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(cell);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < allowedSelectCellIdList.length(); i++) {
          output.writeRawByte((byte) 80);
          output.writeUInt32NoTag(allowedSelectCellIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < historyCell.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(historyCell.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curBoardId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(layerStatus);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(oJNCMJDAABJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(cell);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * allowedSelectCellIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(allowedSelectCellIdList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * historyCell.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(historyCell);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueAreaInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 96: {
            // curId
            curId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // curBoardId
            curBoardId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // layerStatus
            final int value = input.readInt32();
            if (ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus.forNumber(value) != null) {
              layerStatus = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // oJNCMJDAABJ
            input.readMessage(oJNCMJDAABJ);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // cell
            input.readMessage(cell);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // allowedSelectCellIdList [packed=true]
            input.readPackedUInt32(allowedSelectCellIdList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // historyCell
            tag = input.readRepeatedMessage(historyCell, tag);
            bitField0_ |= 0x00000040;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 80: {
            // allowedSelectCellIdList [packed=false]
            tag = input.readRepeatedUInt32(allowedSelectCellIdList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curId, curId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.curBoardId, curBoardId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.layerStatus, layerStatus, ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus.converter());
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.oJNCMJDAABJ, oJNCMJDAABJ);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.cell, cell);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.allowedSelectCellIdList, allowedSelectCellIdList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedMessage(FieldNames.historyCell, historyCell);
      }
      output.endObject();
    }

    @Override
    public ChessRogueAreaInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 95026043:
          case -1349138566: {
            if (input.isAtField(FieldNames.curId)) {
              if (!input.trySkipNullValue()) {
                curId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -465247167:
          case 877955123: {
            if (input.isAtField(FieldNames.curBoardId)) {
              if (!input.trySkipNullValue()) {
                curBoardId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1825075037:
          case 1305709216: {
            if (input.isAtField(FieldNames.layerStatus)) {
              if (!input.trySkipNullValue()) {
                final ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus value = input.readEnum(ChessRogueBoardCellStatusOuterClass.ChessRogueBoardCellStatus.converter());
                if (value != null) {
                  layerStatus = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1475978335: {
            if (input.isAtField(FieldNames.oJNCMJDAABJ)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(oJNCMJDAABJ);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3049826: {
            if (input.isAtField(FieldNames.cell)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(cell);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -972583873:
          case -835560271: {
            if (input.isAtField(FieldNames.allowedSelectCellIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(allowedSelectCellIdList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 351500310:
          case -1962599891: {
            if (input.isAtField(FieldNames.historyCell)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(historyCell);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueAreaInfo clone() {
      return new ChessRogueAreaInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueAreaInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueAreaInfo(), data).checkInitialized();
    }

    public static ChessRogueAreaInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAreaInfo(), input).checkInitialized();
    }

    public static ChessRogueAreaInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAreaInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueAreaInfo messages
     */
    public static MessageFactory<ChessRogueAreaInfo> getFactory() {
      return ChessRogueAreaInfoFactory.INSTANCE;
    }

    private enum ChessRogueAreaInfoFactory implements MessageFactory<ChessRogueAreaInfo> {
      INSTANCE;

      @Override
      public ChessRogueAreaInfo create() {
        return ChessRogueAreaInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curId = FieldName.forField("curId", "cur_id");

      static final FieldName curBoardId = FieldName.forField("curBoardId", "cur_board_id");

      static final FieldName layerStatus = FieldName.forField("layerStatus", "layer_status");

      static final FieldName oJNCMJDAABJ = FieldName.forField("OJNCMJDAABJ");

      static final FieldName cell = FieldName.forField("cell");

      static final FieldName allowedSelectCellIdList = FieldName.forField("allowedSelectCellIdList", "allowed_select_cell_id_list");

      static final FieldName historyCell = FieldName.forField("historyCell", "history_cell");
    }
  }
}
