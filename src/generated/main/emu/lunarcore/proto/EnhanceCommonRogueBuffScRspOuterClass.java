// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class EnhanceCommonRogueBuffScRspOuterClass {
  /**
   * Protobuf type {@code EnhanceCommonRogueBuffScRsp}
   */
  public static final class EnhanceCommonRogueBuffScRsp extends ProtoMessage<EnhanceCommonRogueBuffScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 7;</code>
     */
    private int retcode;

    /**
     * <code>optional bool is_success = 9;</code>
     */
    private boolean isSuccess;

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     */
    private final RogueCommonBuffOuterClass.RogueCommonBuff rogueBuff = RogueCommonBuffOuterClass.RogueCommonBuff.newInstance();

    private EnhanceCommonRogueBuffScRsp() {
    }

    /**
     * @return a new empty instance of {@code EnhanceCommonRogueBuffScRsp}
     */
    public static EnhanceCommonRogueBuffScRsp newInstance() {
      return new EnhanceCommonRogueBuffScRsp();
    }

    /**
     * <code>optional uint32 retcode = 7;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 7;</code>
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 7;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 7;</code>
     * @param value the retcode to set
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool is_success = 9;</code>
     * @return whether the isSuccess field is set
     */
    public boolean hasIsSuccess() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_success = 9;</code>
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp clearIsSuccess() {
      bitField0_ &= ~0x00000002;
      isSuccess = false;
      return this;
    }

    /**
     * <code>optional bool is_success = 9;</code>
     * @return the isSuccess
     */
    public boolean getIsSuccess() {
      return isSuccess;
    }

    /**
     * <code>optional bool is_success = 9;</code>
     * @param value the isSuccess to set
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp setIsSuccess(final boolean value) {
      bitField0_ |= 0x00000002;
      isSuccess = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     * @return whether the rogueBuff field is set
     */
    public boolean hasRogueBuff() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp clearRogueBuff() {
      bitField0_ &= ~0x00000004;
      rogueBuff.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueBuff()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonBuffOuterClass.RogueCommonBuff getRogueBuff() {
      return rogueBuff;
    }

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonBuffOuterClass.RogueCommonBuff getMutableRogueBuff() {
      bitField0_ |= 0x00000004;
      return rogueBuff;
    }

    /**
     * <code>optional .RogueCommonBuff rogue_buff = 3;</code>
     * @param value the rogueBuff to set
     * @return this
     */
    public EnhanceCommonRogueBuffScRsp setRogueBuff(
        final RogueCommonBuffOuterClass.RogueCommonBuff value) {
      bitField0_ |= 0x00000004;
      rogueBuff.copyFrom(value);
      return this;
    }

    @Override
    public EnhanceCommonRogueBuffScRsp copyFrom(final EnhanceCommonRogueBuffScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        isSuccess = other.isSuccess;
        rogueBuff.copyFrom(other.rogueBuff);
      }
      return this;
    }

    @Override
    public EnhanceCommonRogueBuffScRsp mergeFrom(final EnhanceCommonRogueBuffScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasIsSuccess()) {
        setIsSuccess(other.isSuccess);
      }
      if (other.hasRogueBuff()) {
        getMutableRogueBuff().mergeFrom(other.rogueBuff);
      }
      return this;
    }

    @Override
    public EnhanceCommonRogueBuffScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      isSuccess = false;
      rogueBuff.clear();
      return this;
    }

    @Override
    public EnhanceCommonRogueBuffScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueBuff.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof EnhanceCommonRogueBuffScRsp)) {
        return false;
      }
      EnhanceCommonRogueBuffScRsp other = (EnhanceCommonRogueBuffScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasIsSuccess() || isSuccess == other.isSuccess)
        && (!hasRogueBuff() || rogueBuff.equals(other.rogueBuff));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeBoolNoTag(isSuccess);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 26);
        output.writeMessageNoTag(rogueBuff);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueBuff);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public EnhanceCommonRogueBuffScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // isSuccess
            isSuccess = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // rogueBuff
            input.readMessage(rogueBuff);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isSuccess, isSuccess);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rogueBuff, rogueBuff);
      }
      output.endObject();
    }

    @Override
    public EnhanceCommonRogueBuffScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1848018809:
          case -366859794: {
            if (input.isAtField(FieldNames.isSuccess)) {
              if (!input.trySkipNullValue()) {
                isSuccess = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 655607117:
          case -1124785256: {
            if (input.isAtField(FieldNames.rogueBuff)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueBuff);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public EnhanceCommonRogueBuffScRsp clone() {
      return new EnhanceCommonRogueBuffScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static EnhanceCommonRogueBuffScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new EnhanceCommonRogueBuffScRsp(), data).checkInitialized();
    }

    public static EnhanceCommonRogueBuffScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new EnhanceCommonRogueBuffScRsp(), input).checkInitialized();
    }

    public static EnhanceCommonRogueBuffScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EnhanceCommonRogueBuffScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating EnhanceCommonRogueBuffScRsp messages
     */
    public static MessageFactory<EnhanceCommonRogueBuffScRsp> getFactory() {
      return EnhanceCommonRogueBuffScRspFactory.INSTANCE;
    }

    private enum EnhanceCommonRogueBuffScRspFactory implements MessageFactory<EnhanceCommonRogueBuffScRsp> {
      INSTANCE;

      @Override
      public EnhanceCommonRogueBuffScRsp create() {
        return EnhanceCommonRogueBuffScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName isSuccess = FieldName.forField("isSuccess", "is_success");

      static final FieldName rogueBuff = FieldName.forField("rogueBuff", "rogue_buff");
    }
  }
}
