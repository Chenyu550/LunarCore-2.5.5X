// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class CellAdvanceInfoOuterClass {
  /**
   * Protobuf type {@code CellAdvanceInfo}
   */
  public static final class CellAdvanceInfo extends ProtoMessage<CellAdvanceInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     */
    private final HDGLNDMEMEDOuterClass.HDGLNDMEMED aPDAFMCMJJE = HDGLNDMEMEDOuterClass.HDGLNDMEMED.newInstance();

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     */
    private final CellMonsterInfoOuterClass.CellMonsterInfo bossInfo = CellMonsterInfoOuterClass.CellMonsterInfo.newInstance();

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     */
    private final CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo selectBossInfo = CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo.newInstance();

    private CellAdvanceInfo() {
    }

    /**
     * @return a new empty instance of {@code CellAdvanceInfo}
     */
    public static CellAdvanceInfo newInstance() {
      return new CellAdvanceInfo();
    }

    public boolean hasHBLKMDPJDKE() {
      return (((bitField0_ & 0x00000007)) != 0);
    }

    public CellAdvanceInfo clearHBLKMDPJDKE() {
      if (hasHBLKMDPJDKE()) {
        clearAPDAFMCMJJE();
        clearBossInfo();
        clearSelectBossInfo();
      }
      return this;
    }

    private void clearHBLKMDPJDKEOtherAPDAFMCMJJE() {
      if ((((bitField0_ & 0x00000006)) != 0)) {
        clearBossInfo();
        clearSelectBossInfo();
      }
    }

    private void clearHBLKMDPJDKEOtherBossInfo() {
      if ((((bitField0_ & 0x00000005)) != 0)) {
        clearAPDAFMCMJJE();
        clearSelectBossInfo();
      }
    }

    private void clearHBLKMDPJDKEOtherSelectBossInfo() {
      if ((((bitField0_ & 0x00000003)) != 0)) {
        clearAPDAFMCMJJE();
        clearBossInfo();
      }
    }

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     * @return whether the aPDAFMCMJJE field is set
     */
    public boolean hasAPDAFMCMJJE() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     * @return this
     */
    public CellAdvanceInfo clearAPDAFMCMJJE() {
      bitField0_ &= ~0x00000001;
      aPDAFMCMJJE.clear();
      return this;
    }

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAPDAFMCMJJE()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public HDGLNDMEMEDOuterClass.HDGLNDMEMED getAPDAFMCMJJE() {
      return aPDAFMCMJJE;
    }

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public HDGLNDMEMEDOuterClass.HDGLNDMEMED getMutableAPDAFMCMJJE() {
      clearHBLKMDPJDKEOtherAPDAFMCMJJE();
      bitField0_ |= 0x00000001;
      return aPDAFMCMJJE;
    }

    /**
     * <code>optional .HDGLNDMEMED APDAFMCMJJE = 6;</code>
     * @param value the aPDAFMCMJJE to set
     * @return this
     */
    public CellAdvanceInfo setAPDAFMCMJJE(final HDGLNDMEMEDOuterClass.HDGLNDMEMED value) {
      clearHBLKMDPJDKEOtherAPDAFMCMJJE();
      bitField0_ |= 0x00000001;
      aPDAFMCMJJE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     * @return whether the bossInfo field is set
     */
    public boolean hasBossInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     * @return this
     */
    public CellAdvanceInfo clearBossInfo() {
      bitField0_ &= ~0x00000002;
      bossInfo.clear();
      return this;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBossInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellMonsterInfoOuterClass.CellMonsterInfo getBossInfo() {
      return bossInfo;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellMonsterInfoOuterClass.CellMonsterInfo getMutableBossInfo() {
      clearHBLKMDPJDKEOtherBossInfo();
      bitField0_ |= 0x00000002;
      return bossInfo;
    }

    /**
     * <code>optional .CellMonsterInfo boss_info = 7;</code>
     * @param value the bossInfo to set
     * @return this
     */
    public CellAdvanceInfo setBossInfo(final CellMonsterInfoOuterClass.CellMonsterInfo value) {
      clearHBLKMDPJDKEOtherBossInfo();
      bitField0_ |= 0x00000002;
      bossInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     * @return whether the selectBossInfo field is set
     */
    public boolean hasSelectBossInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     * @return this
     */
    public CellAdvanceInfo clearSelectBossInfo() {
      bitField0_ &= ~0x00000004;
      selectBossInfo.clear();
      return this;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSelectBossInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo getSelectBossInfo() {
      return selectBossInfo;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo getMutableSelectBossInfo() {
      clearHBLKMDPJDKEOtherSelectBossInfo();
      bitField0_ |= 0x00000004;
      return selectBossInfo;
    }

    /**
     * <code>optional .CellMonsterSelectInfo select_boss_info = 8;</code>
     * @param value the selectBossInfo to set
     * @return this
     */
    public CellAdvanceInfo setSelectBossInfo(
        final CellMonsterSelectInfoOuterClass.CellMonsterSelectInfo value) {
      clearHBLKMDPJDKEOtherSelectBossInfo();
      bitField0_ |= 0x00000004;
      selectBossInfo.copyFrom(value);
      return this;
    }

    @Override
    public CellAdvanceInfo copyFrom(final CellAdvanceInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aPDAFMCMJJE.copyFrom(other.aPDAFMCMJJE);
        bossInfo.copyFrom(other.bossInfo);
        selectBossInfo.copyFrom(other.selectBossInfo);
      }
      return this;
    }

    @Override
    public CellAdvanceInfo mergeFrom(final CellAdvanceInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAPDAFMCMJJE()) {
        getMutableAPDAFMCMJJE().mergeFrom(other.aPDAFMCMJJE);
      }
      if (other.hasBossInfo()) {
        getMutableBossInfo().mergeFrom(other.bossInfo);
      }
      if (other.hasSelectBossInfo()) {
        getMutableSelectBossInfo().mergeFrom(other.selectBossInfo);
      }
      return this;
    }

    @Override
    public CellAdvanceInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aPDAFMCMJJE.clear();
      bossInfo.clear();
      selectBossInfo.clear();
      return this;
    }

    @Override
    public CellAdvanceInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aPDAFMCMJJE.clearQuick();
      bossInfo.clearQuick();
      selectBossInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof CellAdvanceInfo)) {
        return false;
      }
      CellAdvanceInfo other = (CellAdvanceInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasAPDAFMCMJJE() || aPDAFMCMJJE.equals(other.aPDAFMCMJJE))
        && (!hasBossInfo() || bossInfo.equals(other.bossInfo))
        && (!hasSelectBossInfo() || selectBossInfo.equals(other.selectBossInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(aPDAFMCMJJE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(bossInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(selectBossInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(aPDAFMCMJJE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(bossInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(selectBossInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public CellAdvanceInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 50: {
            // aPDAFMCMJJE
            clearHBLKMDPJDKEOtherAPDAFMCMJJE();
            input.readMessage(aPDAFMCMJJE);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // bossInfo
            clearHBLKMDPJDKEOtherBossInfo();
            input.readMessage(bossInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // selectBossInfo
            clearHBLKMDPJDKEOtherSelectBossInfo();
            input.readMessage(selectBossInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.aPDAFMCMJJE, aPDAFMCMJJE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.bossInfo, bossInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.selectBossInfo, selectBossInfo);
      }
      output.endObject();
    }

    @Override
    public CellAdvanceInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -443793528: {
            if (input.isAtField(FieldNames.aPDAFMCMJJE)) {
              if (!input.trySkipNullValue()) {
                clearHBLKMDPJDKEOtherAPDAFMCMJJE();
                input.readMessage(aPDAFMCMJJE);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2126222779:
          case 1508572736: {
            if (input.isAtField(FieldNames.bossInfo)) {
              if (!input.trySkipNullValue()) {
                clearHBLKMDPJDKEOtherBossInfo();
                input.readMessage(bossInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1216449833:
          case -1646648643: {
            if (input.isAtField(FieldNames.selectBossInfo)) {
              if (!input.trySkipNullValue()) {
                clearHBLKMDPJDKEOtherSelectBossInfo();
                input.readMessage(selectBossInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public CellAdvanceInfo clone() {
      return new CellAdvanceInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static CellAdvanceInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new CellAdvanceInfo(), data).checkInitialized();
    }

    public static CellAdvanceInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellAdvanceInfo(), input).checkInitialized();
    }

    public static CellAdvanceInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new CellAdvanceInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating CellAdvanceInfo messages
     */
    public static MessageFactory<CellAdvanceInfo> getFactory() {
      return CellAdvanceInfoFactory.INSTANCE;
    }

    private enum CellAdvanceInfoFactory implements MessageFactory<CellAdvanceInfo> {
      INSTANCE;

      @Override
      public CellAdvanceInfo create() {
        return CellAdvanceInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aPDAFMCMJJE = FieldName.forField("APDAFMCMJJE");

      static final FieldName bossInfo = FieldName.forField("bossInfo", "boss_info");

      static final FieldName selectBossInfo = FieldName.forField("selectBossInfo", "select_boss_info");
    }
  }
}
