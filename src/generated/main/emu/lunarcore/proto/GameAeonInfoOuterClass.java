// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class GameAeonInfoOuterClass {
  /**
   * Protobuf type {@code GameAeonInfo}
   */
  public static final class GameAeonInfo extends ProtoMessage<GameAeonInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 aeon_id = 10;</code>
     */
    private int aeonId;

    /**
     * <code>optional uint32 unlocked_aeon_enhance_num = 13;</code>
     */
    private int unlockedAeonEnhanceNum;

    /**
     * <code>optional bool is_unlocked = 3;</code>
     */
    private boolean isUnlocked;

    private GameAeonInfo() {
    }

    /**
     * @return a new empty instance of {@code GameAeonInfo}
     */
    public static GameAeonInfo newInstance() {
      return new GameAeonInfo();
    }

    /**
     * <code>optional uint32 aeon_id = 10;</code>
     * @return whether the aeonId field is set
     */
    public boolean hasAeonId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 aeon_id = 10;</code>
     * @return this
     */
    public GameAeonInfo clearAeonId() {
      bitField0_ &= ~0x00000001;
      aeonId = 0;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 10;</code>
     * @return the aeonId
     */
    public int getAeonId() {
      return aeonId;
    }

    /**
     * <code>optional uint32 aeon_id = 10;</code>
     * @param value the aeonId to set
     * @return this
     */
    public GameAeonInfo setAeonId(final int value) {
      bitField0_ |= 0x00000001;
      aeonId = value;
      return this;
    }

    /**
     * <code>optional uint32 unlocked_aeon_enhance_num = 13;</code>
     * @return whether the unlockedAeonEnhanceNum field is set
     */
    public boolean hasUnlockedAeonEnhanceNum() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 unlocked_aeon_enhance_num = 13;</code>
     * @return this
     */
    public GameAeonInfo clearUnlockedAeonEnhanceNum() {
      bitField0_ &= ~0x00000002;
      unlockedAeonEnhanceNum = 0;
      return this;
    }

    /**
     * <code>optional uint32 unlocked_aeon_enhance_num = 13;</code>
     * @return the unlockedAeonEnhanceNum
     */
    public int getUnlockedAeonEnhanceNum() {
      return unlockedAeonEnhanceNum;
    }

    /**
     * <code>optional uint32 unlocked_aeon_enhance_num = 13;</code>
     * @param value the unlockedAeonEnhanceNum to set
     * @return this
     */
    public GameAeonInfo setUnlockedAeonEnhanceNum(final int value) {
      bitField0_ |= 0x00000002;
      unlockedAeonEnhanceNum = value;
      return this;
    }

    /**
     * <code>optional bool is_unlocked = 3;</code>
     * @return whether the isUnlocked field is set
     */
    public boolean hasIsUnlocked() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool is_unlocked = 3;</code>
     * @return this
     */
    public GameAeonInfo clearIsUnlocked() {
      bitField0_ &= ~0x00000004;
      isUnlocked = false;
      return this;
    }

    /**
     * <code>optional bool is_unlocked = 3;</code>
     * @return the isUnlocked
     */
    public boolean getIsUnlocked() {
      return isUnlocked;
    }

    /**
     * <code>optional bool is_unlocked = 3;</code>
     * @param value the isUnlocked to set
     * @return this
     */
    public GameAeonInfo setIsUnlocked(final boolean value) {
      bitField0_ |= 0x00000004;
      isUnlocked = value;
      return this;
    }

    @Override
    public GameAeonInfo copyFrom(final GameAeonInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aeonId = other.aeonId;
        unlockedAeonEnhanceNum = other.unlockedAeonEnhanceNum;
        isUnlocked = other.isUnlocked;
      }
      return this;
    }

    @Override
    public GameAeonInfo mergeFrom(final GameAeonInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAeonId()) {
        setAeonId(other.aeonId);
      }
      if (other.hasUnlockedAeonEnhanceNum()) {
        setUnlockedAeonEnhanceNum(other.unlockedAeonEnhanceNum);
      }
      if (other.hasIsUnlocked()) {
        setIsUnlocked(other.isUnlocked);
      }
      return this;
    }

    @Override
    public GameAeonInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aeonId = 0;
      unlockedAeonEnhanceNum = 0;
      isUnlocked = false;
      return this;
    }

    @Override
    public GameAeonInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GameAeonInfo)) {
        return false;
      }
      GameAeonInfo other = (GameAeonInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasAeonId() || aeonId == other.aeonId)
        && (!hasUnlockedAeonEnhanceNum() || unlockedAeonEnhanceNum == other.unlockedAeonEnhanceNum)
        && (!hasIsUnlocked() || isUnlocked == other.isUnlocked);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(unlockedAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 24);
        output.writeBoolNoTag(isUnlocked);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unlockedAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GameAeonInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // aeonId
            aeonId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // unlockedAeonEnhanceNum
            unlockedAeonEnhanceNum = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // isUnlocked
            isUnlocked = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.aeonId, aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.unlockedAeonEnhanceNum, unlockedAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.isUnlocked, isUnlocked);
      }
      output.endObject();
    }

    @Override
    public GameAeonInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1421249154:
          case -1109029417: {
            if (input.isAtField(FieldNames.aeonId)) {
              if (!input.trySkipNullValue()) {
                aeonId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -298234594:
          case -915660011: {
            if (input.isAtField(FieldNames.unlockedAeonEnhanceNum)) {
              if (!input.trySkipNullValue()) {
                unlockedAeonEnhanceNum = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1004219859:
          case -945979816: {
            if (input.isAtField(FieldNames.isUnlocked)) {
              if (!input.trySkipNullValue()) {
                isUnlocked = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GameAeonInfo clone() {
      return new GameAeonInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GameAeonInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GameAeonInfo(), data).checkInitialized();
    }

    public static GameAeonInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GameAeonInfo(), input).checkInitialized();
    }

    public static GameAeonInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GameAeonInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating GameAeonInfo messages
     */
    public static MessageFactory<GameAeonInfo> getFactory() {
      return GameAeonInfoFactory.INSTANCE;
    }

    private enum GameAeonInfoFactory implements MessageFactory<GameAeonInfo> {
      INSTANCE;

      @Override
      public GameAeonInfo create() {
        return GameAeonInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aeonId = FieldName.forField("aeonId", "aeon_id");

      static final FieldName unlockedAeonEnhanceNum = FieldName.forField("unlockedAeonEnhanceNum", "unlocked_aeon_enhance_num");

      static final FieldName isUnlocked = FieldName.forField("isUnlocked", "is_unlocked");
    }
  }
}
