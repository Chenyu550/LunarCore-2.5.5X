// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueQuestFinishNotifyOuterClass {
  /**
   * Protobuf type {@code ChessRogueQuestFinishNotify}
   */
  public static final class ChessRogueQuestFinishNotify extends ProtoMessage<ChessRogueQuestFinishNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 quest_id = 2;</code>
     */
    private int questId;

    /**
     * <code>optional uint32 OKHLKGJLEMK = 3;</code>
     */
    private int oKHLKGJLEMK;

    private ChessRogueQuestFinishNotify() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueQuestFinishNotify}
     */
    public static ChessRogueQuestFinishNotify newInstance() {
      return new ChessRogueQuestFinishNotify();
    }

    /**
     * <code>optional uint32 quest_id = 2;</code>
     * @return whether the questId field is set
     */
    public boolean hasQuestId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 quest_id = 2;</code>
     * @return this
     */
    public ChessRogueQuestFinishNotify clearQuestId() {
      bitField0_ &= ~0x00000001;
      questId = 0;
      return this;
    }

    /**
     * <code>optional uint32 quest_id = 2;</code>
     * @return the questId
     */
    public int getQuestId() {
      return questId;
    }

    /**
     * <code>optional uint32 quest_id = 2;</code>
     * @param value the questId to set
     * @return this
     */
    public ChessRogueQuestFinishNotify setQuestId(final int value) {
      bitField0_ |= 0x00000001;
      questId = value;
      return this;
    }

    /**
     * <code>optional uint32 OKHLKGJLEMK = 3;</code>
     * @return whether the oKHLKGJLEMK field is set
     */
    public boolean hasOKHLKGJLEMK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OKHLKGJLEMK = 3;</code>
     * @return this
     */
    public ChessRogueQuestFinishNotify clearOKHLKGJLEMK() {
      bitField0_ &= ~0x00000002;
      oKHLKGJLEMK = 0;
      return this;
    }

    /**
     * <code>optional uint32 OKHLKGJLEMK = 3;</code>
     * @return the oKHLKGJLEMK
     */
    public int getOKHLKGJLEMK() {
      return oKHLKGJLEMK;
    }

    /**
     * <code>optional uint32 OKHLKGJLEMK = 3;</code>
     * @param value the oKHLKGJLEMK to set
     * @return this
     */
    public ChessRogueQuestFinishNotify setOKHLKGJLEMK(final int value) {
      bitField0_ |= 0x00000002;
      oKHLKGJLEMK = value;
      return this;
    }

    @Override
    public ChessRogueQuestFinishNotify copyFrom(final ChessRogueQuestFinishNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        questId = other.questId;
        oKHLKGJLEMK = other.oKHLKGJLEMK;
      }
      return this;
    }

    @Override
    public ChessRogueQuestFinishNotify mergeFrom(final ChessRogueQuestFinishNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasQuestId()) {
        setQuestId(other.questId);
      }
      if (other.hasOKHLKGJLEMK()) {
        setOKHLKGJLEMK(other.oKHLKGJLEMK);
      }
      return this;
    }

    @Override
    public ChessRogueQuestFinishNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      questId = 0;
      oKHLKGJLEMK = 0;
      return this;
    }

    @Override
    public ChessRogueQuestFinishNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueQuestFinishNotify)) {
        return false;
      }
      ChessRogueQuestFinishNotify other = (ChessRogueQuestFinishNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasQuestId() || questId == other.questId)
        && (!hasOKHLKGJLEMK() || oKHLKGJLEMK == other.oKHLKGJLEMK);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(questId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(oKHLKGJLEMK);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(questId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oKHLKGJLEMK);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueQuestFinishNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // questId
            questId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // oKHLKGJLEMK
            oKHLKGJLEMK = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.questId, questId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oKHLKGJLEMK, oKHLKGJLEMK);
      }
      output.endObject();
    }

    @Override
    public ChessRogueQuestFinishNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 655126941:
          case -1165879912: {
            if (input.isAtField(FieldNames.questId)) {
              if (!input.trySkipNullValue()) {
                questId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 184659045: {
            if (input.isAtField(FieldNames.oKHLKGJLEMK)) {
              if (!input.trySkipNullValue()) {
                oKHLKGJLEMK = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueQuestFinishNotify clone() {
      return new ChessRogueQuestFinishNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueQuestFinishNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueQuestFinishNotify(), data).checkInitialized();
    }

    public static ChessRogueQuestFinishNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQuestFinishNotify(), input).checkInitialized();
    }

    public static ChessRogueQuestFinishNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueQuestFinishNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueQuestFinishNotify messages
     */
    public static MessageFactory<ChessRogueQuestFinishNotify> getFactory() {
      return ChessRogueQuestFinishNotifyFactory.INSTANCE;
    }

    private enum ChessRogueQuestFinishNotifyFactory implements MessageFactory<ChessRogueQuestFinishNotify> {
      INSTANCE;

      @Override
      public ChessRogueQuestFinishNotify create() {
        return ChessRogueQuestFinishNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName questId = FieldName.forField("questId", "quest_id");

      static final FieldName oKHLKGJLEMK = FieldName.forField("OKHLKGJLEMK");
    }
  }
}
