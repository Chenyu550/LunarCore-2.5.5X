// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueModifierInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueModifierInfo}
   */
  public static final class ChessRogueModifierInfo extends ProtoMessage<ChessRogueModifierInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 select_cell_id_list = 12;</code>
     */
    private int selectCellIdList;

    /**
     * <code>optional bool confirm = 4;</code>
     */
    private boolean confirm;

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     */
    private final RepeatedInt targetCellIdList = RepeatedInt.newEmptyInstance();

    private ChessRogueModifierInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueModifierInfo}
     */
    public static ChessRogueModifierInfo newInstance() {
      return new ChessRogueModifierInfo();
    }

    /**
     * <code>optional uint32 select_cell_id_list = 12;</code>
     * @return whether the selectCellIdList field is set
     */
    public boolean hasSelectCellIdList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 select_cell_id_list = 12;</code>
     * @return this
     */
    public ChessRogueModifierInfo clearSelectCellIdList() {
      bitField0_ &= ~0x00000001;
      selectCellIdList = 0;
      return this;
    }

    /**
     * <code>optional uint32 select_cell_id_list = 12;</code>
     * @return the selectCellIdList
     */
    public int getSelectCellIdList() {
      return selectCellIdList;
    }

    /**
     * <code>optional uint32 select_cell_id_list = 12;</code>
     * @param value the selectCellIdList to set
     * @return this
     */
    public ChessRogueModifierInfo setSelectCellIdList(final int value) {
      bitField0_ |= 0x00000001;
      selectCellIdList = value;
      return this;
    }

    /**
     * <code>optional bool confirm = 4;</code>
     * @return whether the confirm field is set
     */
    public boolean hasConfirm() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool confirm = 4;</code>
     * @return this
     */
    public ChessRogueModifierInfo clearConfirm() {
      bitField0_ &= ~0x00000002;
      confirm = false;
      return this;
    }

    /**
     * <code>optional bool confirm = 4;</code>
     * @return the confirm
     */
    public boolean getConfirm() {
      return confirm;
    }

    /**
     * <code>optional bool confirm = 4;</code>
     * @param value the confirm to set
     * @return this
     */
    public ChessRogueModifierInfo setConfirm(final boolean value) {
      bitField0_ |= 0x00000002;
      confirm = value;
      return this;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     * @return whether the targetCellIdList field is set
     */
    public boolean hasTargetCellIdList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     * @return this
     */
    public ChessRogueModifierInfo clearTargetCellIdList() {
      bitField0_ &= ~0x00000004;
      targetCellIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTargetCellIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getTargetCellIdList() {
      return targetCellIdList;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableTargetCellIdList() {
      bitField0_ |= 0x00000004;
      return targetCellIdList;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     * @param value the targetCellIdList to add
     * @return this
     */
    public ChessRogueModifierInfo addTargetCellIdList(final int value) {
      bitField0_ |= 0x00000004;
      targetCellIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 target_cell_id_list = 1;</code>
     * @param values the targetCellIdList to add
     * @return this
     */
    public ChessRogueModifierInfo addAllTargetCellIdList(final int... values) {
      bitField0_ |= 0x00000004;
      targetCellIdList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueModifierInfo copyFrom(final ChessRogueModifierInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        selectCellIdList = other.selectCellIdList;
        confirm = other.confirm;
        targetCellIdList.copyFrom(other.targetCellIdList);
      }
      return this;
    }

    @Override
    public ChessRogueModifierInfo mergeFrom(final ChessRogueModifierInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSelectCellIdList()) {
        setSelectCellIdList(other.selectCellIdList);
      }
      if (other.hasConfirm()) {
        setConfirm(other.confirm);
      }
      if (other.hasTargetCellIdList()) {
        getMutableTargetCellIdList().addAll(other.targetCellIdList);
      }
      return this;
    }

    @Override
    public ChessRogueModifierInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      selectCellIdList = 0;
      confirm = false;
      targetCellIdList.clear();
      return this;
    }

    @Override
    public ChessRogueModifierInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      targetCellIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueModifierInfo)) {
        return false;
      }
      ChessRogueModifierInfo other = (ChessRogueModifierInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasSelectCellIdList() || selectCellIdList == other.selectCellIdList)
        && (!hasConfirm() || confirm == other.confirm)
        && (!hasTargetCellIdList() || targetCellIdList.equals(other.targetCellIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(selectCellIdList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeBoolNoTag(confirm);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < targetCellIdList.length(); i++) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(targetCellIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(selectCellIdList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * targetCellIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(targetCellIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueModifierInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 96: {
            // selectCellIdList
            selectCellIdList = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // confirm
            confirm = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // targetCellIdList [packed=true]
            input.readPackedUInt32(targetCellIdList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 8: {
            // targetCellIdList [packed=false]
            tag = input.readRepeatedUInt32(targetCellIdList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.selectCellIdList, selectCellIdList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.confirm, confirm);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.targetCellIdList, targetCellIdList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueModifierInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1321363849:
          case -719375928: {
            if (input.isAtField(FieldNames.selectCellIdList)) {
              if (!input.trySkipNullValue()) {
                selectCellIdList = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 951117504: {
            if (input.isAtField(FieldNames.confirm)) {
              if (!input.trySkipNullValue()) {
                confirm = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1660804300:
          case -346566829: {
            if (input.isAtField(FieldNames.targetCellIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(targetCellIdList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueModifierInfo clone() {
      return new ChessRogueModifierInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueModifierInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueModifierInfo(), data).checkInitialized();
    }

    public static ChessRogueModifierInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueModifierInfo(), input).checkInitialized();
    }

    public static ChessRogueModifierInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueModifierInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueModifierInfo messages
     */
    public static MessageFactory<ChessRogueModifierInfo> getFactory() {
      return ChessRogueModifierInfoFactory.INSTANCE;
    }

    private enum ChessRogueModifierInfoFactory implements MessageFactory<ChessRogueModifierInfo> {
      INSTANCE;

      @Override
      public ChessRogueModifierInfo create() {
        return ChessRogueModifierInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName selectCellIdList = FieldName.forField("selectCellIdList", "select_cell_id_list");

      static final FieldName confirm = FieldName.forField("confirm");

      static final FieldName targetCellIdList = FieldName.forField("targetCellIdList", "target_cell_id_list");
    }
  }
}
