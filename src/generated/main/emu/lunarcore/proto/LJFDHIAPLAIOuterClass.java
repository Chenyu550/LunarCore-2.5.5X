// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class LJFDHIAPLAIOuterClass {
  /**
   * Protobuf type {@code LJFDHIAPLAI}
   */
  public static final class LJFDHIAPLAI extends ProtoMessage<LJFDHIAPLAI> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 DCECFOKFIHH = 3;</code>
     */
    private int dCECFOKFIHH;

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     */
    private final RepeatedInt gEHJLOHEGGB = RepeatedInt.newEmptyInstance();

    private LJFDHIAPLAI() {
    }

    /**
     * @return a new empty instance of {@code LJFDHIAPLAI}
     */
    public static LJFDHIAPLAI newInstance() {
      return new LJFDHIAPLAI();
    }

    /**
     * <code>optional uint32 DCECFOKFIHH = 3;</code>
     * @return whether the dCECFOKFIHH field is set
     */
    public boolean hasDCECFOKFIHH() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 DCECFOKFIHH = 3;</code>
     * @return this
     */
    public LJFDHIAPLAI clearDCECFOKFIHH() {
      bitField0_ &= ~0x00000001;
      dCECFOKFIHH = 0;
      return this;
    }

    /**
     * <code>optional uint32 DCECFOKFIHH = 3;</code>
     * @return the dCECFOKFIHH
     */
    public int getDCECFOKFIHH() {
      return dCECFOKFIHH;
    }

    /**
     * <code>optional uint32 DCECFOKFIHH = 3;</code>
     * @param value the dCECFOKFIHH to set
     * @return this
     */
    public LJFDHIAPLAI setDCECFOKFIHH(final int value) {
      bitField0_ |= 0x00000001;
      dCECFOKFIHH = value;
      return this;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     * @return whether the gEHJLOHEGGB field is set
     */
    public boolean hasGEHJLOHEGGB() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     * @return this
     */
    public LJFDHIAPLAI clearGEHJLOHEGGB() {
      bitField0_ &= ~0x00000002;
      gEHJLOHEGGB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGEHJLOHEGGB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getGEHJLOHEGGB() {
      return gEHJLOHEGGB;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableGEHJLOHEGGB() {
      bitField0_ |= 0x00000002;
      return gEHJLOHEGGB;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     * @param value the gEHJLOHEGGB to add
     * @return this
     */
    public LJFDHIAPLAI addGEHJLOHEGGB(final int value) {
      bitField0_ |= 0x00000002;
      gEHJLOHEGGB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 GEHJLOHEGGB = 9;</code>
     * @param values the gEHJLOHEGGB to add
     * @return this
     */
    public LJFDHIAPLAI addAllGEHJLOHEGGB(final int... values) {
      bitField0_ |= 0x00000002;
      gEHJLOHEGGB.addAll(values);
      return this;
    }

    @Override
    public LJFDHIAPLAI copyFrom(final LJFDHIAPLAI other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        dCECFOKFIHH = other.dCECFOKFIHH;
        gEHJLOHEGGB.copyFrom(other.gEHJLOHEGGB);
      }
      return this;
    }

    @Override
    public LJFDHIAPLAI mergeFrom(final LJFDHIAPLAI other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDCECFOKFIHH()) {
        setDCECFOKFIHH(other.dCECFOKFIHH);
      }
      if (other.hasGEHJLOHEGGB()) {
        getMutableGEHJLOHEGGB().addAll(other.gEHJLOHEGGB);
      }
      return this;
    }

    @Override
    public LJFDHIAPLAI clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dCECFOKFIHH = 0;
      gEHJLOHEGGB.clear();
      return this;
    }

    @Override
    public LJFDHIAPLAI clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gEHJLOHEGGB.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof LJFDHIAPLAI)) {
        return false;
      }
      LJFDHIAPLAI other = (LJFDHIAPLAI) o;
      return bitField0_ == other.bitField0_
        && (!hasDCECFOKFIHH() || dCECFOKFIHH == other.dCECFOKFIHH)
        && (!hasGEHJLOHEGGB() || gEHJLOHEGGB.equals(other.gEHJLOHEGGB));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(dCECFOKFIHH);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < gEHJLOHEGGB.length(); i++) {
          output.writeRawByte((byte) 72);
          output.writeUInt32NoTag(gEHJLOHEGGB.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dCECFOKFIHH);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * gEHJLOHEGGB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(gEHJLOHEGGB);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public LJFDHIAPLAI mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // dCECFOKFIHH
            dCECFOKFIHH = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // gEHJLOHEGGB [packed=true]
            input.readPackedUInt32(gEHJLOHEGGB, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 72: {
            // gEHJLOHEGGB [packed=false]
            tag = input.readRepeatedUInt32(gEHJLOHEGGB, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.dCECFOKFIHH, dCECFOKFIHH);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.gEHJLOHEGGB, gEHJLOHEGGB);
      }
      output.endObject();
    }

    @Override
    public LJFDHIAPLAI mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1537368920: {
            if (input.isAtField(FieldNames.dCECFOKFIHH)) {
              if (!input.trySkipNullValue()) {
                dCECFOKFIHH = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 483311426: {
            if (input.isAtField(FieldNames.gEHJLOHEGGB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(gEHJLOHEGGB);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public LJFDHIAPLAI clone() {
      return new LJFDHIAPLAI().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static LJFDHIAPLAI parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new LJFDHIAPLAI(), data).checkInitialized();
    }

    public static LJFDHIAPLAI parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LJFDHIAPLAI(), input).checkInitialized();
    }

    public static LJFDHIAPLAI parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LJFDHIAPLAI(), input).checkInitialized();
    }

    /**
     * @return factory for creating LJFDHIAPLAI messages
     */
    public static MessageFactory<LJFDHIAPLAI> getFactory() {
      return LJFDHIAPLAIFactory.INSTANCE;
    }

    private enum LJFDHIAPLAIFactory implements MessageFactory<LJFDHIAPLAI> {
      INSTANCE;

      @Override
      public LJFDHIAPLAI create() {
        return LJFDHIAPLAI.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName dCECFOKFIHH = FieldName.forField("DCECFOKFIHH");

      static final FieldName gEHJLOHEGGB = FieldName.forField("GEHJLOHEGGB");
    }
  }
}
